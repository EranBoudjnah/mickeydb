/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.ProductsInBasket;
import com.justeat.TakeawaysDBContract.ProductsInBasket.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class ProductsInBasketRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<ProductsInBasketRecord> sFactory = new ActiveRecordFactory<ProductsInBasketRecord>() {
		@Override
		public ProductsInBasketRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return ProductsInBasket.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<ProductsInBasketRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<ProductsInBasketRecord> CREATOR 
    	= new Parcelable.Creator<ProductsInBasketRecord>() {
        public ProductsInBasketRecord createFromParcel(Parcel in) {
            return new ProductsInBasketRecord(in);
        }

        public ProductsInBasketRecord[] newArray(int size) {
            return new ProductsInBasketRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	ProductsInBasket._ID,
    	ProductsInBasket.RESTAURANT_JEID,
    	ProductsInBasket.MENU_JEID,
    	ProductsInBasket.CATEGORY_JEID,
    	ProductsInBasket.PRODUCT_JEID,
    	ProductsInBasket.GROUP_KEY,
    	ProductsInBasket.NAME,
    	ProductsInBasket.DESCRIPTION,
    	ProductsInBasket.PRICE,
    	ProductsInBasket.IS_COMPLEX,
    	ProductsInBasket.HAS_SYNONYMS,
    	ProductsInBasket.CONTAINS_NUTS,
    	ProductsInBasket.IS_SPICY,
    	ProductsInBasket.IS_VEGETARIAN,
    	ProductsInBasket.QUANTITY,
    	ProductsInBasket.SPECIAL_OFFER,
    	ProductsInBasket.SYNONYMS,
    	ProductsInBasket.ALL_DESCRIPTIONS,
    	ProductsInBasket.RESULT,
    	ProductsInBasket.STATUS,
    	ProductsInBasket.MENU_SORT_KEY,
    	ProductsInBasket.DESCRIPTOR
    };
    
    public interface Indices {
    	int _ID = 0;
    	int RESTAURANT_JEID = 1;
    	int MENU_JEID = 2;
    	int CATEGORY_JEID = 3;
    	int PRODUCT_JEID = 4;
    	int GROUP_KEY = 5;
    	int NAME = 6;
    	int DESCRIPTION = 7;
    	int PRICE = 8;
    	int IS_COMPLEX = 9;
    	int HAS_SYNONYMS = 10;
    	int CONTAINS_NUTS = 11;
    	int IS_SPICY = 12;
    	int IS_VEGETARIAN = 13;
    	int QUANTITY = 14;
    	int SPECIAL_OFFER = 15;
    	int SYNONYMS = 16;
    	int ALL_DESCRIPTIONS = 17;
    	int RESULT = 18;
    	int STATUS = 19;
    	int MENU_SORT_KEY = 20;
    	int DESCRIPTOR = 21;
    }
    
    private long mRestaurantJeid;
    private boolean mRestaurantJeidDirty;
    private long mMenuJeid;
    private boolean mMenuJeidDirty;
    private long mCategoryJeid;
    private boolean mCategoryJeidDirty;
    private long mProductJeid;
    private boolean mProductJeidDirty;
    private String mGroupKey;
    private boolean mGroupKeyDirty;
    private String mName;
    private boolean mNameDirty;
    private String mDescription;
    private boolean mDescriptionDirty;
    private double mPrice;
    private boolean mPriceDirty;
    private boolean mIsComplex;
    private boolean mIsComplexDirty;
    private String mHasSynonyms;
    private boolean mHasSynonymsDirty;
    private String mContainsNuts;
    private boolean mContainsNutsDirty;
    private String mIsSpicy;
    private boolean mIsSpicyDirty;
    private String mIsVegetarian;
    private boolean mIsVegetarianDirty;
    private long mQuantity;
    private boolean mQuantityDirty;
    private String mSpecialOffer;
    private boolean mSpecialOfferDirty;
    private String mSynonyms;
    private boolean mSynonymsDirty;
    private String mAllDescriptions;
    private boolean mAllDescriptionsDirty;
    private long mResult;
    private boolean mResultDirty;
    private long mStatus;
    private boolean mStatusDirty;
    private String mMenuSortKey;
    private boolean mMenuSortKeyDirty;
    private long mDescriptor;
    private boolean mDescriptorDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setRestaurantJeid(long restaurantJeid) {
    	mRestaurantJeid = restaurantJeid;
    	mRestaurantJeidDirty = true;
    }
    
    public long getRestaurantJeid() {
    	return mRestaurantJeid;
    }
    public void setMenuJeid(long menuJeid) {
    	mMenuJeid = menuJeid;
    	mMenuJeidDirty = true;
    }
    
    public long getMenuJeid() {
    	return mMenuJeid;
    }
    public void setCategoryJeid(long categoryJeid) {
    	mCategoryJeid = categoryJeid;
    	mCategoryJeidDirty = true;
    }
    
    public long getCategoryJeid() {
    	return mCategoryJeid;
    }
    public void setProductJeid(long productJeid) {
    	mProductJeid = productJeid;
    	mProductJeidDirty = true;
    }
    
    public long getProductJeid() {
    	return mProductJeid;
    }
    public void setGroupKey(String groupKey) {
    	mGroupKey = groupKey;
    	mGroupKeyDirty = true;
    }
    
    public String getGroupKey() {
    	return mGroupKey;
    }
    public void setName(String name) {
    	mName = name;
    	mNameDirty = true;
    }
    
    public String getName() {
    	return mName;
    }
    public void setDescription(String description) {
    	mDescription = description;
    	mDescriptionDirty = true;
    }
    
    public String getDescription() {
    	return mDescription;
    }
    public void setPrice(double price) {
    	mPrice = price;
    	mPriceDirty = true;
    }
    
    public double getPrice() {
    	return mPrice;
    }
    public void setIsComplex(boolean isComplex) {
    	mIsComplex = isComplex;
    	mIsComplexDirty = true;
    }
    
    public boolean getIsComplex() {
    	return mIsComplex;
    }
    public void setHasSynonyms(String hasSynonyms) {
    	mHasSynonyms = hasSynonyms;
    	mHasSynonymsDirty = true;
    }
    
    public String getHasSynonyms() {
    	return mHasSynonyms;
    }
    public void setContainsNuts(String containsNuts) {
    	mContainsNuts = containsNuts;
    	mContainsNutsDirty = true;
    }
    
    public String getContainsNuts() {
    	return mContainsNuts;
    }
    public void setIsSpicy(String isSpicy) {
    	mIsSpicy = isSpicy;
    	mIsSpicyDirty = true;
    }
    
    public String getIsSpicy() {
    	return mIsSpicy;
    }
    public void setIsVegetarian(String isVegetarian) {
    	mIsVegetarian = isVegetarian;
    	mIsVegetarianDirty = true;
    }
    
    public String getIsVegetarian() {
    	return mIsVegetarian;
    }
    public void setQuantity(long quantity) {
    	mQuantity = quantity;
    	mQuantityDirty = true;
    }
    
    public long getQuantity() {
    	return mQuantity;
    }
    public void setSpecialOffer(String specialOffer) {
    	mSpecialOffer = specialOffer;
    	mSpecialOfferDirty = true;
    }
    
    public String getSpecialOffer() {
    	return mSpecialOffer;
    }
    public void setSynonyms(String synonyms) {
    	mSynonyms = synonyms;
    	mSynonymsDirty = true;
    }
    
    public String getSynonyms() {
    	return mSynonyms;
    }
    public void setAllDescriptions(String allDescriptions) {
    	mAllDescriptions = allDescriptions;
    	mAllDescriptionsDirty = true;
    }
    
    public String getAllDescriptions() {
    	return mAllDescriptions;
    }
    public void setResult(long result) {
    	mResult = result;
    	mResultDirty = true;
    }
    
    public long getResult() {
    	return mResult;
    }
    public void setStatus(long status) {
    	mStatus = status;
    	mStatusDirty = true;
    }
    
    public long getStatus() {
    	return mStatus;
    }
    public void setMenuSortKey(String menuSortKey) {
    	mMenuSortKey = menuSortKey;
    	mMenuSortKeyDirty = true;
    }
    
    public String getMenuSortKey() {
    	return mMenuSortKey;
    }
    public void setDescriptor(long descriptor) {
    	mDescriptor = descriptor;
    	mDescriptorDirty = true;
    }
    
    public long getDescriptor() {
    	return mDescriptor;
    }
    
    public ProductsInBasketRecord() {
    	super(ProductsInBasket.CONTENT_URI);
	}
	
	private ProductsInBasketRecord(Parcel in) {
    	super(ProductsInBasket.CONTENT_URI);
    	
		setId(in.readLong());
		
		mRestaurantJeid = in.readLong();
		mMenuJeid = in.readLong();
		mCategoryJeid = in.readLong();
		mProductJeid = in.readLong();
		mGroupKey = in.readString();
		mName = in.readString();
		mDescription = in.readString();
		mPrice = in.readDouble();
		mIsComplex = (in.readInt() > 0);
		mHasSynonyms = in.readString();
		mContainsNuts = in.readString();
		mIsSpicy = in.readString();
		mIsVegetarian = in.readString();
		mQuantity = in.readLong();
		mSpecialOffer = in.readString();
		mSynonyms = in.readString();
		mAllDescriptions = in.readString();
		mResult = in.readLong();
		mStatus = in.readLong();
		mMenuSortKey = in.readString();
		mDescriptor = in.readLong();
		
		boolean[] dirtyFlags = new boolean[21];
		in.readBooleanArray(dirtyFlags);
		mRestaurantJeidDirty = dirtyFlags[0];
		mMenuJeidDirty = dirtyFlags[1];
		mCategoryJeidDirty = dirtyFlags[2];
		mProductJeidDirty = dirtyFlags[3];
		mGroupKeyDirty = dirtyFlags[4];
		mNameDirty = dirtyFlags[5];
		mDescriptionDirty = dirtyFlags[6];
		mPriceDirty = dirtyFlags[7];
		mIsComplexDirty = dirtyFlags[8];
		mHasSynonymsDirty = dirtyFlags[9];
		mContainsNutsDirty = dirtyFlags[10];
		mIsSpicyDirty = dirtyFlags[11];
		mIsVegetarianDirty = dirtyFlags[12];
		mQuantityDirty = dirtyFlags[13];
		mSpecialOfferDirty = dirtyFlags[14];
		mSynonymsDirty = dirtyFlags[15];
		mAllDescriptionsDirty = dirtyFlags[16];
		mResultDirty = dirtyFlags[17];
		mStatusDirty = dirtyFlags[18];
		mMenuSortKeyDirty = dirtyFlags[19];
		mDescriptorDirty = dirtyFlags[20];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mRestaurantJeid);
		dest.writeLong(mMenuJeid);
		dest.writeLong(mCategoryJeid);
		dest.writeLong(mProductJeid);
		dest.writeString(mGroupKey);
		dest.writeString(mName);
		dest.writeString(mDescription);
		dest.writeDouble(mPrice);
		dest.writeInt(mIsComplex ? 1 : 0);
		dest.writeString(mHasSynonyms);
		dest.writeString(mContainsNuts);
		dest.writeString(mIsSpicy);
		dest.writeString(mIsVegetarian);
		dest.writeLong(mQuantity);
		dest.writeString(mSpecialOffer);
		dest.writeString(mSynonyms);
		dest.writeString(mAllDescriptions);
		dest.writeLong(mResult);
		dest.writeLong(mStatus);
		dest.writeString(mMenuSortKey);
		dest.writeLong(mDescriptor);
		dest.writeBooleanArray(new boolean[] {
			mRestaurantJeidDirty,
			mMenuJeidDirty,
			mCategoryJeidDirty,
			mProductJeidDirty,
			mGroupKeyDirty,
			mNameDirty,
			mDescriptionDirty,
			mPriceDirty,
			mIsComplexDirty,
			mHasSynonymsDirty,
			mContainsNutsDirty,
			mIsSpicyDirty,
			mIsVegetarianDirty,
			mQuantityDirty,
			mSpecialOfferDirty,
			mSynonymsDirty,
			mAllDescriptionsDirty,
			mResultDirty,
			mStatusDirty,
			mMenuSortKeyDirty,
			mDescriptorDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = ProductsInBasket.newBuilder();

		if(mRestaurantJeidDirty) {
			builder.setRestaurantJeid(mRestaurantJeid);
		}
		if(mMenuJeidDirty) {
			builder.setMenuJeid(mMenuJeid);
		}
		if(mCategoryJeidDirty) {
			builder.setCategoryJeid(mCategoryJeid);
		}
		if(mProductJeidDirty) {
			builder.setProductJeid(mProductJeid);
		}
		if(mGroupKeyDirty) {
			builder.setGroupKey(mGroupKey);
		}
		if(mNameDirty) {
			builder.setName(mName);
		}
		if(mDescriptionDirty) {
			builder.setDescription(mDescription);
		}
		if(mPriceDirty) {
			builder.setPrice(mPrice);
		}
		if(mIsComplexDirty) {
			builder.setIsComplex(mIsComplex);
		}
		if(mHasSynonymsDirty) {
			builder.setHasSynonyms(mHasSynonyms);
		}
		if(mContainsNutsDirty) {
			builder.setContainsNuts(mContainsNuts);
		}
		if(mIsSpicyDirty) {
			builder.setIsSpicy(mIsSpicy);
		}
		if(mIsVegetarianDirty) {
			builder.setIsVegetarian(mIsVegetarian);
		}
		if(mQuantityDirty) {
			builder.setQuantity(mQuantity);
		}
		if(mSpecialOfferDirty) {
			builder.setSpecialOffer(mSpecialOffer);
		}
		if(mSynonymsDirty) {
			builder.setSynonyms(mSynonyms);
		}
		if(mAllDescriptionsDirty) {
			builder.setAllDescriptions(mAllDescriptions);
		}
		if(mResultDirty) {
			builder.setResult(mResult);
		}
		if(mStatusDirty) {
			builder.setStatus(mStatus);
		}
		if(mMenuSortKeyDirty) {
			builder.setMenuSortKey(mMenuSortKey);
		}
		if(mDescriptorDirty) {
			builder.setDescriptor(mDescriptor);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mRestaurantJeidDirty = dirty;
		mMenuJeidDirty = dirty;
		mCategoryJeidDirty = dirty;
		mProductJeidDirty = dirty;
		mGroupKeyDirty = dirty;
		mNameDirty = dirty;
		mDescriptionDirty = dirty;
		mPriceDirty = dirty;
		mIsComplexDirty = dirty;
		mHasSynonymsDirty = dirty;
		mContainsNutsDirty = dirty;
		mIsSpicyDirty = dirty;
		mIsVegetarianDirty = dirty;
		mQuantityDirty = dirty;
		mSpecialOfferDirty = dirty;
		mSynonymsDirty = dirty;
		mAllDescriptionsDirty = dirty;
		mResultDirty = dirty;
		mStatusDirty = dirty;
		mMenuSortKeyDirty = dirty;
		mDescriptorDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setRestaurantJeid(c.getLong(Indices.RESTAURANT_JEID));
		setMenuJeid(c.getLong(Indices.MENU_JEID));
		setCategoryJeid(c.getLong(Indices.CATEGORY_JEID));
		setProductJeid(c.getLong(Indices.PRODUCT_JEID));
		setGroupKey(c.getString(Indices.GROUP_KEY));
		setName(c.getString(Indices.NAME));
		setDescription(c.getString(Indices.DESCRIPTION));
		setPrice(c.getDouble(Indices.PRICE));
		setIsComplex(c.getInt(Indices.IS_COMPLEX) > 0);
		setHasSynonyms(c.getString(Indices.HAS_SYNONYMS));
		setContainsNuts(c.getString(Indices.CONTAINS_NUTS));
		setIsSpicy(c.getString(Indices.IS_SPICY));
		setIsVegetarian(c.getString(Indices.IS_VEGETARIAN));
		setQuantity(c.getLong(Indices.QUANTITY));
		setSpecialOffer(c.getString(Indices.SPECIAL_OFFER));
		setSynonyms(c.getString(Indices.SYNONYMS));
		setAllDescriptions(c.getString(Indices.ALL_DESCRIPTIONS));
		setResult(c.getLong(Indices.RESULT));
		setStatus(c.getLong(Indices.STATUS));
		setMenuSortKey(c.getString(Indices.MENU_SORT_KEY));
		setDescriptor(c.getLong(Indices.DESCRIPTOR));
	}
	
	public static ProductsInBasketRecord fromCursor(Cursor c) {
	    ProductsInBasketRecord item = new ProductsInBasketRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static ProductsInBasketRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(ProductsInBasketRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static ProductsInBasketRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(ProductsInBasket.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
