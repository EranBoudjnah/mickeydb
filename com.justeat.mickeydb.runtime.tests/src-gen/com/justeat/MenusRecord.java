/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.Menus;
import com.justeat.TakeawaysDBContract.Menus.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class MenusRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<MenusRecord> sFactory = new ActiveRecordFactory<MenusRecord>() {
		@Override
		public MenusRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return Menus.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<MenusRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<MenusRecord> CREATOR 
    	= new Parcelable.Creator<MenusRecord>() {
        public MenusRecord createFromParcel(Parcel in) {
            return new MenusRecord(in);
        }

        public MenusRecord[] newArray(int size) {
            return new MenusRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	Menus._ID,
    	Menus.JEID,
    	Menus.RESTAURANT_JEID,
    	Menus.DESCRIPTION,
    	Menus.SERVICE_TYPE,
    	Menus.MENU_TYPE,
    	Menus.DELIVERY_COST_ABOVE_THRESHOLD,
    	Menus.DELIVERY_COST_BELOW_THRESHOLD,
    	Menus.DELIVERY_THRESHOLD_ORDER_AMOUNT
    };
    
    public interface Indices {
    	int _ID = 0;
    	int JEID = 1;
    	int RESTAURANT_JEID = 2;
    	int DESCRIPTION = 3;
    	int SERVICE_TYPE = 4;
    	int MENU_TYPE = 5;
    	int DELIVERY_COST_ABOVE_THRESHOLD = 6;
    	int DELIVERY_COST_BELOW_THRESHOLD = 7;
    	int DELIVERY_THRESHOLD_ORDER_AMOUNT = 8;
    }
    
    private long mJeid;
    private boolean mJeidDirty;
    private long mRestaurantJeid;
    private boolean mRestaurantJeidDirty;
    private String mDescription;
    private boolean mDescriptionDirty;
    private String mServiceType;
    private boolean mServiceTypeDirty;
    private String mMenuType;
    private boolean mMenuTypeDirty;
    private double mDeliveryCostAboveThreshold;
    private boolean mDeliveryCostAboveThresholdDirty;
    private double mDeliveryCostBelowThreshold;
    private boolean mDeliveryCostBelowThresholdDirty;
    private double mDeliveryThresholdOrderAmount;
    private boolean mDeliveryThresholdOrderAmountDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setJeid(long jeid) {
    	mJeid = jeid;
    	mJeidDirty = true;
    }
    
    public long getJeid() {
    	return mJeid;
    }
    
    public void setRestaurantJeid(long restaurantJeid) {
    	mRestaurantJeid = restaurantJeid;
    	mRestaurantJeidDirty = true;
    }
    
    public long getRestaurantJeid() {
    	return mRestaurantJeid;
    }
    
    public void setDescription(String description) {
    	mDescription = description;
    	mDescriptionDirty = true;
    }
    
    public String getDescription() {
    	return mDescription;
    }
    
    public void setServiceType(String serviceType) {
    	mServiceType = serviceType;
    	mServiceTypeDirty = true;
    }
    
    public String getServiceType() {
    	return mServiceType;
    }
    
    public void setMenuType(String menuType) {
    	mMenuType = menuType;
    	mMenuTypeDirty = true;
    }
    
    public String getMenuType() {
    	return mMenuType;
    }
    
    public void setDeliveryCostAboveThreshold(double deliveryCostAboveThreshold) {
    	mDeliveryCostAboveThreshold = deliveryCostAboveThreshold;
    	mDeliveryCostAboveThresholdDirty = true;
    }
    
    public double getDeliveryCostAboveThreshold() {
    	return mDeliveryCostAboveThreshold;
    }
    
    public void setDeliveryCostBelowThreshold(double deliveryCostBelowThreshold) {
    	mDeliveryCostBelowThreshold = deliveryCostBelowThreshold;
    	mDeliveryCostBelowThresholdDirty = true;
    }
    
    public double getDeliveryCostBelowThreshold() {
    	return mDeliveryCostBelowThreshold;
    }
    
    public void setDeliveryThresholdOrderAmount(double deliveryThresholdOrderAmount) {
    	mDeliveryThresholdOrderAmount = deliveryThresholdOrderAmount;
    	mDeliveryThresholdOrderAmountDirty = true;
    }
    
    public double getDeliveryThresholdOrderAmount() {
    	return mDeliveryThresholdOrderAmount;
    }
    
    
    public MenusRecord() {
    	super(Menus.CONTENT_URI);
	}
	
	private MenusRecord(Parcel in) {
    	super(Menus.CONTENT_URI);
    	
		setId(in.readLong());
		
		mJeid = in.readLong();
		mRestaurantJeid = in.readLong();
		mDescription = in.readString();
		mServiceType = in.readString();
		mMenuType = in.readString();
		mDeliveryCostAboveThreshold = in.readDouble();
		mDeliveryCostBelowThreshold = in.readDouble();
		mDeliveryThresholdOrderAmount = in.readDouble();
		
		boolean[] dirtyFlags = new boolean[8];
		in.readBooleanArray(dirtyFlags);
		mJeidDirty = dirtyFlags[0];
		mRestaurantJeidDirty = dirtyFlags[1];
		mDescriptionDirty = dirtyFlags[2];
		mServiceTypeDirty = dirtyFlags[3];
		mMenuTypeDirty = dirtyFlags[4];
		mDeliveryCostAboveThresholdDirty = dirtyFlags[5];
		mDeliveryCostBelowThresholdDirty = dirtyFlags[6];
		mDeliveryThresholdOrderAmountDirty = dirtyFlags[7];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mJeid);
		dest.writeLong(mRestaurantJeid);
		dest.writeString(mDescription);
		dest.writeString(mServiceType);
		dest.writeString(mMenuType);
		dest.writeDouble(mDeliveryCostAboveThreshold);
		dest.writeDouble(mDeliveryCostBelowThreshold);
		dest.writeDouble(mDeliveryThresholdOrderAmount);
		dest.writeBooleanArray(new boolean[] {
			mJeidDirty,
			mRestaurantJeidDirty,
			mDescriptionDirty,
			mServiceTypeDirty,
			mMenuTypeDirty,
			mDeliveryCostAboveThresholdDirty,
			mDeliveryCostBelowThresholdDirty,
			mDeliveryThresholdOrderAmountDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = Menus.newBuilder();

		if(mJeidDirty) {
			builder.setJeid(mJeid);
		}
		if(mRestaurantJeidDirty) {
			builder.setRestaurantJeid(mRestaurantJeid);
		}
		if(mDescriptionDirty) {
			builder.setDescription(mDescription);
		}
		if(mServiceTypeDirty) {
			builder.setServiceType(mServiceType);
		}
		if(mMenuTypeDirty) {
			builder.setMenuType(mMenuType);
		}
		if(mDeliveryCostAboveThresholdDirty) {
			builder.setDeliveryCostAboveThreshold(mDeliveryCostAboveThreshold);
		}
		if(mDeliveryCostBelowThresholdDirty) {
			builder.setDeliveryCostBelowThreshold(mDeliveryCostBelowThreshold);
		}
		if(mDeliveryThresholdOrderAmountDirty) {
			builder.setDeliveryThresholdOrderAmount(mDeliveryThresholdOrderAmount);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mJeidDirty = dirty;
		mRestaurantJeidDirty = dirty;
		mDescriptionDirty = dirty;
		mServiceTypeDirty = dirty;
		mMenuTypeDirty = dirty;
		mDeliveryCostAboveThresholdDirty = dirty;
		mDeliveryCostBelowThresholdDirty = dirty;
		mDeliveryThresholdOrderAmountDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setJeid(c.getLong(Indices.JEID));
		setRestaurantJeid(c.getLong(Indices.RESTAURANT_JEID));
		setDescription(c.getString(Indices.DESCRIPTION));
		setServiceType(c.getString(Indices.SERVICE_TYPE));
		setMenuType(c.getString(Indices.MENU_TYPE));
		setDeliveryCostAboveThreshold(c.getDouble(Indices.DELIVERY_COST_ABOVE_THRESHOLD));
		setDeliveryCostBelowThreshold(c.getDouble(Indices.DELIVERY_COST_BELOW_THRESHOLD));
		setDeliveryThresholdOrderAmount(c.getDouble(Indices.DELIVERY_THRESHOLD_ORDER_AMOUNT));
	}
	
	public static MenusRecord fromCursor(Cursor c) {
	    MenusRecord item = new MenusRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static MenusRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(MenusRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static MenusRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(Menus.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
