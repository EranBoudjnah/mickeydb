/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.ProductComboOptions;
import com.justeat.TakeawaysDBContract.ProductComboOptions.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class ProductComboOptionsRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<ProductComboOptionsRecord> sFactory = new ActiveRecordFactory<ProductComboOptionsRecord>() {
		@Override
		public ProductComboOptionsRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return ProductComboOptions.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<ProductComboOptionsRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<ProductComboOptionsRecord> CREATOR 
    	= new Parcelable.Creator<ProductComboOptionsRecord>() {
        public ProductComboOptionsRecord createFromParcel(Parcel in) {
            return new ProductComboOptionsRecord(in);
        }

        public ProductComboOptionsRecord[] newArray(int size) {
            return new ProductComboOptionsRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	ProductComboOptions._ID,
    	ProductComboOptions.RESTAURANT_JEID,
    	ProductComboOptions.PRODUCT_JEID,
    	ProductComboOptions.HAS_ACCESSORY,
    	ProductComboOptions.DISPLAY_RANK,
    	ProductComboOptions.CREATED
    };
    
    public interface Indices {
    	int _ID = 0;
    	int RESTAURANT_JEID = 1;
    	int PRODUCT_JEID = 2;
    	int HAS_ACCESSORY = 3;
    	int DISPLAY_RANK = 4;
    	int CREATED = 5;
    }
    
    private long mRestaurantJeid;
    private boolean mRestaurantJeidDirty;
    private long mProductJeid;
    private boolean mProductJeidDirty;
    private boolean mHasAccessory;
    private boolean mHasAccessoryDirty;
    private long mDisplayRank;
    private boolean mDisplayRankDirty;
    private long mCreated;
    private boolean mCreatedDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setRestaurantJeid(long restaurantJeid) {
    	mRestaurantJeid = restaurantJeid;
    	mRestaurantJeidDirty = true;
    }
    
    public long getRestaurantJeid() {
    	return mRestaurantJeid;
    }
    
    public void setProductJeid(long productJeid) {
    	mProductJeid = productJeid;
    	mProductJeidDirty = true;
    }
    
    public long getProductJeid() {
    	return mProductJeid;
    }
    
    public void setHasAccessory(boolean hasAccessory) {
    	mHasAccessory = hasAccessory;
    	mHasAccessoryDirty = true;
    }
    
    public boolean getHasAccessory() {
    	return mHasAccessory;
    }
    
    public void setDisplayRank(long displayRank) {
    	mDisplayRank = displayRank;
    	mDisplayRankDirty = true;
    }
    
    public long getDisplayRank() {
    	return mDisplayRank;
    }
    
    public void setCreated(long created) {
    	mCreated = created;
    	mCreatedDirty = true;
    }
    
    public long getCreated() {
    	return mCreated;
    }
    
    
    public ProductComboOptionsRecord() {
    	super(ProductComboOptions.CONTENT_URI);
	}
	
	private ProductComboOptionsRecord(Parcel in) {
    	super(ProductComboOptions.CONTENT_URI);
    	
		setId(in.readLong());
		
		mRestaurantJeid = in.readLong();
		mProductJeid = in.readLong();
		mHasAccessory = (in.readInt() > 0);
		mDisplayRank = in.readLong();
		mCreated = in.readLong();
		
		boolean[] dirtyFlags = new boolean[5];
		in.readBooleanArray(dirtyFlags);
		mRestaurantJeidDirty = dirtyFlags[0];
		mProductJeidDirty = dirtyFlags[1];
		mHasAccessoryDirty = dirtyFlags[2];
		mDisplayRankDirty = dirtyFlags[3];
		mCreatedDirty = dirtyFlags[4];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mRestaurantJeid);
		dest.writeLong(mProductJeid);
		dest.writeInt(mHasAccessory ? 1 : 0);
		dest.writeLong(mDisplayRank);
		dest.writeLong(mCreated);
		dest.writeBooleanArray(new boolean[] {
			mRestaurantJeidDirty,
			mProductJeidDirty,
			mHasAccessoryDirty,
			mDisplayRankDirty,
			mCreatedDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = ProductComboOptions.newBuilder();

		if(mRestaurantJeidDirty) {
			builder.setRestaurantJeid(mRestaurantJeid);
		}
		if(mProductJeidDirty) {
			builder.setProductJeid(mProductJeid);
		}
		if(mHasAccessoryDirty) {
			builder.setHasAccessory(mHasAccessory);
		}
		if(mDisplayRankDirty) {
			builder.setDisplayRank(mDisplayRank);
		}
		if(mCreatedDirty) {
			builder.setCreated(mCreated);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mRestaurantJeidDirty = dirty;
		mProductJeidDirty = dirty;
		mHasAccessoryDirty = dirty;
		mDisplayRankDirty = dirty;
		mCreatedDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setRestaurantJeid(c.getLong(Indices.RESTAURANT_JEID));
		setProductJeid(c.getLong(Indices.PRODUCT_JEID));
		setHasAccessory(c.getInt(Indices.HAS_ACCESSORY) > 0);
		setDisplayRank(c.getLong(Indices.DISPLAY_RANK));
		setCreated(c.getLong(Indices.CREATED));
	}
	
	public static ProductComboOptionsRecord fromCursor(Cursor c) {
	    ProductComboOptionsRecord item = new ProductComboOptionsRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static ProductComboOptionsRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(ProductComboOptionsRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static ProductComboOptionsRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(ProductComboOptions.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
