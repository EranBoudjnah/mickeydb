/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.RestaurantDeals;
import com.justeat.TakeawaysDBContract.RestaurantDeals.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class RestaurantDealsRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<RestaurantDealsRecord> sFactory = new ActiveRecordFactory<RestaurantDealsRecord>() {
		@Override
		public RestaurantDealsRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return RestaurantDeals.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<RestaurantDealsRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<RestaurantDealsRecord> CREATOR 
    	= new Parcelable.Creator<RestaurantDealsRecord>() {
        public RestaurantDealsRecord createFromParcel(Parcel in) {
            return new RestaurantDealsRecord(in);
        }

        public RestaurantDealsRecord[] newArray(int size) {
            return new RestaurantDealsRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	RestaurantDeals._ID,
    	RestaurantDeals.RESTAURANT_JEID,
    	RestaurantDeals.DISPLAY_TEXT,
    	RestaurantDeals.DEAL_TYPE,
    	RestaurantDeals.DISCOUNT_PERCENT,
    	RestaurantDeals.QUALIFYING_PRICE
    };
    
    public interface Indices {
    	int _ID = 0;
    	int RESTAURANT_JEID = 1;
    	int DISPLAY_TEXT = 2;
    	int DEAL_TYPE = 3;
    	int DISCOUNT_PERCENT = 4;
    	int QUALIFYING_PRICE = 5;
    }
    
    private long mRestaurantJeid;
    private boolean mRestaurantJeidDirty;
    private String mDisplayText;
    private boolean mDisplayTextDirty;
    private String mDealType;
    private boolean mDealTypeDirty;
    private double mDiscountPercent;
    private boolean mDiscountPercentDirty;
    private double mQualifyingPrice;
    private boolean mQualifyingPriceDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setRestaurantJeid(long restaurantJeid) {
    	mRestaurantJeid = restaurantJeid;
    	mRestaurantJeidDirty = true;
    }
    
    public long getRestaurantJeid() {
    	return mRestaurantJeid;
    }
    
    public void setDisplayText(String displayText) {
    	mDisplayText = displayText;
    	mDisplayTextDirty = true;
    }
    
    public String getDisplayText() {
    	return mDisplayText;
    }
    
    public void setDealType(String dealType) {
    	mDealType = dealType;
    	mDealTypeDirty = true;
    }
    
    public String getDealType() {
    	return mDealType;
    }
    
    public void setDiscountPercent(double discountPercent) {
    	mDiscountPercent = discountPercent;
    	mDiscountPercentDirty = true;
    }
    
    public double getDiscountPercent() {
    	return mDiscountPercent;
    }
    
    public void setQualifyingPrice(double qualifyingPrice) {
    	mQualifyingPrice = qualifyingPrice;
    	mQualifyingPriceDirty = true;
    }
    
    public double getQualifyingPrice() {
    	return mQualifyingPrice;
    }
    
    
    public RestaurantDealsRecord() {
    	super(RestaurantDeals.CONTENT_URI);
	}
	
	private RestaurantDealsRecord(Parcel in) {
    	super(RestaurantDeals.CONTENT_URI);
    	
		setId(in.readLong());
		
		mRestaurantJeid = in.readLong();
		mDisplayText = in.readString();
		mDealType = in.readString();
		mDiscountPercent = in.readDouble();
		mQualifyingPrice = in.readDouble();
		
		boolean[] dirtyFlags = new boolean[5];
		in.readBooleanArray(dirtyFlags);
		mRestaurantJeidDirty = dirtyFlags[0];
		mDisplayTextDirty = dirtyFlags[1];
		mDealTypeDirty = dirtyFlags[2];
		mDiscountPercentDirty = dirtyFlags[3];
		mQualifyingPriceDirty = dirtyFlags[4];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mRestaurantJeid);
		dest.writeString(mDisplayText);
		dest.writeString(mDealType);
		dest.writeDouble(mDiscountPercent);
		dest.writeDouble(mQualifyingPrice);
		dest.writeBooleanArray(new boolean[] {
			mRestaurantJeidDirty,
			mDisplayTextDirty,
			mDealTypeDirty,
			mDiscountPercentDirty,
			mQualifyingPriceDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = RestaurantDeals.newBuilder();

		if(mRestaurantJeidDirty) {
			builder.setRestaurantJeid(mRestaurantJeid);
		}
		if(mDisplayTextDirty) {
			builder.setDisplayText(mDisplayText);
		}
		if(mDealTypeDirty) {
			builder.setDealType(mDealType);
		}
		if(mDiscountPercentDirty) {
			builder.setDiscountPercent(mDiscountPercent);
		}
		if(mQualifyingPriceDirty) {
			builder.setQualifyingPrice(mQualifyingPrice);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mRestaurantJeidDirty = dirty;
		mDisplayTextDirty = dirty;
		mDealTypeDirty = dirty;
		mDiscountPercentDirty = dirty;
		mQualifyingPriceDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setRestaurantJeid(c.getLong(Indices.RESTAURANT_JEID));
		setDisplayText(c.getString(Indices.DISPLAY_TEXT));
		setDealType(c.getString(Indices.DEAL_TYPE));
		setDiscountPercent(c.getDouble(Indices.DISCOUNT_PERCENT));
		setQualifyingPrice(c.getDouble(Indices.QUALIFYING_PRICE));
	}
	
	public static RestaurantDealsRecord fromCursor(Cursor c) {
	    RestaurantDealsRecord item = new RestaurantDealsRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static RestaurantDealsRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(RestaurantDealsRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static RestaurantDealsRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(RestaurantDeals.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
