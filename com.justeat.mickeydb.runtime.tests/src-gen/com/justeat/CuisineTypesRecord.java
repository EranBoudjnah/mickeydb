/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.CuisineTypes;
import com.justeat.TakeawaysDBContract.CuisineTypes.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class CuisineTypesRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<CuisineTypesRecord> sFactory = new ActiveRecordFactory<CuisineTypesRecord>() {
		@Override
		public CuisineTypesRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return CuisineTypes.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<CuisineTypesRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<CuisineTypesRecord> CREATOR 
    	= new Parcelable.Creator<CuisineTypesRecord>() {
        public CuisineTypesRecord createFromParcel(Parcel in) {
            return new CuisineTypesRecord(in);
        }

        public CuisineTypesRecord[] newArray(int size) {
            return new CuisineTypesRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	CuisineTypes._ID,
    	CuisineTypes.JEID,
    	CuisineTypes.NAME,
    	CuisineTypes.COUNT
    };
    
    public interface Indices {
    	int _ID = 0;
    	int JEID = 1;
    	int NAME = 2;
    	int COUNT = 3;
    }
    
    private long mJeid;
    private boolean mJeidDirty;
    private String mName;
    private boolean mNameDirty;
    private long mCount;
    private boolean mCountDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setJeid(long jeid) {
    	mJeid = jeid;
    	mJeidDirty = true;
    }
    
    public long getJeid() {
    	return mJeid;
    }
    
    public void setName(String name) {
    	mName = name;
    	mNameDirty = true;
    }
    
    public String getName() {
    	return mName;
    }
    
    public void setCount(long count) {
    	mCount = count;
    	mCountDirty = true;
    }
    
    public long getCount() {
    	return mCount;
    }
    
    
    public CuisineTypesRecord() {
    	super(CuisineTypes.CONTENT_URI);
	}
	
	private CuisineTypesRecord(Parcel in) {
    	super(CuisineTypes.CONTENT_URI);
    	
		setId(in.readLong());
		
		mJeid = in.readLong();
		mName = in.readString();
		mCount = in.readLong();
		
		boolean[] dirtyFlags = new boolean[3];
		in.readBooleanArray(dirtyFlags);
		mJeidDirty = dirtyFlags[0];
		mNameDirty = dirtyFlags[1];
		mCountDirty = dirtyFlags[2];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mJeid);
		dest.writeString(mName);
		dest.writeLong(mCount);
		dest.writeBooleanArray(new boolean[] {
			mJeidDirty,
			mNameDirty,
			mCountDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = CuisineTypes.newBuilder();

		if(mJeidDirty) {
			builder.setJeid(mJeid);
		}
		if(mNameDirty) {
			builder.setName(mName);
		}
		if(mCountDirty) {
			builder.setCount(mCount);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mJeidDirty = dirty;
		mNameDirty = dirty;
		mCountDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setJeid(c.getLong(Indices.JEID));
		setName(c.getString(Indices.NAME));
		setCount(c.getLong(Indices.COUNT));
	}
	
	public static CuisineTypesRecord fromCursor(Cursor c) {
	    CuisineTypesRecord item = new CuisineTypesRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static CuisineTypesRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(CuisineTypesRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static CuisineTypesRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(CuisineTypes.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
