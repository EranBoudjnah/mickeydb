/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.ProductComboOptionChoices;
import com.justeat.TakeawaysDBContract.ProductComboOptionChoices.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class ProductComboOptionChoicesRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<ProductComboOptionChoicesRecord> sFactory = new ActiveRecordFactory<ProductComboOptionChoicesRecord>() {
		@Override
		public ProductComboOptionChoicesRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return ProductComboOptionChoices.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<ProductComboOptionChoicesRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<ProductComboOptionChoicesRecord> CREATOR 
    	= new Parcelable.Creator<ProductComboOptionChoicesRecord>() {
        public ProductComboOptionChoicesRecord createFromParcel(Parcel in) {
            return new ProductComboOptionChoicesRecord(in);
        }

        public ProductComboOptionChoicesRecord[] newArray(int size) {
            return new ProductComboOptionChoicesRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	ProductComboOptionChoices._ID,
    	ProductComboOptionChoices.DISPLAY_RANK,
    	ProductComboOptionChoices.RESTAURANT_JEID,
    	ProductComboOptionChoices.PRODUCT_JEID,
    	ProductComboOptionChoices.OPTION_JEID,
    	ProductComboOptionChoices.NAME,
    	ProductComboOptionChoices.DESCRIPTION,
    	ProductComboOptionChoices.HAS_ACCESSORIES,
    	ProductComboOptionChoices.HAS_REQUIRED_ACCESSORIES,
    	ProductComboOptionChoices.CONTAINS_NUTS,
    	ProductComboOptionChoices.IS_SPICY,
    	ProductComboOptionChoices.IS_VEGETARIAN,
    	ProductComboOptionChoices.CREATED
    };
    
    public interface Indices {
    	int _ID = 0;
    	int DISPLAY_RANK = 1;
    	int RESTAURANT_JEID = 2;
    	int PRODUCT_JEID = 3;
    	int OPTION_JEID = 4;
    	int NAME = 5;
    	int DESCRIPTION = 6;
    	int HAS_ACCESSORIES = 7;
    	int HAS_REQUIRED_ACCESSORIES = 8;
    	int CONTAINS_NUTS = 9;
    	int IS_SPICY = 10;
    	int IS_VEGETARIAN = 11;
    	int CREATED = 12;
    }
    
    private long mDisplayRank;
    private boolean mDisplayRankDirty;
    private long mRestaurantJeid;
    private boolean mRestaurantJeidDirty;
    private long mProductJeid;
    private boolean mProductJeidDirty;
    private long mOptionJeid;
    private boolean mOptionJeidDirty;
    private String mName;
    private boolean mNameDirty;
    private String mDescription;
    private boolean mDescriptionDirty;
    private boolean mHasAccessories;
    private boolean mHasAccessoriesDirty;
    private boolean mHasRequiredAccessories;
    private boolean mHasRequiredAccessoriesDirty;
    private boolean mContainsNuts;
    private boolean mContainsNutsDirty;
    private boolean mIsSpicy;
    private boolean mIsSpicyDirty;
    private boolean mIsVegetarian;
    private boolean mIsVegetarianDirty;
    private long mCreated;
    private boolean mCreatedDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setDisplayRank(long displayRank) {
    	mDisplayRank = displayRank;
    	mDisplayRankDirty = true;
    }
    
    public long getDisplayRank() {
    	return mDisplayRank;
    }
    
    public void setRestaurantJeid(long restaurantJeid) {
    	mRestaurantJeid = restaurantJeid;
    	mRestaurantJeidDirty = true;
    }
    
    public long getRestaurantJeid() {
    	return mRestaurantJeid;
    }
    
    public void setProductJeid(long productJeid) {
    	mProductJeid = productJeid;
    	mProductJeidDirty = true;
    }
    
    public long getProductJeid() {
    	return mProductJeid;
    }
    
    public void setOptionJeid(long optionJeid) {
    	mOptionJeid = optionJeid;
    	mOptionJeidDirty = true;
    }
    
    public long getOptionJeid() {
    	return mOptionJeid;
    }
    
    public void setName(String name) {
    	mName = name;
    	mNameDirty = true;
    }
    
    public String getName() {
    	return mName;
    }
    
    public void setDescription(String description) {
    	mDescription = description;
    	mDescriptionDirty = true;
    }
    
    public String getDescription() {
    	return mDescription;
    }
    
    public void setHasAccessories(boolean hasAccessories) {
    	mHasAccessories = hasAccessories;
    	mHasAccessoriesDirty = true;
    }
    
    public boolean getHasAccessories() {
    	return mHasAccessories;
    }
    
    public void setHasRequiredAccessories(boolean hasRequiredAccessories) {
    	mHasRequiredAccessories = hasRequiredAccessories;
    	mHasRequiredAccessoriesDirty = true;
    }
    
    public boolean getHasRequiredAccessories() {
    	return mHasRequiredAccessories;
    }
    
    public void setContainsNuts(boolean containsNuts) {
    	mContainsNuts = containsNuts;
    	mContainsNutsDirty = true;
    }
    
    public boolean getContainsNuts() {
    	return mContainsNuts;
    }
    
    public void setIsSpicy(boolean isSpicy) {
    	mIsSpicy = isSpicy;
    	mIsSpicyDirty = true;
    }
    
    public boolean getIsSpicy() {
    	return mIsSpicy;
    }
    
    public void setIsVegetarian(boolean isVegetarian) {
    	mIsVegetarian = isVegetarian;
    	mIsVegetarianDirty = true;
    }
    
    public boolean getIsVegetarian() {
    	return mIsVegetarian;
    }
    
    public void setCreated(long created) {
    	mCreated = created;
    	mCreatedDirty = true;
    }
    
    public long getCreated() {
    	return mCreated;
    }
    
    
    public ProductComboOptionChoicesRecord() {
    	super(ProductComboOptionChoices.CONTENT_URI);
	}
	
	private ProductComboOptionChoicesRecord(Parcel in) {
    	super(ProductComboOptionChoices.CONTENT_URI);
    	
		setId(in.readLong());
		
		mDisplayRank = in.readLong();
		mRestaurantJeid = in.readLong();
		mProductJeid = in.readLong();
		mOptionJeid = in.readLong();
		mName = in.readString();
		mDescription = in.readString();
		mHasAccessories = (in.readInt() > 0);
		mHasRequiredAccessories = (in.readInt() > 0);
		mContainsNuts = (in.readInt() > 0);
		mIsSpicy = (in.readInt() > 0);
		mIsVegetarian = (in.readInt() > 0);
		mCreated = in.readLong();
		
		boolean[] dirtyFlags = new boolean[12];
		in.readBooleanArray(dirtyFlags);
		mDisplayRankDirty = dirtyFlags[0];
		mRestaurantJeidDirty = dirtyFlags[1];
		mProductJeidDirty = dirtyFlags[2];
		mOptionJeidDirty = dirtyFlags[3];
		mNameDirty = dirtyFlags[4];
		mDescriptionDirty = dirtyFlags[5];
		mHasAccessoriesDirty = dirtyFlags[6];
		mHasRequiredAccessoriesDirty = dirtyFlags[7];
		mContainsNutsDirty = dirtyFlags[8];
		mIsSpicyDirty = dirtyFlags[9];
		mIsVegetarianDirty = dirtyFlags[10];
		mCreatedDirty = dirtyFlags[11];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mDisplayRank);
		dest.writeLong(mRestaurantJeid);
		dest.writeLong(mProductJeid);
		dest.writeLong(mOptionJeid);
		dest.writeString(mName);
		dest.writeString(mDescription);
		dest.writeInt(mHasAccessories ? 1 : 0);
		dest.writeInt(mHasRequiredAccessories ? 1 : 0);
		dest.writeInt(mContainsNuts ? 1 : 0);
		dest.writeInt(mIsSpicy ? 1 : 0);
		dest.writeInt(mIsVegetarian ? 1 : 0);
		dest.writeLong(mCreated);
		dest.writeBooleanArray(new boolean[] {
			mDisplayRankDirty,
			mRestaurantJeidDirty,
			mProductJeidDirty,
			mOptionJeidDirty,
			mNameDirty,
			mDescriptionDirty,
			mHasAccessoriesDirty,
			mHasRequiredAccessoriesDirty,
			mContainsNutsDirty,
			mIsSpicyDirty,
			mIsVegetarianDirty,
			mCreatedDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = ProductComboOptionChoices.newBuilder();

		if(mDisplayRankDirty) {
			builder.setDisplayRank(mDisplayRank);
		}
		if(mRestaurantJeidDirty) {
			builder.setRestaurantJeid(mRestaurantJeid);
		}
		if(mProductJeidDirty) {
			builder.setProductJeid(mProductJeid);
		}
		if(mOptionJeidDirty) {
			builder.setOptionJeid(mOptionJeid);
		}
		if(mNameDirty) {
			builder.setName(mName);
		}
		if(mDescriptionDirty) {
			builder.setDescription(mDescription);
		}
		if(mHasAccessoriesDirty) {
			builder.setHasAccessories(mHasAccessories);
		}
		if(mHasRequiredAccessoriesDirty) {
			builder.setHasRequiredAccessories(mHasRequiredAccessories);
		}
		if(mContainsNutsDirty) {
			builder.setContainsNuts(mContainsNuts);
		}
		if(mIsSpicyDirty) {
			builder.setIsSpicy(mIsSpicy);
		}
		if(mIsVegetarianDirty) {
			builder.setIsVegetarian(mIsVegetarian);
		}
		if(mCreatedDirty) {
			builder.setCreated(mCreated);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mDisplayRankDirty = dirty;
		mRestaurantJeidDirty = dirty;
		mProductJeidDirty = dirty;
		mOptionJeidDirty = dirty;
		mNameDirty = dirty;
		mDescriptionDirty = dirty;
		mHasAccessoriesDirty = dirty;
		mHasRequiredAccessoriesDirty = dirty;
		mContainsNutsDirty = dirty;
		mIsSpicyDirty = dirty;
		mIsVegetarianDirty = dirty;
		mCreatedDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setDisplayRank(c.getLong(Indices.DISPLAY_RANK));
		setRestaurantJeid(c.getLong(Indices.RESTAURANT_JEID));
		setProductJeid(c.getLong(Indices.PRODUCT_JEID));
		setOptionJeid(c.getLong(Indices.OPTION_JEID));
		setName(c.getString(Indices.NAME));
		setDescription(c.getString(Indices.DESCRIPTION));
		setHasAccessories(c.getInt(Indices.HAS_ACCESSORIES) > 0);
		setHasRequiredAccessories(c.getInt(Indices.HAS_REQUIRED_ACCESSORIES) > 0);
		setContainsNuts(c.getInt(Indices.CONTAINS_NUTS) > 0);
		setIsSpicy(c.getInt(Indices.IS_SPICY) > 0);
		setIsVegetarian(c.getInt(Indices.IS_VEGETARIAN) > 0);
		setCreated(c.getLong(Indices.CREATED));
	}
	
	public static ProductComboOptionChoicesRecord fromCursor(Cursor c) {
	    ProductComboOptionChoicesRecord item = new ProductComboOptionChoicesRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static ProductComboOptionChoicesRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(ProductComboOptionChoicesRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static ProductComboOptionChoicesRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(ProductComboOptionChoices.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
