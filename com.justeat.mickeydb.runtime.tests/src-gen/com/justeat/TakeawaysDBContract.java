/*
 * Generated by MickeyDB
 */
package com.justeat;

import android.net.Uri;
import android.provider.BaseColumns;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;
import java.lang.reflect.Field;			
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Set;
import java.util.Map;

public class TakeawaysDBContract  {
    public static final String CONTENT_AUTHORITY = initAuthority();

	private static String initAuthority() {
		String authority = "com.justeat.takeawaysdb";

		try {
    		
    		ClassLoader loader = TakeawaysDBContract.class.getClassLoader();
    		
			Class<?> clz = loader.loadClass("com.justeat.TakeawaysDBContentProviderAuthority");
			Field declaredField = clz.getDeclaredField("CONTENT_AUTHORITY");
			
			authority = declaredField.get(null).toString();
		} catch (ClassNotFoundException e) {} 
    	catch (NoSuchFieldException e) {} 
    	catch (IllegalArgumentException e) {
		} catch (IllegalAccessException e) {
		}
		
		return authority;
	}
	
    private static final Uri BASE_CONTENT_URI = Uri.parse("content://" + CONTENT_AUTHORITY);

	interface AddressSearchResultColumns {
		String ZIPCODE = "zipcode";
		String CITY = "city";
		String ACCESS_COUNT = "access_count";
		String LAST_TIME_ACCESSED = "last_time_accessed";
	}
	
	interface BasketItemAccessoriesColumns {
		String BASKET_ITEM_ID = "basket_item_id";
		String PRODUCT_JEID = "product_jeid";
		String ACCESSORY_JEID = "accessory_jeid";
		String ACCESSORY_GROUP_JEID = "accessory_group_jeid";
		String ACCESSORY_NAME = "accessory_name";
		String ACCESSORY_REQUIRED = "accessory_required";
		String MEALPART_JEID = "mealpart_jeid";
		String MEALPART_GROUP_JEID = "mealpart_group_jeid";
		String UNIT_PRICE = "unit_price";
		String QUANTITY = "quantity";
	}
	
	interface BasketItemMealpartsColumns {
		String BASKET_ITEM_ID = "basket_item_id";
		String MEALPART_JEID = "mealpart_jeid";
		String MEALPART_NAME = "mealpart_name";
		String MEALPART_GROUP_JEID = "mealpart_group_jeid";
		String HAS_ACCESSORIES = "has_accessories";
		String HAS_REQUIRED_ACCESSORIES = "has_required_accessories";
	}
	
	interface BasketItemsColumns {
		String BASKET_ID = "basket_id";
		String BASKET_ITEM_JEID = "basket_item_jeid";
		String RESTAURANT_JEID = "restaurant_jeid";
		String MENU_JEID = "menu_jeid";
		String CATEGORY_JEID = "category_jeid";
		String PRODUCT_JEID = "product_jeid";
		String IS_COMPLEX = "is_complex";
		String PRODUCT_NAME = "product_name";
		String DESCRIPTION = "description";
		String PRODUCT_PRICE = "product_price";
		String TOTAL_PRICE = "total_price";
		String MENU_SORT_KEY = "menu_sort_key";
		String STATUS = "status";
		String RESULT = "result";
		String IS_TIPS = "is_tips";
		String GROUP_KEY = "group_key";
		String PRODUCT_SYNONYM = "product_synonym";
		String PRODUCT_HAS_ACCESSORIES = "product_has_accessories";
		String PRODUCT_HAS_COMBO_OPTIONS = "product_has_combo_options";
		String USER = "user";
	}
	
	interface BasketTaxesColumns {
		String BASKET_JEID = "basket_jeid";
		String TAX_NAME = "tax_name";
		String TAX_RATE = "tax_rate";
		String TAX_RATE_AMOUNT = "tax_rate_amount";
	}
	
	interface BasketsColumns {
		String RESTAURANT_JEID = "restaurant_jeid";
		String MENU_JEID = "menu_jeid";
		String BASKET_JEID = "basket_jeid";
		String DELIVERY_CHARGE = "delivery_charge";
		String SUB_TOTAL = "sub_total";
		String TO_SPEND = "to_spend";
		String DISCOUNT = "discount";
		String MULTIBUY_DISCOUNT = "multibuy_discount";
		String TOTAL = "total";
		String ORDERABLE = "orderable";
		String USER_PROMPT = "user_prompt";
		String STATUS = "status";
		String RESULT = "result";
		String USER_PROMPT_STATUS = "user_prompt_status";
		String TOTAL_TIPS_AMOUNT = "total_tips_amount";
	}
	
	interface CuisineTypesColumns {
		String JEID = "jeid";
		String NAME = "name";
		String COUNT = "count";
	}
	
	interface MenusColumns {
		String JEID = "jeid";
		String RESTAURANT_JEID = "restaurant_jeid";
		String DESCRIPTION = "description";
		String SERVICE_TYPE = "service_type";
		String MENU_TYPE = "menu_type";
		String DELIVERY_COST_ABOVE_THRESHOLD = "delivery_cost_above_threshold";
		String DELIVERY_COST_BELOW_THRESHOLD = "delivery_cost_below_threshold";
		String DELIVERY_THRESHOLD_ORDER_AMOUNT = "delivery_threshold_order_amount";
	}
	
	interface OrderHistoryItemAccessoriesColumns {
		String BASKET_JEID = "basket_jeid";
		String BASKET_ITEM_JEID = "basket_item_jeid";
		String PRODUCT_JEID = "product_jeid";
		String ACCESSORY_JEID = "accessory_jeid";
		String ACCESSORY_GROUP_JEID = "accessory_group_jeid";
		String ACCESSORY_NAME = "accessory_name";
		String ACCESSORY_REQUIRED = "accessory_required";
		String MEALPART_JEID = "mealpart_jeid";
		String MEALPART_GROUP_JEID = "mealpart_group_jeid";
		String UNIT_PRICE = "unit_price";
		String QUANTITY = "quantity";
	}
	
	interface OrderHistoryItemMealpartsColumns {
		String BASKET_JEID = "basket_jeid";
		String BASKET_ITEM_JEID = "basket_item_jeid";
		String MEALPART_JEID = "mealpart_jeid";
		String MEALPART_NAME = "mealpart_name";
		String MEALPART_GROUP_JEID = "mealpart_group_jeid";
		String HAS_ACCESSORIES = "has_accessories";
		String HAS_REQUIRED_ACCESSORIES = "has_required_accessories";
	}
	
	interface OrderHistoryItemsColumns {
		String BASKET_JEID = "basket_jeid";
		String BASKET_ITEM_JEID = "basket_item_jeid";
		String RESTAURANT_JEID = "restaurant_jeid";
		String MENU_JEID = "menu_jeid";
		String CATEGORY_JEID = "category_jeid";
		String PRODUCT_JEID = "product_jeid";
		String IS_COMPLEX = "is_complex";
		String PRODUCT_NAME = "product_name";
		String PRODUCT_SYNONYM = "product_synonym";
		String PRODUCT_HAS_ACCESSORIES = "product_has_accessories";
		String PRODUCT_HAS_COMBO_OPTIONS = "product_has_combo_options";
		String DESCRIPTION = "description";
		String PRODUCT_PRICE = "product_price";
		String TOTAL_PRICE = "total_price";
		String IS_TIPS = "is_tips";
		String MENU_SORT_KEY = "menu_sort_key";
		String GROUP_KEY = "group_key";
		String USER = "user";
	}
	
	interface OrdersColumns {
		String RESTAURANT_JEID = "restaurant_jeid";
		String RESTAURANT_NAME = "restaurant_name";
		String RESTAURANT_ADDRESS = "restaurant_address";
		String RESTAURANT_CITY = "restaurant_city";
		String RESTAURANT_POSTCODE = "restaurant_postcode";
		String RESTAURANT_LOGO_STANDARD_RES_URL = "restaurant_logo_standard_res_url";
		String MENU_JEID = "menu_jeid";
		String IS_DELIVERY = "is_delivery";
		String BASKET_JEID = "basket_jeid";
		String ORDER_NUMBER = "order_number";
		String ESTIMATED_DELIVERY_TIME = "estimated_delivery_time";
		String TOTAL = "total";
		String CREATED = "created";
		String QUANTITY = "quantity";
		String RESTAURANT_PHONE = "restaurant_phone";
		String DELIVERY_CHARGE = "delivery_charge";
		String SUB_TOTAL = "sub_total";
		String DISCOUNT = "discount";
		String MULTIBUY_DISCOUNT = "multibuy_discount";
		String ORDER_ID = "order_id";
		String ORDER_STATUS = "order_status";
		String DELIVERY_ADDRESS = "delivery_address";
		String DELIVERY_CITY = "delivery_city";
		String DELIVERY_POSTCODE = "delivery_postcode";
		String INITIAL_ESTIMATED_DELIVERY_TIME = "initial_estimated_delivery_time";
		String PLACED_DATE = "placed_date";
		String PAYMENT_IS_CARD = "payment_is_card";
		String PAYMENT_CARD_TYPE = "payment_card_type";
		String PAYMENT_CARD_DIGITS = "payment_card_digits";
		String PAYMENT_CARD_CHARGE = "payment_card_charge";
		String ESTIMATED_DELIVERY_DATE = "estimated_delivery_date";
		String IS_RESTAURANT_OPEN_NOW = "is_restaurant_open_now";
		String IS_RESTAURANT_OFFLINE = "is_restaurant_offline";
		String IS_RESTAURANT_NEW = "is_restaurant_new";
		String RESTAURANT_SEO_NAME = "restaurant_seo_name";
		String RESTAURANT_DESCRIPTION = "restaurant_description";
		String IS_REORDABLE = "is_reordable";
		String TOTAL_COMPLEMENTARY = "total_complementary";
	}
	
	interface PaymentLinesColumns {
		String ORDER_ID = "order_id";
		String ITEM_ID = "item_id";
		String TYPE = "type";
		String VALUE = "value";
		String CARD_TYPE = "card_type";
		String CARD_DIGITS = "card_digits";
	}
	
	interface ProductAccessoriesColumns {
		String JEID = "jeid";
		String RESTAURANT_JEID = "restaurant_jeid";
		String PRODUCT_JEID = "product_jeid";
		String NAME = "name";
		String REQUIRED = "required";
		String PRICE = "price";
		String SELECTION_ID = "selection_id";
		String CREATED = "created";
	}
	
	interface ProductCategoriesColumns {
		String JEID = "jeid";
		String RESTAURANT_JEID = "restaurant_jeid";
		String MENU_JEID = "menu_jeid";
		String NAME = "name";
		String DESCRIPTION = "description";
		String SPECIAL_OFFER = "special_offer";
		String SORT_KEY = "sort_key";
	}
	
	interface ProductComboOptionChoicesColumns {
		String DISPLAY_RANK = "display_rank";
		String RESTAURANT_JEID = "restaurant_jeid";
		String PRODUCT_JEID = "product_jeid";
		String OPTION_JEID = "option_jeid";
		String NAME = "name";
		String DESCRIPTION = "description";
		String HAS_ACCESSORIES = "has_accessories";
		String HAS_REQUIRED_ACCESSORIES = "has_required_accessories";
		String CONTAINS_NUTS = "contains_nuts";
		String IS_SPICY = "is_spicy";
		String IS_VEGETARIAN = "is_vegetarian";
		String CREATED = "created";
	}
	
	interface ProductComboOptionsColumns {
		String RESTAURANT_JEID = "restaurant_jeid";
		String PRODUCT_JEID = "product_jeid";
		String HAS_ACCESSORY = "has_accessory";
		String DISPLAY_RANK = "display_rank";
		String CREATED = "created";
	}
	
	interface ProductsColumns {
		String JEID = "jeid";
		String RESTAURANT_JEID = "restaurant_jeid";
		String MENU_JEID = "menu_jeid";
		String CATEGORY_JEID = "category_jeid";
		String NAME = "name";
		String SYNONYM = "synonym";
		String DESCRIPTION = "description";
		String PRICE = "price";
		String QUANTITY_IN_BASKET = "quantity_in_basket";
		String HAS_ACCESSORIES = "has_accessories";
		String HAS_COMBO_OPTIONS = "has_combo_options";
		String HAS_REQUIRED_ACCESSORIES = "has_required_accessories";
		String CONTAINS_NUTS = "contains_nuts";
		String IS_SPICY = "is_spicy";
		String IS_VEGETARIAN = "is_vegetarian";
		String IS_COMPLEX = "is_complex";
		String IS_SYNONYM = "is_synonym";
		String MENU_NUMBER = "menu_number";
		String MENU_NUMBER_CODE = "menu_number_code";
		String GROUP_KEY = "group_key";
		String MENU_SORT_KEY = "menu_sort_key";
		String CREATED = "created";
		String IS_TIPS = "is_tips";
	}
	
	interface RecentlyViewedRestaurantsColumns {
		String RESTAURANT_JEID = "restaurant_jeid";
		String LAST_ACCESSED = "last_accessed";
		String QUERY = "query";
	}
	
	interface RestaurantDealsColumns {
		String RESTAURANT_JEID = "restaurant_jeid";
		String DISPLAY_TEXT = "display_text";
		String DEAL_TYPE = "deal_type";
		String DISCOUNT_PERCENT = "discount_percent";
		String QUALIFYING_PRICE = "qualifying_price";
	}
	
	interface RestaurantOpeningTimesColumns {
		String RESTAURANT_JEID = "restaurant_jeid";
		String DAY = "day";
		String DAY_TEXT = "day_text";
		String OPEN = "open";
		String CLOSED = "closed";
		String RANK = "rank";
	}
	
	interface RestaurantsColumns {
		String JEID = "jeid";
		String NAME = "name";
		String ADDRESS = "address";
		String CITY = "city";
		String POSTCODE = "postcode";
		String SEARCH_QUERY = "search_query";
		String CUISINES = "cuisines";
		String DEALS = "deals";
		String DEFAULT_DISPLAY_RANK = "default_display_rank";
		String IS_HALAL = "is_halal";
		String IS_NEW = "is_new";
		String IS_OPEN_NOW_FOR_DELIVERY = "is_open_now_for_delivery";
		String IS_OPEN_NOW_FOR_COLLECTION = "is_open_now_for_collection";
		String IS_OPEN_NOW = "is_open_now";
		String IS_SPONSORED = "is_sponsored";
		String IS_TEMPORARILY_OFFLINE = "is_temporarily_offline";
		String LOGO_STANDARD_RES_URL = "logo_standard_res_url";
		String RATING = "rating";
		String REASON_WHY_TEMPORARILY_OFFLINE = "reason_why_temporarily_offline";
		String NUM_RATINGS = "num_ratings";
		String DESCRIPTION = "description";
		String LATITUDE = "latitude";
		String LONGITUDE = "longitude";
		String OPENING_TIME = "opening_time";
		String UNIQUE_NAME = "unique_name";
		String DRIVE_DISTANCE = "drive_distance";
		String RATING_AVERAGE = "rating_average";
		String SHOW_SMILEY = "show_smiley";
		String SMILEY_DATE = "smiley_date";
		String SMILEY_RESULT = "smiley_result";
		String SMILEY_ELITE = "smiley_elite";
		String SMILEY_URL = "smiley_url";
		String DEAL_DISPLAY_RANK = "deal_display_rank";
		String HAS_DEALS = "has_deals";
		String MAX_DISCOUNT_PERCENT = "max_discount_percent";
	}
	
	interface ReviewsColumns {
		String RESTAURANT_ID = "restaurant_id";
		String USER_ID = "user_id";
		String CUSTOMER_CITY = "customer_city";
		String CUSTOMER_COMMENTS = "customer_comments";
		String CUSTOMER_NAME = "customer_name";
		String RATE_DATE = "rate_date";
		String RATING_AVERAGE = "rating_average";
		String RATING_AVERAGE_STARS = "rating_average_stars";
		String RESTAURANT_COMMENTS = "restaurant_comments";
	}
	
	interface SysEventsColumns {
		String SESSION_ID = "session_id";
		String EVENT_TYPE = "event_type";
		String CONTENT = "content";
		String TIMESTAMP = "timestamp";
	}
	
	interface UserDetailsColumns {
		String TRACKING_ID = "tracking_id";
		String CREATED_DATE = "created_date";
		String EMAIL = "email";
		String FIRST_NAME = "first_name";
		String LAST_NAME = "last_name";
		String PHONE_NUMBER = "phone_number";
		String DATE_OF_BIRTH = "date_of_birth";
		String TERMS_ID = "terms_id";
		String WANTS_NEWSLETTER = "wants_newsletter";
	}
	
	interface OrderHistorySummaryColumns {
		String BASKET_JEID = "basket_jeid";
		String PRODUCT_JEID = "product_jeid";
		String ITEM_NAME = "item_name";
		String UNIT_PRICE = "unit_price";
		String QUANTITY = "quantity";
		String SORT_KEY = "sort_key";
		String DESCRIPTOR = "descriptor";
	}
	
	interface OrderSummaryColumns {
		String PRODUCT_JEID = "product_jeid";
		String ITEM_NAME = "item_name";
		String UNIT_PRICE = "unit_price";
		String QUANTITY = "quantity";
		String SORT_KEY = "sort_key";
		String DESCRIPTOR = "descriptor";
		String IS_TIPS = "is_tips";
		String RESULT = "result";
	}
	
	interface ProductAccessoryTypesColumns {
		String RESTAURANT_JEID = "restaurant_jeid";
		String PRODUCT_JEID = "product_jeid";
		String REQUIRED = "required";
		String SELECTION_ID = "selection_id";
	}
	
	interface ProductCategoriesWithCountColumns {
		String JEID = "jeid";
		String RESTAURANT_JEID = "restaurant_jeid";
		String MENU_JEID = "menu_jeid";
		String NAME = "name";
		String SPECIAL_OFFER = "special_offer";
		String DESCRIPTION = "description";
		String QUANTITY_IN_BASKET = "quantity_in_basket";
		String SORT_KEY = "sort_key";
	}
	
	interface ProductsInBasketColumns {
		String RESTAURANT_JEID = "restaurant_jeid";
		String MENU_JEID = "menu_jeid";
		String CATEGORY_JEID = "category_jeid";
		String PRODUCT_JEID = "product_jeid";
		String GROUP_KEY = "group_key";
		String NAME = "name";
		String DESCRIPTION = "description";
		String PRICE = "price";
		String IS_COMPLEX = "is_complex";
		String HAS_SYNONYMS = "has_synonyms";
		String CONTAINS_NUTS = "contains_nuts";
		String IS_SPICY = "is_spicy";
		String IS_VEGETARIAN = "is_vegetarian";
		String QUANTITY = "quantity";
		String SPECIAL_OFFER = "special_offer";
		String SYNONYMS = "synonyms";
		String ALL_DESCRIPTIONS = "all_descriptions";
		String RESULT = "result";
		String STATUS = "status";
		String MENU_SORT_KEY = "menu_sort_key";
		String DESCRIPTOR = "descriptor";
	}
	
	interface ProductsInCategoriesColumns {
		String RESTAURANT_JEID = "restaurant_jeid";
		String MENU_JEID = "menu_jeid";
		String CATEGORY_JEID = "category_jeid";
		String PRODUCT_JEID = "product_jeid";
		String GROUP_KEY = "group_key";
		String NAME = "name";
		String DESCRIPTION = "description";
		String PRICE = "price";
		String IS_COMPLEX = "is_complex";
		String HAS_SYNONYMS = "has_synonyms";
		String CONTAINS_NUTS = "contains_nuts";
		String IS_SPICY = "is_spicy";
		String IS_VEGETARIAN = "is_vegetarian";
		String QUANTITY = "quantity";
		String SORT_KEY = "sort_key";
		String DESCRIPTOR = "descriptor";
	}
	
	interface RestaurantsAndBasketColumns {
		String JEID = "jeid";
		String NAME = "name";
		String UNIQUE_NAME = "unique_name";
		String DESCRIPTION = "description";
		String ADDRESS = "address";
		String CITY = "city";
		String POSTCODE = "postcode";
		String LATITUDE = "latitude";
		String LONGITUDE = "longitude";
		String LOGO_STANDARD_RES_URL = "logo_standard_res_url";
		String CUISINES = "cuisines";
		String DEALS = "deals";
		String MAX_DISCOUNT = "max_discount";
		String DEFAULT_DISPLAY_RANK = "default_display_rank";
		String DRIVE_DISTANCE = "drive_distance";
		String IS_HALAL = "is_halal";
		String IS_NEW = "is_new";
		String IS_OPEN_NOW = "is_open_now";
		String IS_OPEN_NOW_FOR_COLLECTION = "is_open_now_for_collection";
		String IS_OPEN_NOW_FOR_DELIVERY = "is_open_now_for_delivery";
		String IS_SPONSORED = "is_sponsored";
		String IS_TEMPORARILY_OFFLINE = "is_temporarily_offline";
		String RATING = "rating";
		String NUM_RATINGS = "num_ratings";
		String OPENING_TIME = "opening_time";
		String REASON_WHY_TEMPORARILY_OFFLINE = "reason_why_temporarily_offline";
		String SEARCH_QUERY = "search_query";
		String HAS_DEALS = "has_deals";
		String DEAL_DISPLAY_RANK = "deal_display_rank";
		String BASKET_ID = "basket_id";
		String BASKET_JEID = "basket_jeid";
		String BASKET_TOTAL = "basket_total";
		String BASKET_SUB_TOTAL = "basket_sub_total";
		String BASKET_DISCOUNT = "basket_discount";
		String BASKET_MULTIBUY_DISCOUNT = "basket_multibuy_discount";
		String BASKET_DELIVERY_CHARGE = "basket_delivery_charge";
		String BASKET_ORDERABLE = "basket_orderable";
		String BASKET_ITEM_COUNT = "basket_item_count";
		String RECENTLY_VIEWED_ID = "recently_viewed_id";
		String RECENTLY_VIEWED_LAST_ACCESSED = "recently_viewed_last_accessed";
		String RECENTLY_VIEWED_QUERY = "recently_viewed_query";
	}
	
			
	/**
	 * <p>Column definitions and helper methods to work with the AddressSearchResult.</p>
	 */
	public static class AddressSearchResult implements AddressSearchResultColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("address_search_result").build();
	
		/**
		 * <p>The content type for a cursor that contains many AddressSearchResult rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.address_search_result";
	
		/**
		 * <p>The content type for a cursor that contains a single AddressSearchResult row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.address_search_result";
	
		/**
		 * <p>Builds a Uri with appended id for a row in AddressSearchResult, 
		 * eg:- content://com.justeat.takeawaysdb/address_search_result/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(AddressSearchResult.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(AddressSearchResult.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for AddressSearchResult</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for AddressSearchResult.</p>
		 *
		 * <p>Use {@link AddressSearchResult#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), AddressSearchResult.CONTENT_URI);
			}
			
			public Builder setZipcode(String value) {
				mValues.put(AddressSearchResult.ZIPCODE, value);
				return this;
			}
			public Builder setCity(String value) {
				mValues.put(AddressSearchResult.CITY, value);
				return this;
			}
			public Builder setAccessCount(long value) {
				mValues.put(AddressSearchResult.ACCESS_COUNT, value);
				return this;
			}
			public Builder setLastTimeAccessed(long value) {
				mValues.put(AddressSearchResult.LAST_TIME_ACCESSED, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the BasketItemAccessories.</p>
	 */
	public static class BasketItemAccessories implements BasketItemAccessoriesColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("basket_item_accessories").build();
	
		/**
		 * <p>The content type for a cursor that contains many BasketItemAccessories rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.basket_item_accessories";
	
		/**
		 * <p>The content type for a cursor that contains a single BasketItemAccessories row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.basket_item_accessories";
	
		/**
		 * <p>Builds a Uri with appended id for a row in BasketItemAccessories, 
		 * eg:- content://com.justeat.takeawaysdb/basket_item_accessories/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(BasketItemAccessories.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(BasketItemAccessories.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for BasketItemAccessories</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for BasketItemAccessories.</p>
		 *
		 * <p>Use {@link BasketItemAccessories#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), BasketItemAccessories.CONTENT_URI);
			}
			
			public Builder setBasketItemId(long value) {
				mValues.put(BasketItemAccessories.BASKET_ITEM_ID, value);
				return this;
			}
			public Builder setProductJeid(long value) {
				mValues.put(BasketItemAccessories.PRODUCT_JEID, value);
				return this;
			}
			public Builder setAccessoryJeid(long value) {
				mValues.put(BasketItemAccessories.ACCESSORY_JEID, value);
				return this;
			}
			public Builder setAccessoryGroupJeid(long value) {
				mValues.put(BasketItemAccessories.ACCESSORY_GROUP_JEID, value);
				return this;
			}
			public Builder setAccessoryName(String value) {
				mValues.put(BasketItemAccessories.ACCESSORY_NAME, value);
				return this;
			}
			public Builder setAccessoryRequired(long value) {
				mValues.put(BasketItemAccessories.ACCESSORY_REQUIRED, value);
				return this;
			}
			public Builder setMealpartJeid(long value) {
				mValues.put(BasketItemAccessories.MEALPART_JEID, value);
				return this;
			}
			public Builder setMealpartGroupJeid(long value) {
				mValues.put(BasketItemAccessories.MEALPART_GROUP_JEID, value);
				return this;
			}
			public Builder setUnitPrice(double value) {
				mValues.put(BasketItemAccessories.UNIT_PRICE, value);
				return this;
			}
			public Builder setQuantity(long value) {
				mValues.put(BasketItemAccessories.QUANTITY, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			viewUris.add(OrderSummary.CONTENT_URI);
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the BasketItemMealparts.</p>
	 */
	public static class BasketItemMealparts implements BasketItemMealpartsColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("basket_item_mealparts").build();
	
		/**
		 * <p>The content type for a cursor that contains many BasketItemMealparts rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.basket_item_mealparts";
	
		/**
		 * <p>The content type for a cursor that contains a single BasketItemMealparts row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.basket_item_mealparts";
	
		/**
		 * <p>Builds a Uri with appended id for a row in BasketItemMealparts, 
		 * eg:- content://com.justeat.takeawaysdb/basket_item_mealparts/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(BasketItemMealparts.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(BasketItemMealparts.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for BasketItemMealparts</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for BasketItemMealparts.</p>
		 *
		 * <p>Use {@link BasketItemMealparts#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), BasketItemMealparts.CONTENT_URI);
			}
			
			public Builder setBasketItemId(long value) {
				mValues.put(BasketItemMealparts.BASKET_ITEM_ID, value);
				return this;
			}
			public Builder setMealpartJeid(long value) {
				mValues.put(BasketItemMealparts.MEALPART_JEID, value);
				return this;
			}
			public Builder setMealpartName(String value) {
				mValues.put(BasketItemMealparts.MEALPART_NAME, value);
				return this;
			}
			public Builder setMealpartGroupJeid(long value) {
				mValues.put(BasketItemMealparts.MEALPART_GROUP_JEID, value);
				return this;
			}
			public Builder setHasAccessories(boolean value) {
				mValues.put(BasketItemMealparts.HAS_ACCESSORIES, value);
				return this;
			}
			public Builder setHasRequiredAccessories(boolean value) {
				mValues.put(BasketItemMealparts.HAS_REQUIRED_ACCESSORIES, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			viewUris.add(OrderSummary.CONTENT_URI);
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the BasketItems.</p>
	 */
	public static class BasketItems implements BasketItemsColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("basket_items").build();
	
		/**
		 * <p>The content type for a cursor that contains many BasketItems rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.basket_items";
	
		/**
		 * <p>The content type for a cursor that contains a single BasketItems row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.basket_items";
	
		/**
		 * <p>Builds a Uri with appended id for a row in BasketItems, 
		 * eg:- content://com.justeat.takeawaysdb/basket_items/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(BasketItems.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(BasketItems.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for BasketItems</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for BasketItems.</p>
		 *
		 * <p>Use {@link BasketItems#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), BasketItems.CONTENT_URI);
			}
			
			public Builder setBasketId(long value) {
				mValues.put(BasketItems.BASKET_ID, value);
				return this;
			}
			public Builder setBasketItemJeid(String value) {
				mValues.put(BasketItems.BASKET_ITEM_JEID, value);
				return this;
			}
			public Builder setRestaurantJeid(long value) {
				mValues.put(BasketItems.RESTAURANT_JEID, value);
				return this;
			}
			public Builder setMenuJeid(long value) {
				mValues.put(BasketItems.MENU_JEID, value);
				return this;
			}
			public Builder setCategoryJeid(long value) {
				mValues.put(BasketItems.CATEGORY_JEID, value);
				return this;
			}
			public Builder setProductJeid(long value) {
				mValues.put(BasketItems.PRODUCT_JEID, value);
				return this;
			}
			public Builder setIsComplex(boolean value) {
				mValues.put(BasketItems.IS_COMPLEX, value);
				return this;
			}
			public Builder setProductName(String value) {
				mValues.put(BasketItems.PRODUCT_NAME, value);
				return this;
			}
			public Builder setDescription(String value) {
				mValues.put(BasketItems.DESCRIPTION, value);
				return this;
			}
			public Builder setProductPrice(double value) {
				mValues.put(BasketItems.PRODUCT_PRICE, value);
				return this;
			}
			public Builder setTotalPrice(double value) {
				mValues.put(BasketItems.TOTAL_PRICE, value);
				return this;
			}
			public Builder setMenuSortKey(String value) {
				mValues.put(BasketItems.MENU_SORT_KEY, value);
				return this;
			}
			public Builder setStatus(long value) {
				mValues.put(BasketItems.STATUS, value);
				return this;
			}
			public Builder setResult(long value) {
				mValues.put(BasketItems.RESULT, value);
				return this;
			}
			public Builder setIsTips(boolean value) {
				mValues.put(BasketItems.IS_TIPS, value);
				return this;
			}
			public Builder setGroupKey(String value) {
				mValues.put(BasketItems.GROUP_KEY, value);
				return this;
			}
			public Builder setProductSynonym(String value) {
				mValues.put(BasketItems.PRODUCT_SYNONYM, value);
				return this;
			}
			public Builder setProductHasAccessories(boolean value) {
				mValues.put(BasketItems.PRODUCT_HAS_ACCESSORIES, value);
				return this;
			}
			public Builder setProductHasComboOptions(boolean value) {
				mValues.put(BasketItems.PRODUCT_HAS_COMBO_OPTIONS, value);
				return this;
			}
			public Builder setUser(String value) {
				mValues.put(BasketItems.USER, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			viewUris.add(OrderSummary.CONTENT_URI);
			viewUris.add(ProductCategoriesWithCount.CONTENT_URI);
			viewUris.add(ProductsInBasket.CONTENT_URI);
			viewUris.add(RestaurantsAndBasket.CONTENT_URI);
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the BasketTaxes.</p>
	 */
	public static class BasketTaxes implements BasketTaxesColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("basket_taxes").build();
	
		/**
		 * <p>The content type for a cursor that contains many BasketTaxes rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.basket_taxes";
	
		/**
		 * <p>The content type for a cursor that contains a single BasketTaxes row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.basket_taxes";
	
		/**
		 * <p>Builds a Uri with appended id for a row in BasketTaxes, 
		 * eg:- content://com.justeat.takeawaysdb/basket_taxes/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(BasketTaxes.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(BasketTaxes.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for BasketTaxes</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for BasketTaxes.</p>
		 *
		 * <p>Use {@link BasketTaxes#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), BasketTaxes.CONTENT_URI);
			}
			
			public Builder setBasketJeid(String value) {
				mValues.put(BasketTaxes.BASKET_JEID, value);
				return this;
			}
			public Builder setTaxName(String value) {
				mValues.put(BasketTaxes.TAX_NAME, value);
				return this;
			}
			public Builder setTaxRate(double value) {
				mValues.put(BasketTaxes.TAX_RATE, value);
				return this;
			}
			public Builder setTaxRateAmount(double value) {
				mValues.put(BasketTaxes.TAX_RATE_AMOUNT, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the Baskets.</p>
	 */
	public static class Baskets implements BasketsColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("baskets").build();
	
		/**
		 * <p>The content type for a cursor that contains many Baskets rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.baskets";
	
		/**
		 * <p>The content type for a cursor that contains a single Baskets row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.baskets";
	
		/**
		 * <p>Builds a Uri with appended id for a row in Baskets, 
		 * eg:- content://com.justeat.takeawaysdb/baskets/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(Baskets.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(Baskets.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for Baskets</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for Baskets.</p>
		 *
		 * <p>Use {@link Baskets#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), Baskets.CONTENT_URI);
			}
			
			public Builder setRestaurantJeid(long value) {
				mValues.put(Baskets.RESTAURANT_JEID, value);
				return this;
			}
			public Builder setMenuJeid(long value) {
				mValues.put(Baskets.MENU_JEID, value);
				return this;
			}
			public Builder setBasketJeid(String value) {
				mValues.put(Baskets.BASKET_JEID, value);
				return this;
			}
			public Builder setDeliveryCharge(double value) {
				mValues.put(Baskets.DELIVERY_CHARGE, value);
				return this;
			}
			public Builder setSubTotal(double value) {
				mValues.put(Baskets.SUB_TOTAL, value);
				return this;
			}
			public Builder setToSpend(double value) {
				mValues.put(Baskets.TO_SPEND, value);
				return this;
			}
			public Builder setDiscount(double value) {
				mValues.put(Baskets.DISCOUNT, value);
				return this;
			}
			public Builder setMultibuyDiscount(double value) {
				mValues.put(Baskets.MULTIBUY_DISCOUNT, value);
				return this;
			}
			public Builder setTotal(double value) {
				mValues.put(Baskets.TOTAL, value);
				return this;
			}
			public Builder setOrderable(boolean value) {
				mValues.put(Baskets.ORDERABLE, value);
				return this;
			}
			public Builder setUserPrompt(String value) {
				mValues.put(Baskets.USER_PROMPT, value);
				return this;
			}
			public Builder setStatus(long value) {
				mValues.put(Baskets.STATUS, value);
				return this;
			}
			public Builder setResult(long value) {
				mValues.put(Baskets.RESULT, value);
				return this;
			}
			public Builder setUserPromptStatus(String value) {
				mValues.put(Baskets.USER_PROMPT_STATUS, value);
				return this;
			}
			public Builder setTotalTipsAmount(double value) {
				mValues.put(Baskets.TOTAL_TIPS_AMOUNT, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			viewUris.add(RestaurantsAndBasket.CONTENT_URI);
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the CuisineTypes.</p>
	 */
	public static class CuisineTypes implements CuisineTypesColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("cuisine_types").build();
	
		/**
		 * <p>The content type for a cursor that contains many CuisineTypes rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.cuisine_types";
	
		/**
		 * <p>The content type for a cursor that contains a single CuisineTypes row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.cuisine_types";
	
		/**
		 * <p>Builds a Uri with appended id for a row in CuisineTypes, 
		 * eg:- content://com.justeat.takeawaysdb/cuisine_types/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(CuisineTypes.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(CuisineTypes.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for CuisineTypes</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for CuisineTypes.</p>
		 *
		 * <p>Use {@link CuisineTypes#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), CuisineTypes.CONTENT_URI);
			}
			
			public Builder setJeid(long value) {
				mValues.put(CuisineTypes.JEID, value);
				return this;
			}
			public Builder setName(String value) {
				mValues.put(CuisineTypes.NAME, value);
				return this;
			}
			public Builder setCount(long value) {
				mValues.put(CuisineTypes.COUNT, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the Menus.</p>
	 */
	public static class Menus implements MenusColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("menus").build();
	
		/**
		 * <p>The content type for a cursor that contains many Menus rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.menus";
	
		/**
		 * <p>The content type for a cursor that contains a single Menus row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.menus";
	
		/**
		 * <p>Builds a Uri with appended id for a row in Menus, 
		 * eg:- content://com.justeat.takeawaysdb/menus/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(Menus.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(Menus.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for Menus</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for Menus.</p>
		 *
		 * <p>Use {@link Menus#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), Menus.CONTENT_URI);
			}
			
			public Builder setJeid(long value) {
				mValues.put(Menus.JEID, value);
				return this;
			}
			public Builder setRestaurantJeid(long value) {
				mValues.put(Menus.RESTAURANT_JEID, value);
				return this;
			}
			public Builder setDescription(String value) {
				mValues.put(Menus.DESCRIPTION, value);
				return this;
			}
			public Builder setServiceType(String value) {
				mValues.put(Menus.SERVICE_TYPE, value);
				return this;
			}
			public Builder setMenuType(String value) {
				mValues.put(Menus.MENU_TYPE, value);
				return this;
			}
			public Builder setDeliveryCostAboveThreshold(double value) {
				mValues.put(Menus.DELIVERY_COST_ABOVE_THRESHOLD, value);
				return this;
			}
			public Builder setDeliveryCostBelowThreshold(double value) {
				mValues.put(Menus.DELIVERY_COST_BELOW_THRESHOLD, value);
				return this;
			}
			public Builder setDeliveryThresholdOrderAmount(double value) {
				mValues.put(Menus.DELIVERY_THRESHOLD_ORDER_AMOUNT, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the OrderHistoryItemAccessories.</p>
	 */
	public static class OrderHistoryItemAccessories implements OrderHistoryItemAccessoriesColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("order_history_item_accessories").build();
	
		/**
		 * <p>The content type for a cursor that contains many OrderHistoryItemAccessories rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.order_history_item_accessories";
	
		/**
		 * <p>The content type for a cursor that contains a single OrderHistoryItemAccessories row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.order_history_item_accessories";
	
		/**
		 * <p>Builds a Uri with appended id for a row in OrderHistoryItemAccessories, 
		 * eg:- content://com.justeat.takeawaysdb/order_history_item_accessories/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(OrderHistoryItemAccessories.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(OrderHistoryItemAccessories.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for OrderHistoryItemAccessories</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for OrderHistoryItemAccessories.</p>
		 *
		 * <p>Use {@link OrderHistoryItemAccessories#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), OrderHistoryItemAccessories.CONTENT_URI);
			}
			
			public Builder setBasketJeid(String value) {
				mValues.put(OrderHistoryItemAccessories.BASKET_JEID, value);
				return this;
			}
			public Builder setBasketItemJeid(String value) {
				mValues.put(OrderHistoryItemAccessories.BASKET_ITEM_JEID, value);
				return this;
			}
			public Builder setProductJeid(long value) {
				mValues.put(OrderHistoryItemAccessories.PRODUCT_JEID, value);
				return this;
			}
			public Builder setAccessoryJeid(long value) {
				mValues.put(OrderHistoryItemAccessories.ACCESSORY_JEID, value);
				return this;
			}
			public Builder setAccessoryGroupJeid(long value) {
				mValues.put(OrderHistoryItemAccessories.ACCESSORY_GROUP_JEID, value);
				return this;
			}
			public Builder setAccessoryName(String value) {
				mValues.put(OrderHistoryItemAccessories.ACCESSORY_NAME, value);
				return this;
			}
			public Builder setAccessoryRequired(long value) {
				mValues.put(OrderHistoryItemAccessories.ACCESSORY_REQUIRED, value);
				return this;
			}
			public Builder setMealpartJeid(long value) {
				mValues.put(OrderHistoryItemAccessories.MEALPART_JEID, value);
				return this;
			}
			public Builder setMealpartGroupJeid(long value) {
				mValues.put(OrderHistoryItemAccessories.MEALPART_GROUP_JEID, value);
				return this;
			}
			public Builder setUnitPrice(double value) {
				mValues.put(OrderHistoryItemAccessories.UNIT_PRICE, value);
				return this;
			}
			public Builder setQuantity(long value) {
				mValues.put(OrderHistoryItemAccessories.QUANTITY, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			viewUris.add(OrderHistorySummary.CONTENT_URI);
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the OrderHistoryItemMealparts.</p>
	 */
	public static class OrderHistoryItemMealparts implements OrderHistoryItemMealpartsColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("order_history_item_mealparts").build();
	
		/**
		 * <p>The content type for a cursor that contains many OrderHistoryItemMealparts rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.order_history_item_mealparts";
	
		/**
		 * <p>The content type for a cursor that contains a single OrderHistoryItemMealparts row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.order_history_item_mealparts";
	
		/**
		 * <p>Builds a Uri with appended id for a row in OrderHistoryItemMealparts, 
		 * eg:- content://com.justeat.takeawaysdb/order_history_item_mealparts/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(OrderHistoryItemMealparts.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(OrderHistoryItemMealparts.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for OrderHistoryItemMealparts</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for OrderHistoryItemMealparts.</p>
		 *
		 * <p>Use {@link OrderHistoryItemMealparts#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), OrderHistoryItemMealparts.CONTENT_URI);
			}
			
			public Builder setBasketJeid(String value) {
				mValues.put(OrderHistoryItemMealparts.BASKET_JEID, value);
				return this;
			}
			public Builder setBasketItemJeid(String value) {
				mValues.put(OrderHistoryItemMealparts.BASKET_ITEM_JEID, value);
				return this;
			}
			public Builder setMealpartJeid(long value) {
				mValues.put(OrderHistoryItemMealparts.MEALPART_JEID, value);
				return this;
			}
			public Builder setMealpartName(String value) {
				mValues.put(OrderHistoryItemMealparts.MEALPART_NAME, value);
				return this;
			}
			public Builder setMealpartGroupJeid(long value) {
				mValues.put(OrderHistoryItemMealparts.MEALPART_GROUP_JEID, value);
				return this;
			}
			public Builder setHasAccessories(boolean value) {
				mValues.put(OrderHistoryItemMealparts.HAS_ACCESSORIES, value);
				return this;
			}
			public Builder setHasRequiredAccessories(boolean value) {
				mValues.put(OrderHistoryItemMealparts.HAS_REQUIRED_ACCESSORIES, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			viewUris.add(OrderHistorySummary.CONTENT_URI);
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the OrderHistoryItems.</p>
	 */
	public static class OrderHistoryItems implements OrderHistoryItemsColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("order_history_items").build();
	
		/**
		 * <p>The content type for a cursor that contains many OrderHistoryItems rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.order_history_items";
	
		/**
		 * <p>The content type for a cursor that contains a single OrderHistoryItems row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.order_history_items";
	
		/**
		 * <p>Builds a Uri with appended id for a row in OrderHistoryItems, 
		 * eg:- content://com.justeat.takeawaysdb/order_history_items/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(OrderHistoryItems.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(OrderHistoryItems.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for OrderHistoryItems</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for OrderHistoryItems.</p>
		 *
		 * <p>Use {@link OrderHistoryItems#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), OrderHistoryItems.CONTENT_URI);
			}
			
			public Builder setBasketJeid(String value) {
				mValues.put(OrderHistoryItems.BASKET_JEID, value);
				return this;
			}
			public Builder setBasketItemJeid(String value) {
				mValues.put(OrderHistoryItems.BASKET_ITEM_JEID, value);
				return this;
			}
			public Builder setRestaurantJeid(long value) {
				mValues.put(OrderHistoryItems.RESTAURANT_JEID, value);
				return this;
			}
			public Builder setMenuJeid(long value) {
				mValues.put(OrderHistoryItems.MENU_JEID, value);
				return this;
			}
			public Builder setCategoryJeid(long value) {
				mValues.put(OrderHistoryItems.CATEGORY_JEID, value);
				return this;
			}
			public Builder setProductJeid(long value) {
				mValues.put(OrderHistoryItems.PRODUCT_JEID, value);
				return this;
			}
			public Builder setIsComplex(boolean value) {
				mValues.put(OrderHistoryItems.IS_COMPLEX, value);
				return this;
			}
			public Builder setProductName(String value) {
				mValues.put(OrderHistoryItems.PRODUCT_NAME, value);
				return this;
			}
			public Builder setProductSynonym(String value) {
				mValues.put(OrderHistoryItems.PRODUCT_SYNONYM, value);
				return this;
			}
			public Builder setProductHasAccessories(boolean value) {
				mValues.put(OrderHistoryItems.PRODUCT_HAS_ACCESSORIES, value);
				return this;
			}
			public Builder setProductHasComboOptions(boolean value) {
				mValues.put(OrderHistoryItems.PRODUCT_HAS_COMBO_OPTIONS, value);
				return this;
			}
			public Builder setDescription(String value) {
				mValues.put(OrderHistoryItems.DESCRIPTION, value);
				return this;
			}
			public Builder setProductPrice(double value) {
				mValues.put(OrderHistoryItems.PRODUCT_PRICE, value);
				return this;
			}
			public Builder setTotalPrice(double value) {
				mValues.put(OrderHistoryItems.TOTAL_PRICE, value);
				return this;
			}
			public Builder setIsTips(boolean value) {
				mValues.put(OrderHistoryItems.IS_TIPS, value);
				return this;
			}
			public Builder setMenuSortKey(String value) {
				mValues.put(OrderHistoryItems.MENU_SORT_KEY, value);
				return this;
			}
			public Builder setGroupKey(String value) {
				mValues.put(OrderHistoryItems.GROUP_KEY, value);
				return this;
			}
			public Builder setUser(String value) {
				mValues.put(OrderHistoryItems.USER, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			viewUris.add(OrderHistorySummary.CONTENT_URI);
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the Orders.</p>
	 */
	public static class Orders implements OrdersColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("orders").build();
	
		/**
		 * <p>The content type for a cursor that contains many Orders rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.orders";
	
		/**
		 * <p>The content type for a cursor that contains a single Orders row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.orders";
	
		/**
		 * <p>Builds a Uri with appended id for a row in Orders, 
		 * eg:- content://com.justeat.takeawaysdb/orders/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(Orders.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(Orders.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for Orders</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for Orders.</p>
		 *
		 * <p>Use {@link Orders#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), Orders.CONTENT_URI);
			}
			
			public Builder setRestaurantJeid(long value) {
				mValues.put(Orders.RESTAURANT_JEID, value);
				return this;
			}
			public Builder setRestaurantName(String value) {
				mValues.put(Orders.RESTAURANT_NAME, value);
				return this;
			}
			public Builder setRestaurantAddress(String value) {
				mValues.put(Orders.RESTAURANT_ADDRESS, value);
				return this;
			}
			public Builder setRestaurantCity(String value) {
				mValues.put(Orders.RESTAURANT_CITY, value);
				return this;
			}
			public Builder setRestaurantPostcode(String value) {
				mValues.put(Orders.RESTAURANT_POSTCODE, value);
				return this;
			}
			public Builder setRestaurantLogoStandardResUrl(String value) {
				mValues.put(Orders.RESTAURANT_LOGO_STANDARD_RES_URL, value);
				return this;
			}
			public Builder setMenuJeid(long value) {
				mValues.put(Orders.MENU_JEID, value);
				return this;
			}
			public Builder setIsDelivery(boolean value) {
				mValues.put(Orders.IS_DELIVERY, value);
				return this;
			}
			public Builder setBasketJeid(String value) {
				mValues.put(Orders.BASKET_JEID, value);
				return this;
			}
			public Builder setOrderNumber(String value) {
				mValues.put(Orders.ORDER_NUMBER, value);
				return this;
			}
			public Builder setEstimatedDeliveryTime(String value) {
				mValues.put(Orders.ESTIMATED_DELIVERY_TIME, value);
				return this;
			}
			public Builder setTotal(double value) {
				mValues.put(Orders.TOTAL, value);
				return this;
			}
			public Builder setCreated(long value) {
				mValues.put(Orders.CREATED, value);
				return this;
			}
			public Builder setQuantity(long value) {
				mValues.put(Orders.QUANTITY, value);
				return this;
			}
			public Builder setRestaurantPhone(String value) {
				mValues.put(Orders.RESTAURANT_PHONE, value);
				return this;
			}
			public Builder setDeliveryCharge(double value) {
				mValues.put(Orders.DELIVERY_CHARGE, value);
				return this;
			}
			public Builder setSubTotal(double value) {
				mValues.put(Orders.SUB_TOTAL, value);
				return this;
			}
			public Builder setDiscount(double value) {
				mValues.put(Orders.DISCOUNT, value);
				return this;
			}
			public Builder setMultibuyDiscount(double value) {
				mValues.put(Orders.MULTIBUY_DISCOUNT, value);
				return this;
			}
			public Builder setOrderId(String value) {
				mValues.put(Orders.ORDER_ID, value);
				return this;
			}
			public Builder setOrderStatus(String value) {
				mValues.put(Orders.ORDER_STATUS, value);
				return this;
			}
			public Builder setDeliveryAddress(String value) {
				mValues.put(Orders.DELIVERY_ADDRESS, value);
				return this;
			}
			public Builder setDeliveryCity(String value) {
				mValues.put(Orders.DELIVERY_CITY, value);
				return this;
			}
			public Builder setDeliveryPostcode(String value) {
				mValues.put(Orders.DELIVERY_POSTCODE, value);
				return this;
			}
			public Builder setInitialEstimatedDeliveryTime(String value) {
				mValues.put(Orders.INITIAL_ESTIMATED_DELIVERY_TIME, value);
				return this;
			}
			public Builder setPlacedDate(String value) {
				mValues.put(Orders.PLACED_DATE, value);
				return this;
			}
			public Builder setPaymentIsCard(boolean value) {
				mValues.put(Orders.PAYMENT_IS_CARD, value);
				return this;
			}
			public Builder setPaymentCardType(String value) {
				mValues.put(Orders.PAYMENT_CARD_TYPE, value);
				return this;
			}
			public Builder setPaymentCardDigits(String value) {
				mValues.put(Orders.PAYMENT_CARD_DIGITS, value);
				return this;
			}
			public Builder setPaymentCardCharge(double value) {
				mValues.put(Orders.PAYMENT_CARD_CHARGE, value);
				return this;
			}
			public Builder setEstimatedDeliveryDate(long value) {
				mValues.put(Orders.ESTIMATED_DELIVERY_DATE, value);
				return this;
			}
			public Builder setIsRestaurantOpenNow(boolean value) {
				mValues.put(Orders.IS_RESTAURANT_OPEN_NOW, value);
				return this;
			}
			public Builder setIsRestaurantOffline(boolean value) {
				mValues.put(Orders.IS_RESTAURANT_OFFLINE, value);
				return this;
			}
			public Builder setIsRestaurantNew(boolean value) {
				mValues.put(Orders.IS_RESTAURANT_NEW, value);
				return this;
			}
			public Builder setRestaurantSeoName(String value) {
				mValues.put(Orders.RESTAURANT_SEO_NAME, value);
				return this;
			}
			public Builder setRestaurantDescription(String value) {
				mValues.put(Orders.RESTAURANT_DESCRIPTION, value);
				return this;
			}
			public Builder setIsReordable(boolean value) {
				mValues.put(Orders.IS_REORDABLE, value);
				return this;
			}
			public Builder setTotalComplementary(double value) {
				mValues.put(Orders.TOTAL_COMPLEMENTARY, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the PaymentLines.</p>
	 */
	public static class PaymentLines implements PaymentLinesColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("payment_lines").build();
	
		/**
		 * <p>The content type for a cursor that contains many PaymentLines rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.payment_lines";
	
		/**
		 * <p>The content type for a cursor that contains a single PaymentLines row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.payment_lines";
	
		/**
		 * <p>Builds a Uri with appended id for a row in PaymentLines, 
		 * eg:- content://com.justeat.takeawaysdb/payment_lines/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(PaymentLines.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(PaymentLines.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for PaymentLines</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for PaymentLines.</p>
		 *
		 * <p>Use {@link PaymentLines#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), PaymentLines.CONTENT_URI);
			}
			
			public Builder setOrderId(String value) {
				mValues.put(PaymentLines.ORDER_ID, value);
				return this;
			}
			public Builder setItemId(long value) {
				mValues.put(PaymentLines.ITEM_ID, value);
				return this;
			}
			public Builder setType(String value) {
				mValues.put(PaymentLines.TYPE, value);
				return this;
			}
			public Builder setValue(double value) {
				mValues.put(PaymentLines.VALUE, value);
				return this;
			}
			public Builder setCardType(String value) {
				mValues.put(PaymentLines.CARD_TYPE, value);
				return this;
			}
			public Builder setCardDigits(String value) {
				mValues.put(PaymentLines.CARD_DIGITS, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the ProductAccessories.</p>
	 */
	public static class ProductAccessories implements ProductAccessoriesColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("product_accessories").build();
	
		/**
		 * <p>The content type for a cursor that contains many ProductAccessories rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.product_accessories";
	
		/**
		 * <p>The content type for a cursor that contains a single ProductAccessories row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.product_accessories";
	
		/**
		 * <p>Builds a Uri with appended id for a row in ProductAccessories, 
		 * eg:- content://com.justeat.takeawaysdb/product_accessories/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(ProductAccessories.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(ProductAccessories.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for ProductAccessories</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for ProductAccessories.</p>
		 *
		 * <p>Use {@link ProductAccessories#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), ProductAccessories.CONTENT_URI);
			}
			
			public Builder setJeid(long value) {
				mValues.put(ProductAccessories.JEID, value);
				return this;
			}
			public Builder setRestaurantJeid(long value) {
				mValues.put(ProductAccessories.RESTAURANT_JEID, value);
				return this;
			}
			public Builder setProductJeid(long value) {
				mValues.put(ProductAccessories.PRODUCT_JEID, value);
				return this;
			}
			public Builder setName(String value) {
				mValues.put(ProductAccessories.NAME, value);
				return this;
			}
			public Builder setRequired(boolean value) {
				mValues.put(ProductAccessories.REQUIRED, value);
				return this;
			}
			public Builder setPrice(double value) {
				mValues.put(ProductAccessories.PRICE, value);
				return this;
			}
			public Builder setSelectionId(long value) {
				mValues.put(ProductAccessories.SELECTION_ID, value);
				return this;
			}
			public Builder setCreated(long value) {
				mValues.put(ProductAccessories.CREATED, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			viewUris.add(ProductAccessoryTypes.CONTENT_URI);
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the ProductCategories.</p>
	 */
	public static class ProductCategories implements ProductCategoriesColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("product_categories").build();
	
		/**
		 * <p>The content type for a cursor that contains many ProductCategories rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.product_categories";
	
		/**
		 * <p>The content type for a cursor that contains a single ProductCategories row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.product_categories";
	
		/**
		 * <p>Builds a Uri with appended id for a row in ProductCategories, 
		 * eg:- content://com.justeat.takeawaysdb/product_categories/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(ProductCategories.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(ProductCategories.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for ProductCategories</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for ProductCategories.</p>
		 *
		 * <p>Use {@link ProductCategories#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), ProductCategories.CONTENT_URI);
			}
			
			public Builder setJeid(long value) {
				mValues.put(ProductCategories.JEID, value);
				return this;
			}
			public Builder setRestaurantJeid(long value) {
				mValues.put(ProductCategories.RESTAURANT_JEID, value);
				return this;
			}
			public Builder setMenuJeid(long value) {
				mValues.put(ProductCategories.MENU_JEID, value);
				return this;
			}
			public Builder setName(String value) {
				mValues.put(ProductCategories.NAME, value);
				return this;
			}
			public Builder setDescription(String value) {
				mValues.put(ProductCategories.DESCRIPTION, value);
				return this;
			}
			public Builder setSpecialOffer(String value) {
				mValues.put(ProductCategories.SPECIAL_OFFER, value);
				return this;
			}
			public Builder setSortKey(String value) {
				mValues.put(ProductCategories.SORT_KEY, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			viewUris.add(ProductCategoriesWithCount.CONTENT_URI);
			viewUris.add(ProductsInBasket.CONTENT_URI);
			viewUris.add(ProductsInCategories.CONTENT_URI);
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the ProductComboOptionChoices.</p>
	 */
	public static class ProductComboOptionChoices implements ProductComboOptionChoicesColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("product_combo_option_choices").build();
	
		/**
		 * <p>The content type for a cursor that contains many ProductComboOptionChoices rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.product_combo_option_choices";
	
		/**
		 * <p>The content type for a cursor that contains a single ProductComboOptionChoices row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.product_combo_option_choices";
	
		/**
		 * <p>Builds a Uri with appended id for a row in ProductComboOptionChoices, 
		 * eg:- content://com.justeat.takeawaysdb/product_combo_option_choices/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(ProductComboOptionChoices.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(ProductComboOptionChoices.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for ProductComboOptionChoices</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for ProductComboOptionChoices.</p>
		 *
		 * <p>Use {@link ProductComboOptionChoices#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), ProductComboOptionChoices.CONTENT_URI);
			}
			
			public Builder setDisplayRank(long value) {
				mValues.put(ProductComboOptionChoices.DISPLAY_RANK, value);
				return this;
			}
			public Builder setRestaurantJeid(long value) {
				mValues.put(ProductComboOptionChoices.RESTAURANT_JEID, value);
				return this;
			}
			public Builder setProductJeid(long value) {
				mValues.put(ProductComboOptionChoices.PRODUCT_JEID, value);
				return this;
			}
			public Builder setOptionJeid(long value) {
				mValues.put(ProductComboOptionChoices.OPTION_JEID, value);
				return this;
			}
			public Builder setName(String value) {
				mValues.put(ProductComboOptionChoices.NAME, value);
				return this;
			}
			public Builder setDescription(String value) {
				mValues.put(ProductComboOptionChoices.DESCRIPTION, value);
				return this;
			}
			public Builder setHasAccessories(boolean value) {
				mValues.put(ProductComboOptionChoices.HAS_ACCESSORIES, value);
				return this;
			}
			public Builder setHasRequiredAccessories(boolean value) {
				mValues.put(ProductComboOptionChoices.HAS_REQUIRED_ACCESSORIES, value);
				return this;
			}
			public Builder setContainsNuts(boolean value) {
				mValues.put(ProductComboOptionChoices.CONTAINS_NUTS, value);
				return this;
			}
			public Builder setIsSpicy(boolean value) {
				mValues.put(ProductComboOptionChoices.IS_SPICY, value);
				return this;
			}
			public Builder setIsVegetarian(boolean value) {
				mValues.put(ProductComboOptionChoices.IS_VEGETARIAN, value);
				return this;
			}
			public Builder setCreated(long value) {
				mValues.put(ProductComboOptionChoices.CREATED, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the ProductComboOptions.</p>
	 */
	public static class ProductComboOptions implements ProductComboOptionsColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("product_combo_options").build();
	
		/**
		 * <p>The content type for a cursor that contains many ProductComboOptions rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.product_combo_options";
	
		/**
		 * <p>The content type for a cursor that contains a single ProductComboOptions row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.product_combo_options";
	
		/**
		 * <p>Builds a Uri with appended id for a row in ProductComboOptions, 
		 * eg:- content://com.justeat.takeawaysdb/product_combo_options/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(ProductComboOptions.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(ProductComboOptions.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for ProductComboOptions</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for ProductComboOptions.</p>
		 *
		 * <p>Use {@link ProductComboOptions#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), ProductComboOptions.CONTENT_URI);
			}
			
			public Builder setRestaurantJeid(long value) {
				mValues.put(ProductComboOptions.RESTAURANT_JEID, value);
				return this;
			}
			public Builder setProductJeid(long value) {
				mValues.put(ProductComboOptions.PRODUCT_JEID, value);
				return this;
			}
			public Builder setHasAccessory(boolean value) {
				mValues.put(ProductComboOptions.HAS_ACCESSORY, value);
				return this;
			}
			public Builder setDisplayRank(long value) {
				mValues.put(ProductComboOptions.DISPLAY_RANK, value);
				return this;
			}
			public Builder setCreated(long value) {
				mValues.put(ProductComboOptions.CREATED, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the Products.</p>
	 */
	public static class Products implements ProductsColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("products").build();
	
		/**
		 * <p>The content type for a cursor that contains many Products rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.products";
	
		/**
		 * <p>The content type for a cursor that contains a single Products row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.products";
	
		/**
		 * <p>Builds a Uri with appended id for a row in Products, 
		 * eg:- content://com.justeat.takeawaysdb/products/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(Products.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(Products.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for Products</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for Products.</p>
		 *
		 * <p>Use {@link Products#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), Products.CONTENT_URI);
			}
			
			public Builder setJeid(long value) {
				mValues.put(Products.JEID, value);
				return this;
			}
			public Builder setRestaurantJeid(long value) {
				mValues.put(Products.RESTAURANT_JEID, value);
				return this;
			}
			public Builder setMenuJeid(long value) {
				mValues.put(Products.MENU_JEID, value);
				return this;
			}
			public Builder setCategoryJeid(long value) {
				mValues.put(Products.CATEGORY_JEID, value);
				return this;
			}
			public Builder setName(String value) {
				mValues.put(Products.NAME, value);
				return this;
			}
			public Builder setSynonym(String value) {
				mValues.put(Products.SYNONYM, value);
				return this;
			}
			public Builder setDescription(String value) {
				mValues.put(Products.DESCRIPTION, value);
				return this;
			}
			public Builder setPrice(double value) {
				mValues.put(Products.PRICE, value);
				return this;
			}
			public Builder setQuantityInBasket(long value) {
				mValues.put(Products.QUANTITY_IN_BASKET, value);
				return this;
			}
			public Builder setHasAccessories(boolean value) {
				mValues.put(Products.HAS_ACCESSORIES, value);
				return this;
			}
			public Builder setHasComboOptions(boolean value) {
				mValues.put(Products.HAS_COMBO_OPTIONS, value);
				return this;
			}
			public Builder setHasRequiredAccessories(boolean value) {
				mValues.put(Products.HAS_REQUIRED_ACCESSORIES, value);
				return this;
			}
			public Builder setContainsNuts(boolean value) {
				mValues.put(Products.CONTAINS_NUTS, value);
				return this;
			}
			public Builder setIsSpicy(boolean value) {
				mValues.put(Products.IS_SPICY, value);
				return this;
			}
			public Builder setIsVegetarian(boolean value) {
				mValues.put(Products.IS_VEGETARIAN, value);
				return this;
			}
			public Builder setIsComplex(boolean value) {
				mValues.put(Products.IS_COMPLEX, value);
				return this;
			}
			public Builder setIsSynonym(boolean value) {
				mValues.put(Products.IS_SYNONYM, value);
				return this;
			}
			public Builder setMenuNumber(String value) {
				mValues.put(Products.MENU_NUMBER, value);
				return this;
			}
			public Builder setMenuNumberCode(String value) {
				mValues.put(Products.MENU_NUMBER_CODE, value);
				return this;
			}
			public Builder setGroupKey(String value) {
				mValues.put(Products.GROUP_KEY, value);
				return this;
			}
			public Builder setMenuSortKey(String value) {
				mValues.put(Products.MENU_SORT_KEY, value);
				return this;
			}
			public Builder setCreated(long value) {
				mValues.put(Products.CREATED, value);
				return this;
			}
			public Builder setIsTips(boolean value) {
				mValues.put(Products.IS_TIPS, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			viewUris.add(ProductsInBasket.CONTENT_URI);
			viewUris.add(ProductsInCategories.CONTENT_URI);
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the RecentlyViewedRestaurants.</p>
	 */
	public static class RecentlyViewedRestaurants implements RecentlyViewedRestaurantsColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("recently_viewed_restaurants").build();
	
		/**
		 * <p>The content type for a cursor that contains many RecentlyViewedRestaurants rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.recently_viewed_restaurants";
	
		/**
		 * <p>The content type for a cursor that contains a single RecentlyViewedRestaurants row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.recently_viewed_restaurants";
	
		/**
		 * <p>Builds a Uri with appended id for a row in RecentlyViewedRestaurants, 
		 * eg:- content://com.justeat.takeawaysdb/recently_viewed_restaurants/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(RecentlyViewedRestaurants.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(RecentlyViewedRestaurants.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for RecentlyViewedRestaurants</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for RecentlyViewedRestaurants.</p>
		 *
		 * <p>Use {@link RecentlyViewedRestaurants#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), RecentlyViewedRestaurants.CONTENT_URI);
			}
			
			public Builder setRestaurantJeid(long value) {
				mValues.put(RecentlyViewedRestaurants.RESTAURANT_JEID, value);
				return this;
			}
			public Builder setLastAccessed(long value) {
				mValues.put(RecentlyViewedRestaurants.LAST_ACCESSED, value);
				return this;
			}
			public Builder setQuery(String value) {
				mValues.put(RecentlyViewedRestaurants.QUERY, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			viewUris.add(RestaurantsAndBasket.CONTENT_URI);
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the RestaurantDeals.</p>
	 */
	public static class RestaurantDeals implements RestaurantDealsColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("restaurant_deals").build();
	
		/**
		 * <p>The content type for a cursor that contains many RestaurantDeals rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.restaurant_deals";
	
		/**
		 * <p>The content type for a cursor that contains a single RestaurantDeals row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.restaurant_deals";
	
		/**
		 * <p>Builds a Uri with appended id for a row in RestaurantDeals, 
		 * eg:- content://com.justeat.takeawaysdb/restaurant_deals/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(RestaurantDeals.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(RestaurantDeals.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for RestaurantDeals</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for RestaurantDeals.</p>
		 *
		 * <p>Use {@link RestaurantDeals#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), RestaurantDeals.CONTENT_URI);
			}
			
			public Builder setRestaurantJeid(long value) {
				mValues.put(RestaurantDeals.RESTAURANT_JEID, value);
				return this;
			}
			public Builder setDisplayText(String value) {
				mValues.put(RestaurantDeals.DISPLAY_TEXT, value);
				return this;
			}
			public Builder setDealType(String value) {
				mValues.put(RestaurantDeals.DEAL_TYPE, value);
				return this;
			}
			public Builder setDiscountPercent(double value) {
				mValues.put(RestaurantDeals.DISCOUNT_PERCENT, value);
				return this;
			}
			public Builder setQualifyingPrice(double value) {
				mValues.put(RestaurantDeals.QUALIFYING_PRICE, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the RestaurantOpeningTimes.</p>
	 */
	public static class RestaurantOpeningTimes implements RestaurantOpeningTimesColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("restaurant_opening_times").build();
	
		/**
		 * <p>The content type for a cursor that contains many RestaurantOpeningTimes rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.restaurant_opening_times";
	
		/**
		 * <p>The content type for a cursor that contains a single RestaurantOpeningTimes row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.restaurant_opening_times";
	
		/**
		 * <p>Builds a Uri with appended id for a row in RestaurantOpeningTimes, 
		 * eg:- content://com.justeat.takeawaysdb/restaurant_opening_times/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(RestaurantOpeningTimes.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(RestaurantOpeningTimes.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for RestaurantOpeningTimes</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for RestaurantOpeningTimes.</p>
		 *
		 * <p>Use {@link RestaurantOpeningTimes#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), RestaurantOpeningTimes.CONTENT_URI);
			}
			
			public Builder setRestaurantJeid(long value) {
				mValues.put(RestaurantOpeningTimes.RESTAURANT_JEID, value);
				return this;
			}
			public Builder setDay(long value) {
				mValues.put(RestaurantOpeningTimes.DAY, value);
				return this;
			}
			public Builder setDayText(String value) {
				mValues.put(RestaurantOpeningTimes.DAY_TEXT, value);
				return this;
			}
			public Builder setOpen(String value) {
				mValues.put(RestaurantOpeningTimes.OPEN, value);
				return this;
			}
			public Builder setClosed(String value) {
				mValues.put(RestaurantOpeningTimes.CLOSED, value);
				return this;
			}
			public Builder setRank(long value) {
				mValues.put(RestaurantOpeningTimes.RANK, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the Restaurants.</p>
	 */
	public static class Restaurants implements RestaurantsColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("restaurants").build();
	
		/**
		 * <p>The content type for a cursor that contains many Restaurants rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.restaurants";
	
		/**
		 * <p>The content type for a cursor that contains a single Restaurants row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.restaurants";
	
		/**
		 * <p>Builds a Uri with appended id for a row in Restaurants, 
		 * eg:- content://com.justeat.takeawaysdb/restaurants/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(Restaurants.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(Restaurants.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for Restaurants</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for Restaurants.</p>
		 *
		 * <p>Use {@link Restaurants#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), Restaurants.CONTENT_URI);
			}
			
			public Builder setJeid(long value) {
				mValues.put(Restaurants.JEID, value);
				return this;
			}
			public Builder setName(String value) {
				mValues.put(Restaurants.NAME, value);
				return this;
			}
			public Builder setAddress(String value) {
				mValues.put(Restaurants.ADDRESS, value);
				return this;
			}
			public Builder setCity(String value) {
				mValues.put(Restaurants.CITY, value);
				return this;
			}
			public Builder setPostcode(String value) {
				mValues.put(Restaurants.POSTCODE, value);
				return this;
			}
			public Builder setSearchQuery(String value) {
				mValues.put(Restaurants.SEARCH_QUERY, value);
				return this;
			}
			public Builder setCuisines(String value) {
				mValues.put(Restaurants.CUISINES, value);
				return this;
			}
			public Builder setDeals(String value) {
				mValues.put(Restaurants.DEALS, value);
				return this;
			}
			public Builder setDefaultDisplayRank(long value) {
				mValues.put(Restaurants.DEFAULT_DISPLAY_RANK, value);
				return this;
			}
			public Builder setIsHalal(boolean value) {
				mValues.put(Restaurants.IS_HALAL, value);
				return this;
			}
			public Builder setIsNew(boolean value) {
				mValues.put(Restaurants.IS_NEW, value);
				return this;
			}
			public Builder setIsOpenNowForDelivery(boolean value) {
				mValues.put(Restaurants.IS_OPEN_NOW_FOR_DELIVERY, value);
				return this;
			}
			public Builder setIsOpenNowForCollection(boolean value) {
				mValues.put(Restaurants.IS_OPEN_NOW_FOR_COLLECTION, value);
				return this;
			}
			public Builder setIsOpenNow(boolean value) {
				mValues.put(Restaurants.IS_OPEN_NOW, value);
				return this;
			}
			public Builder setIsSponsored(boolean value) {
				mValues.put(Restaurants.IS_SPONSORED, value);
				return this;
			}
			public Builder setIsTemporarilyOffline(boolean value) {
				mValues.put(Restaurants.IS_TEMPORARILY_OFFLINE, value);
				return this;
			}
			public Builder setLogoStandardResUrl(String value) {
				mValues.put(Restaurants.LOGO_STANDARD_RES_URL, value);
				return this;
			}
			public Builder setRating(double value) {
				mValues.put(Restaurants.RATING, value);
				return this;
			}
			public Builder setReasonWhyTemporarilyOffline(String value) {
				mValues.put(Restaurants.REASON_WHY_TEMPORARILY_OFFLINE, value);
				return this;
			}
			public Builder setNumRatings(long value) {
				mValues.put(Restaurants.NUM_RATINGS, value);
				return this;
			}
			public Builder setDescription(String value) {
				mValues.put(Restaurants.DESCRIPTION, value);
				return this;
			}
			public Builder setLatitude(double value) {
				mValues.put(Restaurants.LATITUDE, value);
				return this;
			}
			public Builder setLongitude(double value) {
				mValues.put(Restaurants.LONGITUDE, value);
				return this;
			}
			public Builder setOpeningTime(long value) {
				mValues.put(Restaurants.OPENING_TIME, value);
				return this;
			}
			public Builder setUniqueName(String value) {
				mValues.put(Restaurants.UNIQUE_NAME, value);
				return this;
			}
			public Builder setDriveDistance(double value) {
				mValues.put(Restaurants.DRIVE_DISTANCE, value);
				return this;
			}
			public Builder setRatingAverage(double value) {
				mValues.put(Restaurants.RATING_AVERAGE, value);
				return this;
			}
			public Builder setShowSmiley(boolean value) {
				mValues.put(Restaurants.SHOW_SMILEY, value);
				return this;
			}
			public Builder setSmileyDate(long value) {
				mValues.put(Restaurants.SMILEY_DATE, value);
				return this;
			}
			public Builder setSmileyResult(long value) {
				mValues.put(Restaurants.SMILEY_RESULT, value);
				return this;
			}
			public Builder setSmileyElite(boolean value) {
				mValues.put(Restaurants.SMILEY_ELITE, value);
				return this;
			}
			public Builder setSmileyUrl(String value) {
				mValues.put(Restaurants.SMILEY_URL, value);
				return this;
			}
			public Builder setDealDisplayRank(long value) {
				mValues.put(Restaurants.DEAL_DISPLAY_RANK, value);
				return this;
			}
			public Builder setHasDeals(boolean value) {
				mValues.put(Restaurants.HAS_DEALS, value);
				return this;
			}
			public Builder setMaxDiscountPercent(long value) {
				mValues.put(Restaurants.MAX_DISCOUNT_PERCENT, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			viewUris.add(RestaurantsAndBasket.CONTENT_URI);
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the Reviews.</p>
	 */
	public static class Reviews implements ReviewsColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("reviews").build();
	
		/**
		 * <p>The content type for a cursor that contains many Reviews rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.reviews";
	
		/**
		 * <p>The content type for a cursor that contains a single Reviews row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.reviews";
	
		/**
		 * <p>Builds a Uri with appended id for a row in Reviews, 
		 * eg:- content://com.justeat.takeawaysdb/reviews/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(Reviews.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(Reviews.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for Reviews</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for Reviews.</p>
		 *
		 * <p>Use {@link Reviews#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), Reviews.CONTENT_URI);
			}
			
			public Builder setRestaurantId(long value) {
				mValues.put(Reviews.RESTAURANT_ID, value);
				return this;
			}
			public Builder setUserId(long value) {
				mValues.put(Reviews.USER_ID, value);
				return this;
			}
			public Builder setCustomerCity(String value) {
				mValues.put(Reviews.CUSTOMER_CITY, value);
				return this;
			}
			public Builder setCustomerComments(String value) {
				mValues.put(Reviews.CUSTOMER_COMMENTS, value);
				return this;
			}
			public Builder setCustomerName(String value) {
				mValues.put(Reviews.CUSTOMER_NAME, value);
				return this;
			}
			public Builder setRateDate(long value) {
				mValues.put(Reviews.RATE_DATE, value);
				return this;
			}
			public Builder setRatingAverage(double value) {
				mValues.put(Reviews.RATING_AVERAGE, value);
				return this;
			}
			public Builder setRatingAverageStars(double value) {
				mValues.put(Reviews.RATING_AVERAGE_STARS, value);
				return this;
			}
			public Builder setRestaurantComments(String value) {
				mValues.put(Reviews.RESTAURANT_COMMENTS, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the SysEvents.</p>
	 */
	public static class SysEvents implements SysEventsColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("sys_events").build();
	
		/**
		 * <p>The content type for a cursor that contains many SysEvents rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.sys_events";
	
		/**
		 * <p>The content type for a cursor that contains a single SysEvents row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.sys_events";
	
		/**
		 * <p>Builds a Uri with appended id for a row in SysEvents, 
		 * eg:- content://com.justeat.takeawaysdb/sys_events/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(SysEvents.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(SysEvents.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for SysEvents</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for SysEvents.</p>
		 *
		 * <p>Use {@link SysEvents#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), SysEvents.CONTENT_URI);
			}
			
			public Builder setSessionId(long value) {
				mValues.put(SysEvents.SESSION_ID, value);
				return this;
			}
			public Builder setEventType(long value) {
				mValues.put(SysEvents.EVENT_TYPE, value);
				return this;
			}
			public Builder setContent(String value) {
				mValues.put(SysEvents.CONTENT, value);
				return this;
			}
			public Builder setTimestamp(long value) {
				mValues.put(SysEvents.TIMESTAMP, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the UserDetails.</p>
	 */
	public static class UserDetails implements UserDetailsColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("user_details").build();
	
		/**
		 * <p>The content type for a cursor that contains many UserDetails rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.user_details";
	
		/**
		 * <p>The content type for a cursor that contains a single UserDetails row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.user_details";
	
		/**
		 * <p>Builds a Uri with appended id for a row in UserDetails, 
		 * eg:- content://com.justeat.takeawaysdb/user_details/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(UserDetails.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(UserDetails.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for UserDetails</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for UserDetails.</p>
		 *
		 * <p>Use {@link UserDetails#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), UserDetails.CONTENT_URI);
			}
			
			public Builder setTrackingId(String value) {
				mValues.put(UserDetails.TRACKING_ID, value);
				return this;
			}
			public Builder setCreatedDate(String value) {
				mValues.put(UserDetails.CREATED_DATE, value);
				return this;
			}
			public Builder setEmail(String value) {
				mValues.put(UserDetails.EMAIL, value);
				return this;
			}
			public Builder setFirstName(String value) {
				mValues.put(UserDetails.FIRST_NAME, value);
				return this;
			}
			public Builder setLastName(String value) {
				mValues.put(UserDetails.LAST_NAME, value);
				return this;
			}
			public Builder setPhoneNumber(String value) {
				mValues.put(UserDetails.PHONE_NUMBER, value);
				return this;
			}
			public Builder setDateOfBirth(String value) {
				mValues.put(UserDetails.DATE_OF_BIRTH, value);
				return this;
			}
			public Builder setTermsId(long value) {
				mValues.put(UserDetails.TERMS_ID, value);
				return this;
			}
			public Builder setWantsNewsletter(boolean value) {
				mValues.put(UserDetails.WANTS_NEWSLETTER, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}

	

	/**
	 * <p>Column definitions and helper methods to work with the OrderHistorySummary.</p>
	 */
	public static class OrderHistorySummary implements OrderHistorySummaryColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("order_history_summary").build();
	
		/**
		 * <p>The content type for a cursor that contains many OrderHistorySummary rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.order_history_summary";
	
		/**
		 * <p>The content type for a cursor that contains a single OrderHistorySummary row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.order_history_summary";
	
		/**
		 * <p>Builds a Uri with appended id for a row in OrderHistorySummary, 
		 * eg:- content://com.justeat.takeawaysdb/order_history_summary/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(OrderHistorySummary.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(OrderHistorySummary.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for OrderHistorySummary</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for OrderHistorySummary.</p>
		 *
		 * <p>Use {@link OrderHistorySummary#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), OrderHistorySummary.CONTENT_URI);
			}
			
			public Builder setBasketJeid(String value) {
				mValues.put(OrderHistorySummary.BASKET_JEID, value);
				return this;
			}
			public Builder setProductJeid(String value) {
				mValues.put(OrderHistorySummary.PRODUCT_JEID, value);
				return this;
			}
			public Builder setItemName(String value) {
				mValues.put(OrderHistorySummary.ITEM_NAME, value);
				return this;
			}
			public Builder setUnitPrice(double value) {
				mValues.put(OrderHistorySummary.UNIT_PRICE, value);
				return this;
			}
			public Builder setQuantity(long value) {
				mValues.put(OrderHistorySummary.QUANTITY, value);
				return this;
			}
			public Builder setSortKey(String value) {
				mValues.put(OrderHistorySummary.SORT_KEY, value);
				return this;
			}
			public Builder setDescriptor(String value) {
				mValues.put(OrderHistorySummary.DESCRIPTOR, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the OrderSummary.</p>
	 */
	public static class OrderSummary implements OrderSummaryColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("order_summary").build();
	
		/**
		 * <p>The content type for a cursor that contains many OrderSummary rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.order_summary";
	
		/**
		 * <p>The content type for a cursor that contains a single OrderSummary row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.order_summary";
	
		/**
		 * <p>Builds a Uri with appended id for a row in OrderSummary, 
		 * eg:- content://com.justeat.takeawaysdb/order_summary/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(OrderSummary.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(OrderSummary.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for OrderSummary</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for OrderSummary.</p>
		 *
		 * <p>Use {@link OrderSummary#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), OrderSummary.CONTENT_URI);
			}
			
			public Builder setProductJeid(String value) {
				mValues.put(OrderSummary.PRODUCT_JEID, value);
				return this;
			}
			public Builder setItemName(String value) {
				mValues.put(OrderSummary.ITEM_NAME, value);
				return this;
			}
			public Builder setUnitPrice(double value) {
				mValues.put(OrderSummary.UNIT_PRICE, value);
				return this;
			}
			public Builder setQuantity(long value) {
				mValues.put(OrderSummary.QUANTITY, value);
				return this;
			}
			public Builder setSortKey(String value) {
				mValues.put(OrderSummary.SORT_KEY, value);
				return this;
			}
			public Builder setDescriptor(String value) {
				mValues.put(OrderSummary.DESCRIPTOR, value);
				return this;
			}
			public Builder setIsTips(boolean value) {
				mValues.put(OrderSummary.IS_TIPS, value);
				return this;
			}
			public Builder setResult(long value) {
				mValues.put(OrderSummary.RESULT, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the ProductAccessoryTypes.</p>
	 */
	public static class ProductAccessoryTypes implements ProductAccessoryTypesColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("product_accessory_types").build();
	
		/**
		 * <p>The content type for a cursor that contains many ProductAccessoryTypes rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.product_accessory_types";
	
	
		/**
		 * <p>Builds a Uri with appended id for a row in ProductAccessoryTypes, 
		 * eg:- content://com.justeat.takeawaysdb/product_accessory_types/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(ProductAccessoryTypes.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(ProductAccessoryTypes.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for ProductAccessoryTypes</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for ProductAccessoryTypes.</p>
		 *
		 * <p>Use {@link ProductAccessoryTypes#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), ProductAccessoryTypes.CONTENT_URI);
			}
			
			public Builder setRestaurantJeid(long value) {
				mValues.put(ProductAccessoryTypes.RESTAURANT_JEID, value);
				return this;
			}
			public Builder setProductJeid(long value) {
				mValues.put(ProductAccessoryTypes.PRODUCT_JEID, value);
				return this;
			}
			public Builder setRequired(boolean value) {
				mValues.put(ProductAccessoryTypes.REQUIRED, value);
				return this;
			}
			public Builder setSelectionId(long value) {
				mValues.put(ProductAccessoryTypes.SELECTION_ID, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the ProductCategoriesWithCount.</p>
	 */
	public static class ProductCategoriesWithCount implements ProductCategoriesWithCountColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("product_categories_with_count").build();
	
		/**
		 * <p>The content type for a cursor that contains many ProductCategoriesWithCount rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.product_categories_with_count";
	
		/**
		 * <p>The content type for a cursor that contains a single ProductCategoriesWithCount row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.product_categories_with_count";
	
		/**
		 * <p>Builds a Uri with appended id for a row in ProductCategoriesWithCount, 
		 * eg:- content://com.justeat.takeawaysdb/product_categories_with_count/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(ProductCategoriesWithCount.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(ProductCategoriesWithCount.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for ProductCategoriesWithCount</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for ProductCategoriesWithCount.</p>
		 *
		 * <p>Use {@link ProductCategoriesWithCount#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), ProductCategoriesWithCount.CONTENT_URI);
			}
			
			public Builder setJeid(long value) {
				mValues.put(ProductCategoriesWithCount.JEID, value);
				return this;
			}
			public Builder setRestaurantJeid(long value) {
				mValues.put(ProductCategoriesWithCount.RESTAURANT_JEID, value);
				return this;
			}
			public Builder setMenuJeid(long value) {
				mValues.put(ProductCategoriesWithCount.MENU_JEID, value);
				return this;
			}
			public Builder setName(String value) {
				mValues.put(ProductCategoriesWithCount.NAME, value);
				return this;
			}
			public Builder setSpecialOffer(String value) {
				mValues.put(ProductCategoriesWithCount.SPECIAL_OFFER, value);
				return this;
			}
			public Builder setDescription(String value) {
				mValues.put(ProductCategoriesWithCount.DESCRIPTION, value);
				return this;
			}
			public Builder setQuantityInBasket(String value) {
				mValues.put(ProductCategoriesWithCount.QUANTITY_IN_BASKET, value);
				return this;
			}
			public Builder setSortKey(String value) {
				mValues.put(ProductCategoriesWithCount.SORT_KEY, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the ProductsInBasket.</p>
	 */
	public static class ProductsInBasket implements ProductsInBasketColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("products_in_basket").build();
	
		/**
		 * <p>The content type for a cursor that contains many ProductsInBasket rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.products_in_basket";
	
		/**
		 * <p>The content type for a cursor that contains a single ProductsInBasket row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.products_in_basket";
	
		/**
		 * <p>Builds a Uri with appended id for a row in ProductsInBasket, 
		 * eg:- content://com.justeat.takeawaysdb/products_in_basket/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(ProductsInBasket.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(ProductsInBasket.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for ProductsInBasket</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for ProductsInBasket.</p>
		 *
		 * <p>Use {@link ProductsInBasket#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), ProductsInBasket.CONTENT_URI);
			}
			
			public Builder setRestaurantJeid(long value) {
				mValues.put(ProductsInBasket.RESTAURANT_JEID, value);
				return this;
			}
			public Builder setMenuJeid(long value) {
				mValues.put(ProductsInBasket.MENU_JEID, value);
				return this;
			}
			public Builder setCategoryJeid(long value) {
				mValues.put(ProductsInBasket.CATEGORY_JEID, value);
				return this;
			}
			public Builder setProductJeid(long value) {
				mValues.put(ProductsInBasket.PRODUCT_JEID, value);
				return this;
			}
			public Builder setGroupKey(String value) {
				mValues.put(ProductsInBasket.GROUP_KEY, value);
				return this;
			}
			public Builder setName(String value) {
				mValues.put(ProductsInBasket.NAME, value);
				return this;
			}
			public Builder setDescription(String value) {
				mValues.put(ProductsInBasket.DESCRIPTION, value);
				return this;
			}
			public Builder setPrice(double value) {
				mValues.put(ProductsInBasket.PRICE, value);
				return this;
			}
			public Builder setIsComplex(boolean value) {
				mValues.put(ProductsInBasket.IS_COMPLEX, value);
				return this;
			}
			public Builder setHasSynonyms(String value) {
				mValues.put(ProductsInBasket.HAS_SYNONYMS, value);
				return this;
			}
			public Builder setContainsNuts(String value) {
				mValues.put(ProductsInBasket.CONTAINS_NUTS, value);
				return this;
			}
			public Builder setIsSpicy(String value) {
				mValues.put(ProductsInBasket.IS_SPICY, value);
				return this;
			}
			public Builder setIsVegetarian(String value) {
				mValues.put(ProductsInBasket.IS_VEGETARIAN, value);
				return this;
			}
			public Builder setQuantity(long value) {
				mValues.put(ProductsInBasket.QUANTITY, value);
				return this;
			}
			public Builder setSpecialOffer(String value) {
				mValues.put(ProductsInBasket.SPECIAL_OFFER, value);
				return this;
			}
			public Builder setSynonyms(String value) {
				mValues.put(ProductsInBasket.SYNONYMS, value);
				return this;
			}
			public Builder setAllDescriptions(String value) {
				mValues.put(ProductsInBasket.ALL_DESCRIPTIONS, value);
				return this;
			}
			public Builder setResult(long value) {
				mValues.put(ProductsInBasket.RESULT, value);
				return this;
			}
			public Builder setStatus(long value) {
				mValues.put(ProductsInBasket.STATUS, value);
				return this;
			}
			public Builder setMenuSortKey(String value) {
				mValues.put(ProductsInBasket.MENU_SORT_KEY, value);
				return this;
			}
			public Builder setDescriptor(long value) {
				mValues.put(ProductsInBasket.DESCRIPTOR, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the ProductsInCategories.</p>
	 */
	public static class ProductsInCategories implements ProductsInCategoriesColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("products_in_categories").build();
	
		/**
		 * <p>The content type for a cursor that contains many ProductsInCategories rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.products_in_categories";
	
		/**
		 * <p>The content type for a cursor that contains a single ProductsInCategories row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.products_in_categories";
	
		/**
		 * <p>Builds a Uri with appended id for a row in ProductsInCategories, 
		 * eg:- content://com.justeat.takeawaysdb/products_in_categories/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(ProductsInCategories.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(ProductsInCategories.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for ProductsInCategories</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for ProductsInCategories.</p>
		 *
		 * <p>Use {@link ProductsInCategories#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), ProductsInCategories.CONTENT_URI);
			}
			
			public Builder setRestaurantJeid(long value) {
				mValues.put(ProductsInCategories.RESTAURANT_JEID, value);
				return this;
			}
			public Builder setMenuJeid(long value) {
				mValues.put(ProductsInCategories.MENU_JEID, value);
				return this;
			}
			public Builder setCategoryJeid(long value) {
				mValues.put(ProductsInCategories.CATEGORY_JEID, value);
				return this;
			}
			public Builder setProductJeid(long value) {
				mValues.put(ProductsInCategories.PRODUCT_JEID, value);
				return this;
			}
			public Builder setGroupKey(String value) {
				mValues.put(ProductsInCategories.GROUP_KEY, value);
				return this;
			}
			public Builder setName(String value) {
				mValues.put(ProductsInCategories.NAME, value);
				return this;
			}
			public Builder setDescription(String value) {
				mValues.put(ProductsInCategories.DESCRIPTION, value);
				return this;
			}
			public Builder setPrice(String value) {
				mValues.put(ProductsInCategories.PRICE, value);
				return this;
			}
			public Builder setIsComplex(boolean value) {
				mValues.put(ProductsInCategories.IS_COMPLEX, value);
				return this;
			}
			public Builder setHasSynonyms(long value) {
				mValues.put(ProductsInCategories.HAS_SYNONYMS, value);
				return this;
			}
			public Builder setContainsNuts(String value) {
				mValues.put(ProductsInCategories.CONTAINS_NUTS, value);
				return this;
			}
			public Builder setIsSpicy(String value) {
				mValues.put(ProductsInCategories.IS_SPICY, value);
				return this;
			}
			public Builder setIsVegetarian(String value) {
				mValues.put(ProductsInCategories.IS_VEGETARIAN, value);
				return this;
			}
			public Builder setQuantity(long value) {
				mValues.put(ProductsInCategories.QUANTITY, value);
				return this;
			}
			public Builder setSortKey(long value) {
				mValues.put(ProductsInCategories.SORT_KEY, value);
				return this;
			}
			public Builder setDescriptor(String value) {
				mValues.put(ProductsInCategories.DESCRIPTOR, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	/**
	 * <p>Column definitions and helper methods to work with the RestaurantsAndBasket.</p>
	 */
	public static class RestaurantsAndBasket implements RestaurantsAndBasketColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("restaurants_and_basket").build();
	
		/**
		 * <p>The content type for a cursor that contains many RestaurantsAndBasket rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.restaurants_and_basket";
	
		/**
		 * <p>The content type for a cursor that contains a single RestaurantsAndBasket row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.restaurants_and_basket";
	
		/**
		 * <p>Builds a Uri with appended id for a row in RestaurantsAndBasket, 
		 * eg:- content://com.justeat.takeawaysdb/restaurants_and_basket/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mechanoid.getContentResolver().delete(RestaurantsAndBasket.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mechanoid.getContentResolver().delete(RestaurantsAndBasket.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for RestaurantsAndBasket</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for RestaurantsAndBasket.</p>
		 *
		 * <p>Use {@link RestaurantsAndBasket#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mechanoid.getApplicationContext(), RestaurantsAndBasket.CONTENT_URI);
			}
			
			public Builder setJeid(long value) {
				mValues.put(RestaurantsAndBasket.JEID, value);
				return this;
			}
			public Builder setName(String value) {
				mValues.put(RestaurantsAndBasket.NAME, value);
				return this;
			}
			public Builder setUniqueName(String value) {
				mValues.put(RestaurantsAndBasket.UNIQUE_NAME, value);
				return this;
			}
			public Builder setDescription(String value) {
				mValues.put(RestaurantsAndBasket.DESCRIPTION, value);
				return this;
			}
			public Builder setAddress(String value) {
				mValues.put(RestaurantsAndBasket.ADDRESS, value);
				return this;
			}
			public Builder setCity(String value) {
				mValues.put(RestaurantsAndBasket.CITY, value);
				return this;
			}
			public Builder setPostcode(String value) {
				mValues.put(RestaurantsAndBasket.POSTCODE, value);
				return this;
			}
			public Builder setLatitude(double value) {
				mValues.put(RestaurantsAndBasket.LATITUDE, value);
				return this;
			}
			public Builder setLongitude(double value) {
				mValues.put(RestaurantsAndBasket.LONGITUDE, value);
				return this;
			}
			public Builder setLogoStandardResUrl(String value) {
				mValues.put(RestaurantsAndBasket.LOGO_STANDARD_RES_URL, value);
				return this;
			}
			public Builder setCuisines(String value) {
				mValues.put(RestaurantsAndBasket.CUISINES, value);
				return this;
			}
			public Builder setDeals(String value) {
				mValues.put(RestaurantsAndBasket.DEALS, value);
				return this;
			}
			public Builder setMaxDiscount(long value) {
				mValues.put(RestaurantsAndBasket.MAX_DISCOUNT, value);
				return this;
			}
			public Builder setDefaultDisplayRank(long value) {
				mValues.put(RestaurantsAndBasket.DEFAULT_DISPLAY_RANK, value);
				return this;
			}
			public Builder setDriveDistance(double value) {
				mValues.put(RestaurantsAndBasket.DRIVE_DISTANCE, value);
				return this;
			}
			public Builder setIsHalal(boolean value) {
				mValues.put(RestaurantsAndBasket.IS_HALAL, value);
				return this;
			}
			public Builder setIsNew(boolean value) {
				mValues.put(RestaurantsAndBasket.IS_NEW, value);
				return this;
			}
			public Builder setIsOpenNow(boolean value) {
				mValues.put(RestaurantsAndBasket.IS_OPEN_NOW, value);
				return this;
			}
			public Builder setIsOpenNowForCollection(boolean value) {
				mValues.put(RestaurantsAndBasket.IS_OPEN_NOW_FOR_COLLECTION, value);
				return this;
			}
			public Builder setIsOpenNowForDelivery(boolean value) {
				mValues.put(RestaurantsAndBasket.IS_OPEN_NOW_FOR_DELIVERY, value);
				return this;
			}
			public Builder setIsSponsored(boolean value) {
				mValues.put(RestaurantsAndBasket.IS_SPONSORED, value);
				return this;
			}
			public Builder setIsTemporarilyOffline(boolean value) {
				mValues.put(RestaurantsAndBasket.IS_TEMPORARILY_OFFLINE, value);
				return this;
			}
			public Builder setRating(double value) {
				mValues.put(RestaurantsAndBasket.RATING, value);
				return this;
			}
			public Builder setNumRatings(long value) {
				mValues.put(RestaurantsAndBasket.NUM_RATINGS, value);
				return this;
			}
			public Builder setOpeningTime(long value) {
				mValues.put(RestaurantsAndBasket.OPENING_TIME, value);
				return this;
			}
			public Builder setReasonWhyTemporarilyOffline(String value) {
				mValues.put(RestaurantsAndBasket.REASON_WHY_TEMPORARILY_OFFLINE, value);
				return this;
			}
			public Builder setSearchQuery(String value) {
				mValues.put(RestaurantsAndBasket.SEARCH_QUERY, value);
				return this;
			}
			public Builder setHasDeals(boolean value) {
				mValues.put(RestaurantsAndBasket.HAS_DEALS, value);
				return this;
			}
			public Builder setDealDisplayRank(long value) {
				mValues.put(RestaurantsAndBasket.DEAL_DISPLAY_RANK, value);
				return this;
			}
			public Builder setBasketId(long value) {
				mValues.put(RestaurantsAndBasket.BASKET_ID, value);
				return this;
			}
			public Builder setBasketJeid(String value) {
				mValues.put(RestaurantsAndBasket.BASKET_JEID, value);
				return this;
			}
			public Builder setBasketTotal(double value) {
				mValues.put(RestaurantsAndBasket.BASKET_TOTAL, value);
				return this;
			}
			public Builder setBasketSubTotal(double value) {
				mValues.put(RestaurantsAndBasket.BASKET_SUB_TOTAL, value);
				return this;
			}
			public Builder setBasketDiscount(double value) {
				mValues.put(RestaurantsAndBasket.BASKET_DISCOUNT, value);
				return this;
			}
			public Builder setBasketMultibuyDiscount(double value) {
				mValues.put(RestaurantsAndBasket.BASKET_MULTIBUY_DISCOUNT, value);
				return this;
			}
			public Builder setBasketDeliveryCharge(double value) {
				mValues.put(RestaurantsAndBasket.BASKET_DELIVERY_CHARGE, value);
				return this;
			}
			public Builder setBasketOrderable(boolean value) {
				mValues.put(RestaurantsAndBasket.BASKET_ORDERABLE, value);
				return this;
			}
			public Builder setBasketItemCount(long value) {
				mValues.put(RestaurantsAndBasket.BASKET_ITEM_COUNT, value);
				return this;
			}
			public Builder setRecentlyViewedId(long value) {
				mValues.put(RestaurantsAndBasket.RECENTLY_VIEWED_ID, value);
				return this;
			}
			public Builder setRecentlyViewedLastAccessed(long value) {
				mValues.put(RestaurantsAndBasket.RECENTLY_VIEWED_LAST_ACCESSED, value);
				return this;
			}
			public Builder setRecentlyViewedQuery(String value) {
				mValues.put(RestaurantsAndBasket.RECENTLY_VIEWED_QUERY, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	
	static Map<Uri, Set<Uri>> REFERENCING_VIEWS;
	
	static {
		Map<Uri, Set<Uri>> map = new HashMap<Uri, Set<Uri>>();
		
		map.put(AddressSearchResult.CONTENT_URI, AddressSearchResult.VIEW_URIS);
		map.put(BasketItemAccessories.CONTENT_URI, BasketItemAccessories.VIEW_URIS);
		map.put(BasketItemMealparts.CONTENT_URI, BasketItemMealparts.VIEW_URIS);
		map.put(BasketItems.CONTENT_URI, BasketItems.VIEW_URIS);
		map.put(BasketTaxes.CONTENT_URI, BasketTaxes.VIEW_URIS);
		map.put(Baskets.CONTENT_URI, Baskets.VIEW_URIS);
		map.put(CuisineTypes.CONTENT_URI, CuisineTypes.VIEW_URIS);
		map.put(Menus.CONTENT_URI, Menus.VIEW_URIS);
		map.put(OrderHistoryItemAccessories.CONTENT_URI, OrderHistoryItemAccessories.VIEW_URIS);
		map.put(OrderHistoryItemMealparts.CONTENT_URI, OrderHistoryItemMealparts.VIEW_URIS);
		map.put(OrderHistoryItems.CONTENT_URI, OrderHistoryItems.VIEW_URIS);
		map.put(Orders.CONTENT_URI, Orders.VIEW_URIS);
		map.put(PaymentLines.CONTENT_URI, PaymentLines.VIEW_URIS);
		map.put(ProductAccessories.CONTENT_URI, ProductAccessories.VIEW_URIS);
		map.put(ProductCategories.CONTENT_URI, ProductCategories.VIEW_URIS);
		map.put(ProductComboOptionChoices.CONTENT_URI, ProductComboOptionChoices.VIEW_URIS);
		map.put(ProductComboOptions.CONTENT_URI, ProductComboOptions.VIEW_URIS);
		map.put(Products.CONTENT_URI, Products.VIEW_URIS);
		map.put(RecentlyViewedRestaurants.CONTENT_URI, RecentlyViewedRestaurants.VIEW_URIS);
		map.put(RestaurantDeals.CONTENT_URI, RestaurantDeals.VIEW_URIS);
		map.put(RestaurantOpeningTimes.CONTENT_URI, RestaurantOpeningTimes.VIEW_URIS);
		map.put(Restaurants.CONTENT_URI, Restaurants.VIEW_URIS);
		map.put(Reviews.CONTENT_URI, Reviews.VIEW_URIS);
		map.put(SysEvents.CONTENT_URI, SysEvents.VIEW_URIS);
		map.put(UserDetails.CONTENT_URI, UserDetails.VIEW_URIS);
		map.put(OrderHistorySummary.CONTENT_URI, OrderHistorySummary.VIEW_URIS);
		map.put(OrderSummary.CONTENT_URI, OrderSummary.VIEW_URIS);
		map.put(ProductAccessoryTypes.CONTENT_URI, ProductAccessoryTypes.VIEW_URIS);
		map.put(ProductCategoriesWithCount.CONTENT_URI, ProductCategoriesWithCount.VIEW_URIS);
		map.put(ProductsInBasket.CONTENT_URI, ProductsInBasket.VIEW_URIS);
		map.put(ProductsInCategories.CONTENT_URI, ProductsInCategories.VIEW_URIS);
		map.put(RestaurantsAndBasket.CONTENT_URI, RestaurantsAndBasket.VIEW_URIS);
		
		REFERENCING_VIEWS = Collections.unmodifiableMap(map);
		
	}
	
	public static class AccessoriesSelected {
		public static Uri buildAccessoriesSelectedUri() {
			return BASE_CONTENT_URI
				.buildUpon()
				.appendPath("accessories_selected")
				.build();
		}
		
		public static final String CONTENT_TYPE =
		        "vnd.android.cursor.dir/vnd.takeawaysdb.accessories_selected";
	}
	
	private TakeawaysDBContract(){}
	
	/**
	 * <p>Delete all rows from all tables</p>
	 */						
	public static void deleteAll() {
		AddressSearchResult.delete();
		BasketItemAccessories.delete();
		BasketItemMealparts.delete();
		BasketItems.delete();
		BasketTaxes.delete();
		Baskets.delete();
		CuisineTypes.delete();
		Menus.delete();
		OrderHistoryItemAccessories.delete();
		OrderHistoryItemMealparts.delete();
		OrderHistoryItems.delete();
		Orders.delete();
		PaymentLines.delete();
		ProductAccessories.delete();
		ProductCategories.delete();
		ProductComboOptionChoices.delete();
		ProductComboOptions.delete();
		Products.delete();
		RecentlyViewedRestaurants.delete();
		RestaurantDeals.delete();
		RestaurantOpeningTimes.delete();
		Restaurants.delete();
		Reviews.delete();
		SysEvents.delete();
		UserDetails.delete();
	}
}
