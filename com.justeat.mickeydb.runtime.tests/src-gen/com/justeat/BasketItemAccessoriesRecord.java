/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.BasketItemAccessories;
import com.justeat.TakeawaysDBContract.BasketItemAccessories.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class BasketItemAccessoriesRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<BasketItemAccessoriesRecord> sFactory = new ActiveRecordFactory<BasketItemAccessoriesRecord>() {
		@Override
		public BasketItemAccessoriesRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return BasketItemAccessories.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<BasketItemAccessoriesRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<BasketItemAccessoriesRecord> CREATOR 
    	= new Parcelable.Creator<BasketItemAccessoriesRecord>() {
        public BasketItemAccessoriesRecord createFromParcel(Parcel in) {
            return new BasketItemAccessoriesRecord(in);
        }

        public BasketItemAccessoriesRecord[] newArray(int size) {
            return new BasketItemAccessoriesRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	BasketItemAccessories._ID,
    	BasketItemAccessories.BASKET_ITEM_ID,
    	BasketItemAccessories.PRODUCT_JEID,
    	BasketItemAccessories.ACCESSORY_JEID,
    	BasketItemAccessories.ACCESSORY_GROUP_JEID,
    	BasketItemAccessories.ACCESSORY_NAME,
    	BasketItemAccessories.ACCESSORY_REQUIRED,
    	BasketItemAccessories.MEALPART_JEID,
    	BasketItemAccessories.MEALPART_GROUP_JEID,
    	BasketItemAccessories.UNIT_PRICE,
    	BasketItemAccessories.QUANTITY
    };
    
    public interface Indices {
    	int _ID = 0;
    	int BASKET_ITEM_ID = 1;
    	int PRODUCT_JEID = 2;
    	int ACCESSORY_JEID = 3;
    	int ACCESSORY_GROUP_JEID = 4;
    	int ACCESSORY_NAME = 5;
    	int ACCESSORY_REQUIRED = 6;
    	int MEALPART_JEID = 7;
    	int MEALPART_GROUP_JEID = 8;
    	int UNIT_PRICE = 9;
    	int QUANTITY = 10;
    }
    
    private long mBasketItemId;
    private boolean mBasketItemIdDirty;
    private long mProductJeid;
    private boolean mProductJeidDirty;
    private long mAccessoryJeid;
    private boolean mAccessoryJeidDirty;
    private long mAccessoryGroupJeid;
    private boolean mAccessoryGroupJeidDirty;
    private String mAccessoryName;
    private boolean mAccessoryNameDirty;
    private long mAccessoryRequired;
    private boolean mAccessoryRequiredDirty;
    private long mMealpartJeid;
    private boolean mMealpartJeidDirty;
    private long mMealpartGroupJeid;
    private boolean mMealpartGroupJeidDirty;
    private double mUnitPrice;
    private boolean mUnitPriceDirty;
    private long mQuantity;
    private boolean mQuantityDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setBasketItemId(long basketItemId) {
    	mBasketItemId = basketItemId;
    	mBasketItemIdDirty = true;
    }
    
    public long getBasketItemId() {
    	return mBasketItemId;
    }
    
    public void setProductJeid(long productJeid) {
    	mProductJeid = productJeid;
    	mProductJeidDirty = true;
    }
    
    public long getProductJeid() {
    	return mProductJeid;
    }
    
    public void setAccessoryJeid(long accessoryJeid) {
    	mAccessoryJeid = accessoryJeid;
    	mAccessoryJeidDirty = true;
    }
    
    public long getAccessoryJeid() {
    	return mAccessoryJeid;
    }
    
    public void setAccessoryGroupJeid(long accessoryGroupJeid) {
    	mAccessoryGroupJeid = accessoryGroupJeid;
    	mAccessoryGroupJeidDirty = true;
    }
    
    public long getAccessoryGroupJeid() {
    	return mAccessoryGroupJeid;
    }
    
    public void setAccessoryName(String accessoryName) {
    	mAccessoryName = accessoryName;
    	mAccessoryNameDirty = true;
    }
    
    public String getAccessoryName() {
    	return mAccessoryName;
    }
    
    public void setAccessoryRequired(long accessoryRequired) {
    	mAccessoryRequired = accessoryRequired;
    	mAccessoryRequiredDirty = true;
    }
    
    public long getAccessoryRequired() {
    	return mAccessoryRequired;
    }
    
    public void setMealpartJeid(long mealpartJeid) {
    	mMealpartJeid = mealpartJeid;
    	mMealpartJeidDirty = true;
    }
    
    public long getMealpartJeid() {
    	return mMealpartJeid;
    }
    
    public void setMealpartGroupJeid(long mealpartGroupJeid) {
    	mMealpartGroupJeid = mealpartGroupJeid;
    	mMealpartGroupJeidDirty = true;
    }
    
    public long getMealpartGroupJeid() {
    	return mMealpartGroupJeid;
    }
    
    public void setUnitPrice(double unitPrice) {
    	mUnitPrice = unitPrice;
    	mUnitPriceDirty = true;
    }
    
    public double getUnitPrice() {
    	return mUnitPrice;
    }
    
    public void setQuantity(long quantity) {
    	mQuantity = quantity;
    	mQuantityDirty = true;
    }
    
    public long getQuantity() {
    	return mQuantity;
    }
    
    
    public BasketItemAccessoriesRecord() {
    	super(BasketItemAccessories.CONTENT_URI);
	}
	
	private BasketItemAccessoriesRecord(Parcel in) {
    	super(BasketItemAccessories.CONTENT_URI);
    	
		setId(in.readLong());
		
		mBasketItemId = in.readLong();
		mProductJeid = in.readLong();
		mAccessoryJeid = in.readLong();
		mAccessoryGroupJeid = in.readLong();
		mAccessoryName = in.readString();
		mAccessoryRequired = in.readLong();
		mMealpartJeid = in.readLong();
		mMealpartGroupJeid = in.readLong();
		mUnitPrice = in.readDouble();
		mQuantity = in.readLong();
		
		boolean[] dirtyFlags = new boolean[10];
		in.readBooleanArray(dirtyFlags);
		mBasketItemIdDirty = dirtyFlags[0];
		mProductJeidDirty = dirtyFlags[1];
		mAccessoryJeidDirty = dirtyFlags[2];
		mAccessoryGroupJeidDirty = dirtyFlags[3];
		mAccessoryNameDirty = dirtyFlags[4];
		mAccessoryRequiredDirty = dirtyFlags[5];
		mMealpartJeidDirty = dirtyFlags[6];
		mMealpartGroupJeidDirty = dirtyFlags[7];
		mUnitPriceDirty = dirtyFlags[8];
		mQuantityDirty = dirtyFlags[9];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mBasketItemId);
		dest.writeLong(mProductJeid);
		dest.writeLong(mAccessoryJeid);
		dest.writeLong(mAccessoryGroupJeid);
		dest.writeString(mAccessoryName);
		dest.writeLong(mAccessoryRequired);
		dest.writeLong(mMealpartJeid);
		dest.writeLong(mMealpartGroupJeid);
		dest.writeDouble(mUnitPrice);
		dest.writeLong(mQuantity);
		dest.writeBooleanArray(new boolean[] {
			mBasketItemIdDirty,
			mProductJeidDirty,
			mAccessoryJeidDirty,
			mAccessoryGroupJeidDirty,
			mAccessoryNameDirty,
			mAccessoryRequiredDirty,
			mMealpartJeidDirty,
			mMealpartGroupJeidDirty,
			mUnitPriceDirty,
			mQuantityDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = BasketItemAccessories.newBuilder();

		if(mBasketItemIdDirty) {
			builder.setBasketItemId(mBasketItemId);
		}
		if(mProductJeidDirty) {
			builder.setProductJeid(mProductJeid);
		}
		if(mAccessoryJeidDirty) {
			builder.setAccessoryJeid(mAccessoryJeid);
		}
		if(mAccessoryGroupJeidDirty) {
			builder.setAccessoryGroupJeid(mAccessoryGroupJeid);
		}
		if(mAccessoryNameDirty) {
			builder.setAccessoryName(mAccessoryName);
		}
		if(mAccessoryRequiredDirty) {
			builder.setAccessoryRequired(mAccessoryRequired);
		}
		if(mMealpartJeidDirty) {
			builder.setMealpartJeid(mMealpartJeid);
		}
		if(mMealpartGroupJeidDirty) {
			builder.setMealpartGroupJeid(mMealpartGroupJeid);
		}
		if(mUnitPriceDirty) {
			builder.setUnitPrice(mUnitPrice);
		}
		if(mQuantityDirty) {
			builder.setQuantity(mQuantity);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mBasketItemIdDirty = dirty;
		mProductJeidDirty = dirty;
		mAccessoryJeidDirty = dirty;
		mAccessoryGroupJeidDirty = dirty;
		mAccessoryNameDirty = dirty;
		mAccessoryRequiredDirty = dirty;
		mMealpartJeidDirty = dirty;
		mMealpartGroupJeidDirty = dirty;
		mUnitPriceDirty = dirty;
		mQuantityDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setBasketItemId(c.getLong(Indices.BASKET_ITEM_ID));
		setProductJeid(c.getLong(Indices.PRODUCT_JEID));
		setAccessoryJeid(c.getLong(Indices.ACCESSORY_JEID));
		setAccessoryGroupJeid(c.getLong(Indices.ACCESSORY_GROUP_JEID));
		setAccessoryName(c.getString(Indices.ACCESSORY_NAME));
		setAccessoryRequired(c.getLong(Indices.ACCESSORY_REQUIRED));
		setMealpartJeid(c.getLong(Indices.MEALPART_JEID));
		setMealpartGroupJeid(c.getLong(Indices.MEALPART_GROUP_JEID));
		setUnitPrice(c.getDouble(Indices.UNIT_PRICE));
		setQuantity(c.getLong(Indices.QUANTITY));
	}
	
	public static BasketItemAccessoriesRecord fromCursor(Cursor c) {
	    BasketItemAccessoriesRecord item = new BasketItemAccessoriesRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static BasketItemAccessoriesRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(BasketItemAccessoriesRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static BasketItemAccessoriesRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(BasketItemAccessories.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
