/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.RecentlyViewedRestaurants;
import com.justeat.TakeawaysDBContract.RecentlyViewedRestaurants.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class RecentlyViewedRestaurantsRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<RecentlyViewedRestaurantsRecord> sFactory = new ActiveRecordFactory<RecentlyViewedRestaurantsRecord>() {
		@Override
		public RecentlyViewedRestaurantsRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return RecentlyViewedRestaurants.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<RecentlyViewedRestaurantsRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<RecentlyViewedRestaurantsRecord> CREATOR 
    	= new Parcelable.Creator<RecentlyViewedRestaurantsRecord>() {
        public RecentlyViewedRestaurantsRecord createFromParcel(Parcel in) {
            return new RecentlyViewedRestaurantsRecord(in);
        }

        public RecentlyViewedRestaurantsRecord[] newArray(int size) {
            return new RecentlyViewedRestaurantsRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	RecentlyViewedRestaurants._ID,
    	RecentlyViewedRestaurants.RESTAURANT_JEID,
    	RecentlyViewedRestaurants.LAST_ACCESSED,
    	RecentlyViewedRestaurants.QUERY
    };
    
    public interface Indices {
    	int _ID = 0;
    	int RESTAURANT_JEID = 1;
    	int LAST_ACCESSED = 2;
    	int QUERY = 3;
    }
    
    private long mRestaurantJeid;
    private boolean mRestaurantJeidDirty;
    private long mLastAccessed;
    private boolean mLastAccessedDirty;
    private String mQuery;
    private boolean mQueryDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setRestaurantJeid(long restaurantJeid) {
    	mRestaurantJeid = restaurantJeid;
    	mRestaurantJeidDirty = true;
    }
    
    public long getRestaurantJeid() {
    	return mRestaurantJeid;
    }
    
    public void setLastAccessed(long lastAccessed) {
    	mLastAccessed = lastAccessed;
    	mLastAccessedDirty = true;
    }
    
    public long getLastAccessed() {
    	return mLastAccessed;
    }
    
    public void setQuery(String query) {
    	mQuery = query;
    	mQueryDirty = true;
    }
    
    public String getQuery() {
    	return mQuery;
    }
    
    
    public RecentlyViewedRestaurantsRecord() {
    	super(RecentlyViewedRestaurants.CONTENT_URI);
	}
	
	private RecentlyViewedRestaurantsRecord(Parcel in) {
    	super(RecentlyViewedRestaurants.CONTENT_URI);
    	
		setId(in.readLong());
		
		mRestaurantJeid = in.readLong();
		mLastAccessed = in.readLong();
		mQuery = in.readString();
		
		boolean[] dirtyFlags = new boolean[3];
		in.readBooleanArray(dirtyFlags);
		mRestaurantJeidDirty = dirtyFlags[0];
		mLastAccessedDirty = dirtyFlags[1];
		mQueryDirty = dirtyFlags[2];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mRestaurantJeid);
		dest.writeLong(mLastAccessed);
		dest.writeString(mQuery);
		dest.writeBooleanArray(new boolean[] {
			mRestaurantJeidDirty,
			mLastAccessedDirty,
			mQueryDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = RecentlyViewedRestaurants.newBuilder();

		if(mRestaurantJeidDirty) {
			builder.setRestaurantJeid(mRestaurantJeid);
		}
		if(mLastAccessedDirty) {
			builder.setLastAccessed(mLastAccessed);
		}
		if(mQueryDirty) {
			builder.setQuery(mQuery);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mRestaurantJeidDirty = dirty;
		mLastAccessedDirty = dirty;
		mQueryDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setRestaurantJeid(c.getLong(Indices.RESTAURANT_JEID));
		setLastAccessed(c.getLong(Indices.LAST_ACCESSED));
		setQuery(c.getString(Indices.QUERY));
	}
	
	public static RecentlyViewedRestaurantsRecord fromCursor(Cursor c) {
	    RecentlyViewedRestaurantsRecord item = new RecentlyViewedRestaurantsRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static RecentlyViewedRestaurantsRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(RecentlyViewedRestaurantsRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static RecentlyViewedRestaurantsRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(RecentlyViewedRestaurants.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
