/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.OrderSummary;
import com.justeat.TakeawaysDBContract.OrderSummary.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class OrderSummaryRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<OrderSummaryRecord> sFactory = new ActiveRecordFactory<OrderSummaryRecord>() {
		@Override
		public OrderSummaryRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return OrderSummary.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<OrderSummaryRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<OrderSummaryRecord> CREATOR 
    	= new Parcelable.Creator<OrderSummaryRecord>() {
        public OrderSummaryRecord createFromParcel(Parcel in) {
            return new OrderSummaryRecord(in);
        }

        public OrderSummaryRecord[] newArray(int size) {
            return new OrderSummaryRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	OrderSummary._ID,
    	OrderSummary.PRODUCT_JEID,
    	OrderSummary.ITEM_NAME,
    	OrderSummary.UNIT_PRICE,
    	OrderSummary.QUANTITY,
    	OrderSummary.SORT_KEY,
    	OrderSummary.DESCRIPTOR,
    	OrderSummary.IS_TIPS,
    	OrderSummary.RESULT
    };
    
    public interface Indices {
    	int _ID = 0;
    	int PRODUCT_JEID = 1;
    	int ITEM_NAME = 2;
    	int UNIT_PRICE = 3;
    	int QUANTITY = 4;
    	int SORT_KEY = 5;
    	int DESCRIPTOR = 6;
    	int IS_TIPS = 7;
    	int RESULT = 8;
    }
    
    private String mProductJeid;
    private boolean mProductJeidDirty;
    private String mItemName;
    private boolean mItemNameDirty;
    private double mUnitPrice;
    private boolean mUnitPriceDirty;
    private long mQuantity;
    private boolean mQuantityDirty;
    private String mSortKey;
    private boolean mSortKeyDirty;
    private String mDescriptor;
    private boolean mDescriptorDirty;
    private boolean mIsTips;
    private boolean mIsTipsDirty;
    private long mResult;
    private boolean mResultDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setProductJeid(String productJeid) {
    	mProductJeid = productJeid;
    	mProductJeidDirty = true;
    }
    
    public String getProductJeid() {
    	return mProductJeid;
    }
    public void setItemName(String itemName) {
    	mItemName = itemName;
    	mItemNameDirty = true;
    }
    
    public String getItemName() {
    	return mItemName;
    }
    public void setUnitPrice(double unitPrice) {
    	mUnitPrice = unitPrice;
    	mUnitPriceDirty = true;
    }
    
    public double getUnitPrice() {
    	return mUnitPrice;
    }
    public void setQuantity(long quantity) {
    	mQuantity = quantity;
    	mQuantityDirty = true;
    }
    
    public long getQuantity() {
    	return mQuantity;
    }
    public void setSortKey(String sortKey) {
    	mSortKey = sortKey;
    	mSortKeyDirty = true;
    }
    
    public String getSortKey() {
    	return mSortKey;
    }
    public void setDescriptor(String descriptor) {
    	mDescriptor = descriptor;
    	mDescriptorDirty = true;
    }
    
    public String getDescriptor() {
    	return mDescriptor;
    }
    public void setIsTips(boolean isTips) {
    	mIsTips = isTips;
    	mIsTipsDirty = true;
    }
    
    public boolean getIsTips() {
    	return mIsTips;
    }
    public void setResult(long result) {
    	mResult = result;
    	mResultDirty = true;
    }
    
    public long getResult() {
    	return mResult;
    }
    
    public OrderSummaryRecord() {
    	super(OrderSummary.CONTENT_URI);
	}
	
	private OrderSummaryRecord(Parcel in) {
    	super(OrderSummary.CONTENT_URI);
    	
		setId(in.readLong());
		
		mProductJeid = in.readString();
		mItemName = in.readString();
		mUnitPrice = in.readDouble();
		mQuantity = in.readLong();
		mSortKey = in.readString();
		mDescriptor = in.readString();
		mIsTips = (in.readInt() > 0);
		mResult = in.readLong();
		
		boolean[] dirtyFlags = new boolean[8];
		in.readBooleanArray(dirtyFlags);
		mProductJeidDirty = dirtyFlags[0];
		mItemNameDirty = dirtyFlags[1];
		mUnitPriceDirty = dirtyFlags[2];
		mQuantityDirty = dirtyFlags[3];
		mSortKeyDirty = dirtyFlags[4];
		mDescriptorDirty = dirtyFlags[5];
		mIsTipsDirty = dirtyFlags[6];
		mResultDirty = dirtyFlags[7];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeString(mProductJeid);
		dest.writeString(mItemName);
		dest.writeDouble(mUnitPrice);
		dest.writeLong(mQuantity);
		dest.writeString(mSortKey);
		dest.writeString(mDescriptor);
		dest.writeInt(mIsTips ? 1 : 0);
		dest.writeLong(mResult);
		dest.writeBooleanArray(new boolean[] {
			mProductJeidDirty,
			mItemNameDirty,
			mUnitPriceDirty,
			mQuantityDirty,
			mSortKeyDirty,
			mDescriptorDirty,
			mIsTipsDirty,
			mResultDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = OrderSummary.newBuilder();

		if(mProductJeidDirty) {
			builder.setProductJeid(mProductJeid);
		}
		if(mItemNameDirty) {
			builder.setItemName(mItemName);
		}
		if(mUnitPriceDirty) {
			builder.setUnitPrice(mUnitPrice);
		}
		if(mQuantityDirty) {
			builder.setQuantity(mQuantity);
		}
		if(mSortKeyDirty) {
			builder.setSortKey(mSortKey);
		}
		if(mDescriptorDirty) {
			builder.setDescriptor(mDescriptor);
		}
		if(mIsTipsDirty) {
			builder.setIsTips(mIsTips);
		}
		if(mResultDirty) {
			builder.setResult(mResult);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mProductJeidDirty = dirty;
		mItemNameDirty = dirty;
		mUnitPriceDirty = dirty;
		mQuantityDirty = dirty;
		mSortKeyDirty = dirty;
		mDescriptorDirty = dirty;
		mIsTipsDirty = dirty;
		mResultDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setProductJeid(c.getString(Indices.PRODUCT_JEID));
		setItemName(c.getString(Indices.ITEM_NAME));
		setUnitPrice(c.getDouble(Indices.UNIT_PRICE));
		setQuantity(c.getLong(Indices.QUANTITY));
		setSortKey(c.getString(Indices.SORT_KEY));
		setDescriptor(c.getString(Indices.DESCRIPTOR));
		setIsTips(c.getInt(Indices.IS_TIPS) > 0);
		setResult(c.getLong(Indices.RESULT));
	}
	
	public static OrderSummaryRecord fromCursor(Cursor c) {
	    OrderSummaryRecord item = new OrderSummaryRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static OrderSummaryRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(OrderSummaryRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static OrderSummaryRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(OrderSummary.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
