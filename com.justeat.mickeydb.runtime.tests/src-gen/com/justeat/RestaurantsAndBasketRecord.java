/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.RestaurantsAndBasket;
import com.justeat.TakeawaysDBContract.RestaurantsAndBasket.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class RestaurantsAndBasketRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<RestaurantsAndBasketRecord> sFactory = new ActiveRecordFactory<RestaurantsAndBasketRecord>() {
		@Override
		public RestaurantsAndBasketRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return RestaurantsAndBasket.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<RestaurantsAndBasketRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<RestaurantsAndBasketRecord> CREATOR 
    	= new Parcelable.Creator<RestaurantsAndBasketRecord>() {
        public RestaurantsAndBasketRecord createFromParcel(Parcel in) {
            return new RestaurantsAndBasketRecord(in);
        }

        public RestaurantsAndBasketRecord[] newArray(int size) {
            return new RestaurantsAndBasketRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	RestaurantsAndBasket._ID,
    	RestaurantsAndBasket.JEID,
    	RestaurantsAndBasket.NAME,
    	RestaurantsAndBasket.UNIQUE_NAME,
    	RestaurantsAndBasket.DESCRIPTION,
    	RestaurantsAndBasket.ADDRESS,
    	RestaurantsAndBasket.CITY,
    	RestaurantsAndBasket.POSTCODE,
    	RestaurantsAndBasket.LATITUDE,
    	RestaurantsAndBasket.LONGITUDE,
    	RestaurantsAndBasket.LOGO_STANDARD_RES_URL,
    	RestaurantsAndBasket.CUISINES,
    	RestaurantsAndBasket.DEALS,
    	RestaurantsAndBasket.MAX_DISCOUNT,
    	RestaurantsAndBasket.DEFAULT_DISPLAY_RANK,
    	RestaurantsAndBasket.DRIVE_DISTANCE,
    	RestaurantsAndBasket.IS_HALAL,
    	RestaurantsAndBasket.IS_NEW,
    	RestaurantsAndBasket.IS_OPEN_NOW,
    	RestaurantsAndBasket.IS_OPEN_NOW_FOR_COLLECTION,
    	RestaurantsAndBasket.IS_OPEN_NOW_FOR_DELIVERY,
    	RestaurantsAndBasket.IS_SPONSORED,
    	RestaurantsAndBasket.IS_TEMPORARILY_OFFLINE,
    	RestaurantsAndBasket.RATING,
    	RestaurantsAndBasket.NUM_RATINGS,
    	RestaurantsAndBasket.OPENING_TIME,
    	RestaurantsAndBasket.REASON_WHY_TEMPORARILY_OFFLINE,
    	RestaurantsAndBasket.SEARCH_QUERY,
    	RestaurantsAndBasket.HAS_DEALS,
    	RestaurantsAndBasket.DEAL_DISPLAY_RANK,
    	RestaurantsAndBasket.BASKET_ID,
    	RestaurantsAndBasket.BASKET_JEID,
    	RestaurantsAndBasket.BASKET_TOTAL,
    	RestaurantsAndBasket.BASKET_SUB_TOTAL,
    	RestaurantsAndBasket.BASKET_DISCOUNT,
    	RestaurantsAndBasket.BASKET_MULTIBUY_DISCOUNT,
    	RestaurantsAndBasket.BASKET_DELIVERY_CHARGE,
    	RestaurantsAndBasket.BASKET_ORDERABLE,
    	RestaurantsAndBasket.BASKET_ITEM_COUNT,
    	RestaurantsAndBasket.RECENTLY_VIEWED_ID,
    	RestaurantsAndBasket.RECENTLY_VIEWED_LAST_ACCESSED,
    	RestaurantsAndBasket.RECENTLY_VIEWED_QUERY
    };
    
    public interface Indices {
    	int _ID = 0;
    	int JEID = 1;
    	int NAME = 2;
    	int UNIQUE_NAME = 3;
    	int DESCRIPTION = 4;
    	int ADDRESS = 5;
    	int CITY = 6;
    	int POSTCODE = 7;
    	int LATITUDE = 8;
    	int LONGITUDE = 9;
    	int LOGO_STANDARD_RES_URL = 10;
    	int CUISINES = 11;
    	int DEALS = 12;
    	int MAX_DISCOUNT = 13;
    	int DEFAULT_DISPLAY_RANK = 14;
    	int DRIVE_DISTANCE = 15;
    	int IS_HALAL = 16;
    	int IS_NEW = 17;
    	int IS_OPEN_NOW = 18;
    	int IS_OPEN_NOW_FOR_COLLECTION = 19;
    	int IS_OPEN_NOW_FOR_DELIVERY = 20;
    	int IS_SPONSORED = 21;
    	int IS_TEMPORARILY_OFFLINE = 22;
    	int RATING = 23;
    	int NUM_RATINGS = 24;
    	int OPENING_TIME = 25;
    	int REASON_WHY_TEMPORARILY_OFFLINE = 26;
    	int SEARCH_QUERY = 27;
    	int HAS_DEALS = 28;
    	int DEAL_DISPLAY_RANK = 29;
    	int BASKET_ID = 30;
    	int BASKET_JEID = 31;
    	int BASKET_TOTAL = 32;
    	int BASKET_SUB_TOTAL = 33;
    	int BASKET_DISCOUNT = 34;
    	int BASKET_MULTIBUY_DISCOUNT = 35;
    	int BASKET_DELIVERY_CHARGE = 36;
    	int BASKET_ORDERABLE = 37;
    	int BASKET_ITEM_COUNT = 38;
    	int RECENTLY_VIEWED_ID = 39;
    	int RECENTLY_VIEWED_LAST_ACCESSED = 40;
    	int RECENTLY_VIEWED_QUERY = 41;
    }
    
    private long mJeid;
    private boolean mJeidDirty;
    private String mName;
    private boolean mNameDirty;
    private String mUniqueName;
    private boolean mUniqueNameDirty;
    private String mDescription;
    private boolean mDescriptionDirty;
    private String mAddress;
    private boolean mAddressDirty;
    private String mCity;
    private boolean mCityDirty;
    private String mPostcode;
    private boolean mPostcodeDirty;
    private double mLatitude;
    private boolean mLatitudeDirty;
    private double mLongitude;
    private boolean mLongitudeDirty;
    private String mLogoStandardResUrl;
    private boolean mLogoStandardResUrlDirty;
    private String mCuisines;
    private boolean mCuisinesDirty;
    private String mDeals;
    private boolean mDealsDirty;
    private long mMaxDiscount;
    private boolean mMaxDiscountDirty;
    private long mDefaultDisplayRank;
    private boolean mDefaultDisplayRankDirty;
    private double mDriveDistance;
    private boolean mDriveDistanceDirty;
    private boolean mIsHalal;
    private boolean mIsHalalDirty;
    private boolean mIsNew;
    private boolean mIsNewDirty;
    private boolean mIsOpenNow;
    private boolean mIsOpenNowDirty;
    private boolean mIsOpenNowForCollection;
    private boolean mIsOpenNowForCollectionDirty;
    private boolean mIsOpenNowForDelivery;
    private boolean mIsOpenNowForDeliveryDirty;
    private boolean mIsSponsored;
    private boolean mIsSponsoredDirty;
    private boolean mIsTemporarilyOffline;
    private boolean mIsTemporarilyOfflineDirty;
    private double mRating;
    private boolean mRatingDirty;
    private long mNumRatings;
    private boolean mNumRatingsDirty;
    private long mOpeningTime;
    private boolean mOpeningTimeDirty;
    private String mReasonWhyTemporarilyOffline;
    private boolean mReasonWhyTemporarilyOfflineDirty;
    private String mSearchQuery;
    private boolean mSearchQueryDirty;
    private boolean mHasDeals;
    private boolean mHasDealsDirty;
    private long mDealDisplayRank;
    private boolean mDealDisplayRankDirty;
    private long mBasketId;
    private boolean mBasketIdDirty;
    private String mBasketJeid;
    private boolean mBasketJeidDirty;
    private double mBasketTotal;
    private boolean mBasketTotalDirty;
    private double mBasketSubTotal;
    private boolean mBasketSubTotalDirty;
    private double mBasketDiscount;
    private boolean mBasketDiscountDirty;
    private double mBasketMultibuyDiscount;
    private boolean mBasketMultibuyDiscountDirty;
    private double mBasketDeliveryCharge;
    private boolean mBasketDeliveryChargeDirty;
    private boolean mBasketOrderable;
    private boolean mBasketOrderableDirty;
    private long mBasketItemCount;
    private boolean mBasketItemCountDirty;
    private long mRecentlyViewedId;
    private boolean mRecentlyViewedIdDirty;
    private long mRecentlyViewedLastAccessed;
    private boolean mRecentlyViewedLastAccessedDirty;
    private String mRecentlyViewedQuery;
    private boolean mRecentlyViewedQueryDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setJeid(long jeid) {
    	mJeid = jeid;
    	mJeidDirty = true;
    }
    
    public long getJeid() {
    	return mJeid;
    }
    public void setName(String name) {
    	mName = name;
    	mNameDirty = true;
    }
    
    public String getName() {
    	return mName;
    }
    public void setUniqueName(String uniqueName) {
    	mUniqueName = uniqueName;
    	mUniqueNameDirty = true;
    }
    
    public String getUniqueName() {
    	return mUniqueName;
    }
    public void setDescription(String description) {
    	mDescription = description;
    	mDescriptionDirty = true;
    }
    
    public String getDescription() {
    	return mDescription;
    }
    public void setAddress(String address) {
    	mAddress = address;
    	mAddressDirty = true;
    }
    
    public String getAddress() {
    	return mAddress;
    }
    public void setCity(String city) {
    	mCity = city;
    	mCityDirty = true;
    }
    
    public String getCity() {
    	return mCity;
    }
    public void setPostcode(String postcode) {
    	mPostcode = postcode;
    	mPostcodeDirty = true;
    }
    
    public String getPostcode() {
    	return mPostcode;
    }
    public void setLatitude(double latitude) {
    	mLatitude = latitude;
    	mLatitudeDirty = true;
    }
    
    public double getLatitude() {
    	return mLatitude;
    }
    public void setLongitude(double longitude) {
    	mLongitude = longitude;
    	mLongitudeDirty = true;
    }
    
    public double getLongitude() {
    	return mLongitude;
    }
    public void setLogoStandardResUrl(String logoStandardResUrl) {
    	mLogoStandardResUrl = logoStandardResUrl;
    	mLogoStandardResUrlDirty = true;
    }
    
    public String getLogoStandardResUrl() {
    	return mLogoStandardResUrl;
    }
    public void setCuisines(String cuisines) {
    	mCuisines = cuisines;
    	mCuisinesDirty = true;
    }
    
    public String getCuisines() {
    	return mCuisines;
    }
    public void setDeals(String deals) {
    	mDeals = deals;
    	mDealsDirty = true;
    }
    
    public String getDeals() {
    	return mDeals;
    }
    public void setMaxDiscount(long maxDiscount) {
    	mMaxDiscount = maxDiscount;
    	mMaxDiscountDirty = true;
    }
    
    public long getMaxDiscount() {
    	return mMaxDiscount;
    }
    public void setDefaultDisplayRank(long defaultDisplayRank) {
    	mDefaultDisplayRank = defaultDisplayRank;
    	mDefaultDisplayRankDirty = true;
    }
    
    public long getDefaultDisplayRank() {
    	return mDefaultDisplayRank;
    }
    public void setDriveDistance(double driveDistance) {
    	mDriveDistance = driveDistance;
    	mDriveDistanceDirty = true;
    }
    
    public double getDriveDistance() {
    	return mDriveDistance;
    }
    public void setIsHalal(boolean isHalal) {
    	mIsHalal = isHalal;
    	mIsHalalDirty = true;
    }
    
    public boolean getIsHalal() {
    	return mIsHalal;
    }
    public void setIsNew(boolean isNew) {
    	mIsNew = isNew;
    	mIsNewDirty = true;
    }
    
    public boolean getIsNew() {
    	return mIsNew;
    }
    public void setIsOpenNow(boolean isOpenNow) {
    	mIsOpenNow = isOpenNow;
    	mIsOpenNowDirty = true;
    }
    
    public boolean getIsOpenNow() {
    	return mIsOpenNow;
    }
    public void setIsOpenNowForCollection(boolean isOpenNowForCollection) {
    	mIsOpenNowForCollection = isOpenNowForCollection;
    	mIsOpenNowForCollectionDirty = true;
    }
    
    public boolean getIsOpenNowForCollection() {
    	return mIsOpenNowForCollection;
    }
    public void setIsOpenNowForDelivery(boolean isOpenNowForDelivery) {
    	mIsOpenNowForDelivery = isOpenNowForDelivery;
    	mIsOpenNowForDeliveryDirty = true;
    }
    
    public boolean getIsOpenNowForDelivery() {
    	return mIsOpenNowForDelivery;
    }
    public void setIsSponsored(boolean isSponsored) {
    	mIsSponsored = isSponsored;
    	mIsSponsoredDirty = true;
    }
    
    public boolean getIsSponsored() {
    	return mIsSponsored;
    }
    public void setIsTemporarilyOffline(boolean isTemporarilyOffline) {
    	mIsTemporarilyOffline = isTemporarilyOffline;
    	mIsTemporarilyOfflineDirty = true;
    }
    
    public boolean getIsTemporarilyOffline() {
    	return mIsTemporarilyOffline;
    }
    public void setRating(double rating) {
    	mRating = rating;
    	mRatingDirty = true;
    }
    
    public double getRating() {
    	return mRating;
    }
    public void setNumRatings(long numRatings) {
    	mNumRatings = numRatings;
    	mNumRatingsDirty = true;
    }
    
    public long getNumRatings() {
    	return mNumRatings;
    }
    public void setOpeningTime(long openingTime) {
    	mOpeningTime = openingTime;
    	mOpeningTimeDirty = true;
    }
    
    public long getOpeningTime() {
    	return mOpeningTime;
    }
    public void setReasonWhyTemporarilyOffline(String reasonWhyTemporarilyOffline) {
    	mReasonWhyTemporarilyOffline = reasonWhyTemporarilyOffline;
    	mReasonWhyTemporarilyOfflineDirty = true;
    }
    
    public String getReasonWhyTemporarilyOffline() {
    	return mReasonWhyTemporarilyOffline;
    }
    public void setSearchQuery(String searchQuery) {
    	mSearchQuery = searchQuery;
    	mSearchQueryDirty = true;
    }
    
    public String getSearchQuery() {
    	return mSearchQuery;
    }
    public void setHasDeals(boolean hasDeals) {
    	mHasDeals = hasDeals;
    	mHasDealsDirty = true;
    }
    
    public boolean getHasDeals() {
    	return mHasDeals;
    }
    public void setDealDisplayRank(long dealDisplayRank) {
    	mDealDisplayRank = dealDisplayRank;
    	mDealDisplayRankDirty = true;
    }
    
    public long getDealDisplayRank() {
    	return mDealDisplayRank;
    }
    public void setBasketId(long basketId) {
    	mBasketId = basketId;
    	mBasketIdDirty = true;
    }
    
    public long getBasketId() {
    	return mBasketId;
    }
    public void setBasketJeid(String basketJeid) {
    	mBasketJeid = basketJeid;
    	mBasketJeidDirty = true;
    }
    
    public String getBasketJeid() {
    	return mBasketJeid;
    }
    public void setBasketTotal(double basketTotal) {
    	mBasketTotal = basketTotal;
    	mBasketTotalDirty = true;
    }
    
    public double getBasketTotal() {
    	return mBasketTotal;
    }
    public void setBasketSubTotal(double basketSubTotal) {
    	mBasketSubTotal = basketSubTotal;
    	mBasketSubTotalDirty = true;
    }
    
    public double getBasketSubTotal() {
    	return mBasketSubTotal;
    }
    public void setBasketDiscount(double basketDiscount) {
    	mBasketDiscount = basketDiscount;
    	mBasketDiscountDirty = true;
    }
    
    public double getBasketDiscount() {
    	return mBasketDiscount;
    }
    public void setBasketMultibuyDiscount(double basketMultibuyDiscount) {
    	mBasketMultibuyDiscount = basketMultibuyDiscount;
    	mBasketMultibuyDiscountDirty = true;
    }
    
    public double getBasketMultibuyDiscount() {
    	return mBasketMultibuyDiscount;
    }
    public void setBasketDeliveryCharge(double basketDeliveryCharge) {
    	mBasketDeliveryCharge = basketDeliveryCharge;
    	mBasketDeliveryChargeDirty = true;
    }
    
    public double getBasketDeliveryCharge() {
    	return mBasketDeliveryCharge;
    }
    public void setBasketOrderable(boolean basketOrderable) {
    	mBasketOrderable = basketOrderable;
    	mBasketOrderableDirty = true;
    }
    
    public boolean getBasketOrderable() {
    	return mBasketOrderable;
    }
    public void setBasketItemCount(long basketItemCount) {
    	mBasketItemCount = basketItemCount;
    	mBasketItemCountDirty = true;
    }
    
    public long getBasketItemCount() {
    	return mBasketItemCount;
    }
    public void setRecentlyViewedId(long recentlyViewedId) {
    	mRecentlyViewedId = recentlyViewedId;
    	mRecentlyViewedIdDirty = true;
    }
    
    public long getRecentlyViewedId() {
    	return mRecentlyViewedId;
    }
    public void setRecentlyViewedLastAccessed(long recentlyViewedLastAccessed) {
    	mRecentlyViewedLastAccessed = recentlyViewedLastAccessed;
    	mRecentlyViewedLastAccessedDirty = true;
    }
    
    public long getRecentlyViewedLastAccessed() {
    	return mRecentlyViewedLastAccessed;
    }
    public void setRecentlyViewedQuery(String recentlyViewedQuery) {
    	mRecentlyViewedQuery = recentlyViewedQuery;
    	mRecentlyViewedQueryDirty = true;
    }
    
    public String getRecentlyViewedQuery() {
    	return mRecentlyViewedQuery;
    }
    
    public RestaurantsAndBasketRecord() {
    	super(RestaurantsAndBasket.CONTENT_URI);
	}
	
	private RestaurantsAndBasketRecord(Parcel in) {
    	super(RestaurantsAndBasket.CONTENT_URI);
    	
		setId(in.readLong());
		
		mJeid = in.readLong();
		mName = in.readString();
		mUniqueName = in.readString();
		mDescription = in.readString();
		mAddress = in.readString();
		mCity = in.readString();
		mPostcode = in.readString();
		mLatitude = in.readDouble();
		mLongitude = in.readDouble();
		mLogoStandardResUrl = in.readString();
		mCuisines = in.readString();
		mDeals = in.readString();
		mMaxDiscount = in.readLong();
		mDefaultDisplayRank = in.readLong();
		mDriveDistance = in.readDouble();
		mIsHalal = (in.readInt() > 0);
		mIsNew = (in.readInt() > 0);
		mIsOpenNow = (in.readInt() > 0);
		mIsOpenNowForCollection = (in.readInt() > 0);
		mIsOpenNowForDelivery = (in.readInt() > 0);
		mIsSponsored = (in.readInt() > 0);
		mIsTemporarilyOffline = (in.readInt() > 0);
		mRating = in.readDouble();
		mNumRatings = in.readLong();
		mOpeningTime = in.readLong();
		mReasonWhyTemporarilyOffline = in.readString();
		mSearchQuery = in.readString();
		mHasDeals = (in.readInt() > 0);
		mDealDisplayRank = in.readLong();
		mBasketId = in.readLong();
		mBasketJeid = in.readString();
		mBasketTotal = in.readDouble();
		mBasketSubTotal = in.readDouble();
		mBasketDiscount = in.readDouble();
		mBasketMultibuyDiscount = in.readDouble();
		mBasketDeliveryCharge = in.readDouble();
		mBasketOrderable = (in.readInt() > 0);
		mBasketItemCount = in.readLong();
		mRecentlyViewedId = in.readLong();
		mRecentlyViewedLastAccessed = in.readLong();
		mRecentlyViewedQuery = in.readString();
		
		boolean[] dirtyFlags = new boolean[41];
		in.readBooleanArray(dirtyFlags);
		mJeidDirty = dirtyFlags[0];
		mNameDirty = dirtyFlags[1];
		mUniqueNameDirty = dirtyFlags[2];
		mDescriptionDirty = dirtyFlags[3];
		mAddressDirty = dirtyFlags[4];
		mCityDirty = dirtyFlags[5];
		mPostcodeDirty = dirtyFlags[6];
		mLatitudeDirty = dirtyFlags[7];
		mLongitudeDirty = dirtyFlags[8];
		mLogoStandardResUrlDirty = dirtyFlags[9];
		mCuisinesDirty = dirtyFlags[10];
		mDealsDirty = dirtyFlags[11];
		mMaxDiscountDirty = dirtyFlags[12];
		mDefaultDisplayRankDirty = dirtyFlags[13];
		mDriveDistanceDirty = dirtyFlags[14];
		mIsHalalDirty = dirtyFlags[15];
		mIsNewDirty = dirtyFlags[16];
		mIsOpenNowDirty = dirtyFlags[17];
		mIsOpenNowForCollectionDirty = dirtyFlags[18];
		mIsOpenNowForDeliveryDirty = dirtyFlags[19];
		mIsSponsoredDirty = dirtyFlags[20];
		mIsTemporarilyOfflineDirty = dirtyFlags[21];
		mRatingDirty = dirtyFlags[22];
		mNumRatingsDirty = dirtyFlags[23];
		mOpeningTimeDirty = dirtyFlags[24];
		mReasonWhyTemporarilyOfflineDirty = dirtyFlags[25];
		mSearchQueryDirty = dirtyFlags[26];
		mHasDealsDirty = dirtyFlags[27];
		mDealDisplayRankDirty = dirtyFlags[28];
		mBasketIdDirty = dirtyFlags[29];
		mBasketJeidDirty = dirtyFlags[30];
		mBasketTotalDirty = dirtyFlags[31];
		mBasketSubTotalDirty = dirtyFlags[32];
		mBasketDiscountDirty = dirtyFlags[33];
		mBasketMultibuyDiscountDirty = dirtyFlags[34];
		mBasketDeliveryChargeDirty = dirtyFlags[35];
		mBasketOrderableDirty = dirtyFlags[36];
		mBasketItemCountDirty = dirtyFlags[37];
		mRecentlyViewedIdDirty = dirtyFlags[38];
		mRecentlyViewedLastAccessedDirty = dirtyFlags[39];
		mRecentlyViewedQueryDirty = dirtyFlags[40];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mJeid);
		dest.writeString(mName);
		dest.writeString(mUniqueName);
		dest.writeString(mDescription);
		dest.writeString(mAddress);
		dest.writeString(mCity);
		dest.writeString(mPostcode);
		dest.writeDouble(mLatitude);
		dest.writeDouble(mLongitude);
		dest.writeString(mLogoStandardResUrl);
		dest.writeString(mCuisines);
		dest.writeString(mDeals);
		dest.writeLong(mMaxDiscount);
		dest.writeLong(mDefaultDisplayRank);
		dest.writeDouble(mDriveDistance);
		dest.writeInt(mIsHalal ? 1 : 0);
		dest.writeInt(mIsNew ? 1 : 0);
		dest.writeInt(mIsOpenNow ? 1 : 0);
		dest.writeInt(mIsOpenNowForCollection ? 1 : 0);
		dest.writeInt(mIsOpenNowForDelivery ? 1 : 0);
		dest.writeInt(mIsSponsored ? 1 : 0);
		dest.writeInt(mIsTemporarilyOffline ? 1 : 0);
		dest.writeDouble(mRating);
		dest.writeLong(mNumRatings);
		dest.writeLong(mOpeningTime);
		dest.writeString(mReasonWhyTemporarilyOffline);
		dest.writeString(mSearchQuery);
		dest.writeInt(mHasDeals ? 1 : 0);
		dest.writeLong(mDealDisplayRank);
		dest.writeLong(mBasketId);
		dest.writeString(mBasketJeid);
		dest.writeDouble(mBasketTotal);
		dest.writeDouble(mBasketSubTotal);
		dest.writeDouble(mBasketDiscount);
		dest.writeDouble(mBasketMultibuyDiscount);
		dest.writeDouble(mBasketDeliveryCharge);
		dest.writeInt(mBasketOrderable ? 1 : 0);
		dest.writeLong(mBasketItemCount);
		dest.writeLong(mRecentlyViewedId);
		dest.writeLong(mRecentlyViewedLastAccessed);
		dest.writeString(mRecentlyViewedQuery);
		dest.writeBooleanArray(new boolean[] {
			mJeidDirty,
			mNameDirty,
			mUniqueNameDirty,
			mDescriptionDirty,
			mAddressDirty,
			mCityDirty,
			mPostcodeDirty,
			mLatitudeDirty,
			mLongitudeDirty,
			mLogoStandardResUrlDirty,
			mCuisinesDirty,
			mDealsDirty,
			mMaxDiscountDirty,
			mDefaultDisplayRankDirty,
			mDriveDistanceDirty,
			mIsHalalDirty,
			mIsNewDirty,
			mIsOpenNowDirty,
			mIsOpenNowForCollectionDirty,
			mIsOpenNowForDeliveryDirty,
			mIsSponsoredDirty,
			mIsTemporarilyOfflineDirty,
			mRatingDirty,
			mNumRatingsDirty,
			mOpeningTimeDirty,
			mReasonWhyTemporarilyOfflineDirty,
			mSearchQueryDirty,
			mHasDealsDirty,
			mDealDisplayRankDirty,
			mBasketIdDirty,
			mBasketJeidDirty,
			mBasketTotalDirty,
			mBasketSubTotalDirty,
			mBasketDiscountDirty,
			mBasketMultibuyDiscountDirty,
			mBasketDeliveryChargeDirty,
			mBasketOrderableDirty,
			mBasketItemCountDirty,
			mRecentlyViewedIdDirty,
			mRecentlyViewedLastAccessedDirty,
			mRecentlyViewedQueryDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = RestaurantsAndBasket.newBuilder();

		if(mJeidDirty) {
			builder.setJeid(mJeid);
		}
		if(mNameDirty) {
			builder.setName(mName);
		}
		if(mUniqueNameDirty) {
			builder.setUniqueName(mUniqueName);
		}
		if(mDescriptionDirty) {
			builder.setDescription(mDescription);
		}
		if(mAddressDirty) {
			builder.setAddress(mAddress);
		}
		if(mCityDirty) {
			builder.setCity(mCity);
		}
		if(mPostcodeDirty) {
			builder.setPostcode(mPostcode);
		}
		if(mLatitudeDirty) {
			builder.setLatitude(mLatitude);
		}
		if(mLongitudeDirty) {
			builder.setLongitude(mLongitude);
		}
		if(mLogoStandardResUrlDirty) {
			builder.setLogoStandardResUrl(mLogoStandardResUrl);
		}
		if(mCuisinesDirty) {
			builder.setCuisines(mCuisines);
		}
		if(mDealsDirty) {
			builder.setDeals(mDeals);
		}
		if(mMaxDiscountDirty) {
			builder.setMaxDiscount(mMaxDiscount);
		}
		if(mDefaultDisplayRankDirty) {
			builder.setDefaultDisplayRank(mDefaultDisplayRank);
		}
		if(mDriveDistanceDirty) {
			builder.setDriveDistance(mDriveDistance);
		}
		if(mIsHalalDirty) {
			builder.setIsHalal(mIsHalal);
		}
		if(mIsNewDirty) {
			builder.setIsNew(mIsNew);
		}
		if(mIsOpenNowDirty) {
			builder.setIsOpenNow(mIsOpenNow);
		}
		if(mIsOpenNowForCollectionDirty) {
			builder.setIsOpenNowForCollection(mIsOpenNowForCollection);
		}
		if(mIsOpenNowForDeliveryDirty) {
			builder.setIsOpenNowForDelivery(mIsOpenNowForDelivery);
		}
		if(mIsSponsoredDirty) {
			builder.setIsSponsored(mIsSponsored);
		}
		if(mIsTemporarilyOfflineDirty) {
			builder.setIsTemporarilyOffline(mIsTemporarilyOffline);
		}
		if(mRatingDirty) {
			builder.setRating(mRating);
		}
		if(mNumRatingsDirty) {
			builder.setNumRatings(mNumRatings);
		}
		if(mOpeningTimeDirty) {
			builder.setOpeningTime(mOpeningTime);
		}
		if(mReasonWhyTemporarilyOfflineDirty) {
			builder.setReasonWhyTemporarilyOffline(mReasonWhyTemporarilyOffline);
		}
		if(mSearchQueryDirty) {
			builder.setSearchQuery(mSearchQuery);
		}
		if(mHasDealsDirty) {
			builder.setHasDeals(mHasDeals);
		}
		if(mDealDisplayRankDirty) {
			builder.setDealDisplayRank(mDealDisplayRank);
		}
		if(mBasketIdDirty) {
			builder.setBasketId(mBasketId);
		}
		if(mBasketJeidDirty) {
			builder.setBasketJeid(mBasketJeid);
		}
		if(mBasketTotalDirty) {
			builder.setBasketTotal(mBasketTotal);
		}
		if(mBasketSubTotalDirty) {
			builder.setBasketSubTotal(mBasketSubTotal);
		}
		if(mBasketDiscountDirty) {
			builder.setBasketDiscount(mBasketDiscount);
		}
		if(mBasketMultibuyDiscountDirty) {
			builder.setBasketMultibuyDiscount(mBasketMultibuyDiscount);
		}
		if(mBasketDeliveryChargeDirty) {
			builder.setBasketDeliveryCharge(mBasketDeliveryCharge);
		}
		if(mBasketOrderableDirty) {
			builder.setBasketOrderable(mBasketOrderable);
		}
		if(mBasketItemCountDirty) {
			builder.setBasketItemCount(mBasketItemCount);
		}
		if(mRecentlyViewedIdDirty) {
			builder.setRecentlyViewedId(mRecentlyViewedId);
		}
		if(mRecentlyViewedLastAccessedDirty) {
			builder.setRecentlyViewedLastAccessed(mRecentlyViewedLastAccessed);
		}
		if(mRecentlyViewedQueryDirty) {
			builder.setRecentlyViewedQuery(mRecentlyViewedQuery);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mJeidDirty = dirty;
		mNameDirty = dirty;
		mUniqueNameDirty = dirty;
		mDescriptionDirty = dirty;
		mAddressDirty = dirty;
		mCityDirty = dirty;
		mPostcodeDirty = dirty;
		mLatitudeDirty = dirty;
		mLongitudeDirty = dirty;
		mLogoStandardResUrlDirty = dirty;
		mCuisinesDirty = dirty;
		mDealsDirty = dirty;
		mMaxDiscountDirty = dirty;
		mDefaultDisplayRankDirty = dirty;
		mDriveDistanceDirty = dirty;
		mIsHalalDirty = dirty;
		mIsNewDirty = dirty;
		mIsOpenNowDirty = dirty;
		mIsOpenNowForCollectionDirty = dirty;
		mIsOpenNowForDeliveryDirty = dirty;
		mIsSponsoredDirty = dirty;
		mIsTemporarilyOfflineDirty = dirty;
		mRatingDirty = dirty;
		mNumRatingsDirty = dirty;
		mOpeningTimeDirty = dirty;
		mReasonWhyTemporarilyOfflineDirty = dirty;
		mSearchQueryDirty = dirty;
		mHasDealsDirty = dirty;
		mDealDisplayRankDirty = dirty;
		mBasketIdDirty = dirty;
		mBasketJeidDirty = dirty;
		mBasketTotalDirty = dirty;
		mBasketSubTotalDirty = dirty;
		mBasketDiscountDirty = dirty;
		mBasketMultibuyDiscountDirty = dirty;
		mBasketDeliveryChargeDirty = dirty;
		mBasketOrderableDirty = dirty;
		mBasketItemCountDirty = dirty;
		mRecentlyViewedIdDirty = dirty;
		mRecentlyViewedLastAccessedDirty = dirty;
		mRecentlyViewedQueryDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setJeid(c.getLong(Indices.JEID));
		setName(c.getString(Indices.NAME));
		setUniqueName(c.getString(Indices.UNIQUE_NAME));
		setDescription(c.getString(Indices.DESCRIPTION));
		setAddress(c.getString(Indices.ADDRESS));
		setCity(c.getString(Indices.CITY));
		setPostcode(c.getString(Indices.POSTCODE));
		setLatitude(c.getDouble(Indices.LATITUDE));
		setLongitude(c.getDouble(Indices.LONGITUDE));
		setLogoStandardResUrl(c.getString(Indices.LOGO_STANDARD_RES_URL));
		setCuisines(c.getString(Indices.CUISINES));
		setDeals(c.getString(Indices.DEALS));
		setMaxDiscount(c.getLong(Indices.MAX_DISCOUNT));
		setDefaultDisplayRank(c.getLong(Indices.DEFAULT_DISPLAY_RANK));
		setDriveDistance(c.getDouble(Indices.DRIVE_DISTANCE));
		setIsHalal(c.getInt(Indices.IS_HALAL) > 0);
		setIsNew(c.getInt(Indices.IS_NEW) > 0);
		setIsOpenNow(c.getInt(Indices.IS_OPEN_NOW) > 0);
		setIsOpenNowForCollection(c.getInt(Indices.IS_OPEN_NOW_FOR_COLLECTION) > 0);
		setIsOpenNowForDelivery(c.getInt(Indices.IS_OPEN_NOW_FOR_DELIVERY) > 0);
		setIsSponsored(c.getInt(Indices.IS_SPONSORED) > 0);
		setIsTemporarilyOffline(c.getInt(Indices.IS_TEMPORARILY_OFFLINE) > 0);
		setRating(c.getDouble(Indices.RATING));
		setNumRatings(c.getLong(Indices.NUM_RATINGS));
		setOpeningTime(c.getLong(Indices.OPENING_TIME));
		setReasonWhyTemporarilyOffline(c.getString(Indices.REASON_WHY_TEMPORARILY_OFFLINE));
		setSearchQuery(c.getString(Indices.SEARCH_QUERY));
		setHasDeals(c.getInt(Indices.HAS_DEALS) > 0);
		setDealDisplayRank(c.getLong(Indices.DEAL_DISPLAY_RANK));
		setBasketId(c.getLong(Indices.BASKET_ID));
		setBasketJeid(c.getString(Indices.BASKET_JEID));
		setBasketTotal(c.getDouble(Indices.BASKET_TOTAL));
		setBasketSubTotal(c.getDouble(Indices.BASKET_SUB_TOTAL));
		setBasketDiscount(c.getDouble(Indices.BASKET_DISCOUNT));
		setBasketMultibuyDiscount(c.getDouble(Indices.BASKET_MULTIBUY_DISCOUNT));
		setBasketDeliveryCharge(c.getDouble(Indices.BASKET_DELIVERY_CHARGE));
		setBasketOrderable(c.getInt(Indices.BASKET_ORDERABLE) > 0);
		setBasketItemCount(c.getLong(Indices.BASKET_ITEM_COUNT));
		setRecentlyViewedId(c.getLong(Indices.RECENTLY_VIEWED_ID));
		setRecentlyViewedLastAccessed(c.getLong(Indices.RECENTLY_VIEWED_LAST_ACCESSED));
		setRecentlyViewedQuery(c.getString(Indices.RECENTLY_VIEWED_QUERY));
	}
	
	public static RestaurantsAndBasketRecord fromCursor(Cursor c) {
	    RestaurantsAndBasketRecord item = new RestaurantsAndBasketRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static RestaurantsAndBasketRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(RestaurantsAndBasketRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static RestaurantsAndBasketRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(RestaurantsAndBasket.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
