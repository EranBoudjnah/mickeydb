/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.ProductsInCategories;
import com.justeat.TakeawaysDBContract.ProductsInCategories.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class ProductsInCategoriesRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<ProductsInCategoriesRecord> sFactory = new ActiveRecordFactory<ProductsInCategoriesRecord>() {
		@Override
		public ProductsInCategoriesRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return ProductsInCategories.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<ProductsInCategoriesRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<ProductsInCategoriesRecord> CREATOR 
    	= new Parcelable.Creator<ProductsInCategoriesRecord>() {
        public ProductsInCategoriesRecord createFromParcel(Parcel in) {
            return new ProductsInCategoriesRecord(in);
        }

        public ProductsInCategoriesRecord[] newArray(int size) {
            return new ProductsInCategoriesRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	ProductsInCategories._ID,
    	ProductsInCategories.RESTAURANT_JEID,
    	ProductsInCategories.MENU_JEID,
    	ProductsInCategories.CATEGORY_JEID,
    	ProductsInCategories.PRODUCT_JEID,
    	ProductsInCategories.GROUP_KEY,
    	ProductsInCategories.NAME,
    	ProductsInCategories.DESCRIPTION,
    	ProductsInCategories.PRICE,
    	ProductsInCategories.IS_COMPLEX,
    	ProductsInCategories.HAS_SYNONYMS,
    	ProductsInCategories.CONTAINS_NUTS,
    	ProductsInCategories.IS_SPICY,
    	ProductsInCategories.IS_VEGETARIAN,
    	ProductsInCategories.QUANTITY,
    	ProductsInCategories.SORT_KEY,
    	ProductsInCategories.DESCRIPTOR
    };
    
    public interface Indices {
    	int _ID = 0;
    	int RESTAURANT_JEID = 1;
    	int MENU_JEID = 2;
    	int CATEGORY_JEID = 3;
    	int PRODUCT_JEID = 4;
    	int GROUP_KEY = 5;
    	int NAME = 6;
    	int DESCRIPTION = 7;
    	int PRICE = 8;
    	int IS_COMPLEX = 9;
    	int HAS_SYNONYMS = 10;
    	int CONTAINS_NUTS = 11;
    	int IS_SPICY = 12;
    	int IS_VEGETARIAN = 13;
    	int QUANTITY = 14;
    	int SORT_KEY = 15;
    	int DESCRIPTOR = 16;
    }
    
    private long mRestaurantJeid;
    private boolean mRestaurantJeidDirty;
    private long mMenuJeid;
    private boolean mMenuJeidDirty;
    private long mCategoryJeid;
    private boolean mCategoryJeidDirty;
    private long mProductJeid;
    private boolean mProductJeidDirty;
    private String mGroupKey;
    private boolean mGroupKeyDirty;
    private String mName;
    private boolean mNameDirty;
    private String mDescription;
    private boolean mDescriptionDirty;
    private String mPrice;
    private boolean mPriceDirty;
    private boolean mIsComplex;
    private boolean mIsComplexDirty;
    private long mHasSynonyms;
    private boolean mHasSynonymsDirty;
    private String mContainsNuts;
    private boolean mContainsNutsDirty;
    private String mIsSpicy;
    private boolean mIsSpicyDirty;
    private String mIsVegetarian;
    private boolean mIsVegetarianDirty;
    private long mQuantity;
    private boolean mQuantityDirty;
    private long mSortKey;
    private boolean mSortKeyDirty;
    private String mDescriptor;
    private boolean mDescriptorDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setRestaurantJeid(long restaurantJeid) {
    	mRestaurantJeid = restaurantJeid;
    	mRestaurantJeidDirty = true;
    }
    
    public long getRestaurantJeid() {
    	return mRestaurantJeid;
    }
    public void setMenuJeid(long menuJeid) {
    	mMenuJeid = menuJeid;
    	mMenuJeidDirty = true;
    }
    
    public long getMenuJeid() {
    	return mMenuJeid;
    }
    public void setCategoryJeid(long categoryJeid) {
    	mCategoryJeid = categoryJeid;
    	mCategoryJeidDirty = true;
    }
    
    public long getCategoryJeid() {
    	return mCategoryJeid;
    }
    public void setProductJeid(long productJeid) {
    	mProductJeid = productJeid;
    	mProductJeidDirty = true;
    }
    
    public long getProductJeid() {
    	return mProductJeid;
    }
    public void setGroupKey(String groupKey) {
    	mGroupKey = groupKey;
    	mGroupKeyDirty = true;
    }
    
    public String getGroupKey() {
    	return mGroupKey;
    }
    public void setName(String name) {
    	mName = name;
    	mNameDirty = true;
    }
    
    public String getName() {
    	return mName;
    }
    public void setDescription(String description) {
    	mDescription = description;
    	mDescriptionDirty = true;
    }
    
    public String getDescription() {
    	return mDescription;
    }
    public void setPrice(String price) {
    	mPrice = price;
    	mPriceDirty = true;
    }
    
    public String getPrice() {
    	return mPrice;
    }
    public void setIsComplex(boolean isComplex) {
    	mIsComplex = isComplex;
    	mIsComplexDirty = true;
    }
    
    public boolean getIsComplex() {
    	return mIsComplex;
    }
    public void setHasSynonyms(long hasSynonyms) {
    	mHasSynonyms = hasSynonyms;
    	mHasSynonymsDirty = true;
    }
    
    public long getHasSynonyms() {
    	return mHasSynonyms;
    }
    public void setContainsNuts(String containsNuts) {
    	mContainsNuts = containsNuts;
    	mContainsNutsDirty = true;
    }
    
    public String getContainsNuts() {
    	return mContainsNuts;
    }
    public void setIsSpicy(String isSpicy) {
    	mIsSpicy = isSpicy;
    	mIsSpicyDirty = true;
    }
    
    public String getIsSpicy() {
    	return mIsSpicy;
    }
    public void setIsVegetarian(String isVegetarian) {
    	mIsVegetarian = isVegetarian;
    	mIsVegetarianDirty = true;
    }
    
    public String getIsVegetarian() {
    	return mIsVegetarian;
    }
    public void setQuantity(long quantity) {
    	mQuantity = quantity;
    	mQuantityDirty = true;
    }
    
    public long getQuantity() {
    	return mQuantity;
    }
    public void setSortKey(long sortKey) {
    	mSortKey = sortKey;
    	mSortKeyDirty = true;
    }
    
    public long getSortKey() {
    	return mSortKey;
    }
    public void setDescriptor(String descriptor) {
    	mDescriptor = descriptor;
    	mDescriptorDirty = true;
    }
    
    public String getDescriptor() {
    	return mDescriptor;
    }
    
    public ProductsInCategoriesRecord() {
    	super(ProductsInCategories.CONTENT_URI);
	}
	
	private ProductsInCategoriesRecord(Parcel in) {
    	super(ProductsInCategories.CONTENT_URI);
    	
		setId(in.readLong());
		
		mRestaurantJeid = in.readLong();
		mMenuJeid = in.readLong();
		mCategoryJeid = in.readLong();
		mProductJeid = in.readLong();
		mGroupKey = in.readString();
		mName = in.readString();
		mDescription = in.readString();
		mPrice = in.readString();
		mIsComplex = (in.readInt() > 0);
		mHasSynonyms = in.readLong();
		mContainsNuts = in.readString();
		mIsSpicy = in.readString();
		mIsVegetarian = in.readString();
		mQuantity = in.readLong();
		mSortKey = in.readLong();
		mDescriptor = in.readString();
		
		boolean[] dirtyFlags = new boolean[16];
		in.readBooleanArray(dirtyFlags);
		mRestaurantJeidDirty = dirtyFlags[0];
		mMenuJeidDirty = dirtyFlags[1];
		mCategoryJeidDirty = dirtyFlags[2];
		mProductJeidDirty = dirtyFlags[3];
		mGroupKeyDirty = dirtyFlags[4];
		mNameDirty = dirtyFlags[5];
		mDescriptionDirty = dirtyFlags[6];
		mPriceDirty = dirtyFlags[7];
		mIsComplexDirty = dirtyFlags[8];
		mHasSynonymsDirty = dirtyFlags[9];
		mContainsNutsDirty = dirtyFlags[10];
		mIsSpicyDirty = dirtyFlags[11];
		mIsVegetarianDirty = dirtyFlags[12];
		mQuantityDirty = dirtyFlags[13];
		mSortKeyDirty = dirtyFlags[14];
		mDescriptorDirty = dirtyFlags[15];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mRestaurantJeid);
		dest.writeLong(mMenuJeid);
		dest.writeLong(mCategoryJeid);
		dest.writeLong(mProductJeid);
		dest.writeString(mGroupKey);
		dest.writeString(mName);
		dest.writeString(mDescription);
		dest.writeString(mPrice);
		dest.writeInt(mIsComplex ? 1 : 0);
		dest.writeLong(mHasSynonyms);
		dest.writeString(mContainsNuts);
		dest.writeString(mIsSpicy);
		dest.writeString(mIsVegetarian);
		dest.writeLong(mQuantity);
		dest.writeLong(mSortKey);
		dest.writeString(mDescriptor);
		dest.writeBooleanArray(new boolean[] {
			mRestaurantJeidDirty,
			mMenuJeidDirty,
			mCategoryJeidDirty,
			mProductJeidDirty,
			mGroupKeyDirty,
			mNameDirty,
			mDescriptionDirty,
			mPriceDirty,
			mIsComplexDirty,
			mHasSynonymsDirty,
			mContainsNutsDirty,
			mIsSpicyDirty,
			mIsVegetarianDirty,
			mQuantityDirty,
			mSortKeyDirty,
			mDescriptorDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = ProductsInCategories.newBuilder();

		if(mRestaurantJeidDirty) {
			builder.setRestaurantJeid(mRestaurantJeid);
		}
		if(mMenuJeidDirty) {
			builder.setMenuJeid(mMenuJeid);
		}
		if(mCategoryJeidDirty) {
			builder.setCategoryJeid(mCategoryJeid);
		}
		if(mProductJeidDirty) {
			builder.setProductJeid(mProductJeid);
		}
		if(mGroupKeyDirty) {
			builder.setGroupKey(mGroupKey);
		}
		if(mNameDirty) {
			builder.setName(mName);
		}
		if(mDescriptionDirty) {
			builder.setDescription(mDescription);
		}
		if(mPriceDirty) {
			builder.setPrice(mPrice);
		}
		if(mIsComplexDirty) {
			builder.setIsComplex(mIsComplex);
		}
		if(mHasSynonymsDirty) {
			builder.setHasSynonyms(mHasSynonyms);
		}
		if(mContainsNutsDirty) {
			builder.setContainsNuts(mContainsNuts);
		}
		if(mIsSpicyDirty) {
			builder.setIsSpicy(mIsSpicy);
		}
		if(mIsVegetarianDirty) {
			builder.setIsVegetarian(mIsVegetarian);
		}
		if(mQuantityDirty) {
			builder.setQuantity(mQuantity);
		}
		if(mSortKeyDirty) {
			builder.setSortKey(mSortKey);
		}
		if(mDescriptorDirty) {
			builder.setDescriptor(mDescriptor);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mRestaurantJeidDirty = dirty;
		mMenuJeidDirty = dirty;
		mCategoryJeidDirty = dirty;
		mProductJeidDirty = dirty;
		mGroupKeyDirty = dirty;
		mNameDirty = dirty;
		mDescriptionDirty = dirty;
		mPriceDirty = dirty;
		mIsComplexDirty = dirty;
		mHasSynonymsDirty = dirty;
		mContainsNutsDirty = dirty;
		mIsSpicyDirty = dirty;
		mIsVegetarianDirty = dirty;
		mQuantityDirty = dirty;
		mSortKeyDirty = dirty;
		mDescriptorDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setRestaurantJeid(c.getLong(Indices.RESTAURANT_JEID));
		setMenuJeid(c.getLong(Indices.MENU_JEID));
		setCategoryJeid(c.getLong(Indices.CATEGORY_JEID));
		setProductJeid(c.getLong(Indices.PRODUCT_JEID));
		setGroupKey(c.getString(Indices.GROUP_KEY));
		setName(c.getString(Indices.NAME));
		setDescription(c.getString(Indices.DESCRIPTION));
		setPrice(c.getString(Indices.PRICE));
		setIsComplex(c.getInt(Indices.IS_COMPLEX) > 0);
		setHasSynonyms(c.getLong(Indices.HAS_SYNONYMS));
		setContainsNuts(c.getString(Indices.CONTAINS_NUTS));
		setIsSpicy(c.getString(Indices.IS_SPICY));
		setIsVegetarian(c.getString(Indices.IS_VEGETARIAN));
		setQuantity(c.getLong(Indices.QUANTITY));
		setSortKey(c.getLong(Indices.SORT_KEY));
		setDescriptor(c.getString(Indices.DESCRIPTOR));
	}
	
	public static ProductsInCategoriesRecord fromCursor(Cursor c) {
	    ProductsInCategoriesRecord item = new ProductsInCategoriesRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static ProductsInCategoriesRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(ProductsInCategoriesRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static ProductsInCategoriesRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(ProductsInCategories.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
