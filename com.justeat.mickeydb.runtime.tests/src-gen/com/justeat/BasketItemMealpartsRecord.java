/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.BasketItemMealparts;
import com.justeat.TakeawaysDBContract.BasketItemMealparts.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class BasketItemMealpartsRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<BasketItemMealpartsRecord> sFactory = new ActiveRecordFactory<BasketItemMealpartsRecord>() {
		@Override
		public BasketItemMealpartsRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return BasketItemMealparts.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<BasketItemMealpartsRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<BasketItemMealpartsRecord> CREATOR 
    	= new Parcelable.Creator<BasketItemMealpartsRecord>() {
        public BasketItemMealpartsRecord createFromParcel(Parcel in) {
            return new BasketItemMealpartsRecord(in);
        }

        public BasketItemMealpartsRecord[] newArray(int size) {
            return new BasketItemMealpartsRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	BasketItemMealparts._ID,
    	BasketItemMealparts.BASKET_ITEM_ID,
    	BasketItemMealparts.MEALPART_JEID,
    	BasketItemMealparts.MEALPART_NAME,
    	BasketItemMealparts.MEALPART_GROUP_JEID,
    	BasketItemMealparts.HAS_ACCESSORIES,
    	BasketItemMealparts.HAS_REQUIRED_ACCESSORIES
    };
    
    public interface Indices {
    	int _ID = 0;
    	int BASKET_ITEM_ID = 1;
    	int MEALPART_JEID = 2;
    	int MEALPART_NAME = 3;
    	int MEALPART_GROUP_JEID = 4;
    	int HAS_ACCESSORIES = 5;
    	int HAS_REQUIRED_ACCESSORIES = 6;
    }
    
    private long mBasketItemId;
    private boolean mBasketItemIdDirty;
    private long mMealpartJeid;
    private boolean mMealpartJeidDirty;
    private String mMealpartName;
    private boolean mMealpartNameDirty;
    private long mMealpartGroupJeid;
    private boolean mMealpartGroupJeidDirty;
    private boolean mHasAccessories;
    private boolean mHasAccessoriesDirty;
    private boolean mHasRequiredAccessories;
    private boolean mHasRequiredAccessoriesDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setBasketItemId(long basketItemId) {
    	mBasketItemId = basketItemId;
    	mBasketItemIdDirty = true;
    }
    
    public long getBasketItemId() {
    	return mBasketItemId;
    }
    
    public void setMealpartJeid(long mealpartJeid) {
    	mMealpartJeid = mealpartJeid;
    	mMealpartJeidDirty = true;
    }
    
    public long getMealpartJeid() {
    	return mMealpartJeid;
    }
    
    public void setMealpartName(String mealpartName) {
    	mMealpartName = mealpartName;
    	mMealpartNameDirty = true;
    }
    
    public String getMealpartName() {
    	return mMealpartName;
    }
    
    public void setMealpartGroupJeid(long mealpartGroupJeid) {
    	mMealpartGroupJeid = mealpartGroupJeid;
    	mMealpartGroupJeidDirty = true;
    }
    
    public long getMealpartGroupJeid() {
    	return mMealpartGroupJeid;
    }
    
    public void setHasAccessories(boolean hasAccessories) {
    	mHasAccessories = hasAccessories;
    	mHasAccessoriesDirty = true;
    }
    
    public boolean getHasAccessories() {
    	return mHasAccessories;
    }
    
    public void setHasRequiredAccessories(boolean hasRequiredAccessories) {
    	mHasRequiredAccessories = hasRequiredAccessories;
    	mHasRequiredAccessoriesDirty = true;
    }
    
    public boolean getHasRequiredAccessories() {
    	return mHasRequiredAccessories;
    }
    
    
    public BasketItemMealpartsRecord() {
    	super(BasketItemMealparts.CONTENT_URI);
	}
	
	private BasketItemMealpartsRecord(Parcel in) {
    	super(BasketItemMealparts.CONTENT_URI);
    	
		setId(in.readLong());
		
		mBasketItemId = in.readLong();
		mMealpartJeid = in.readLong();
		mMealpartName = in.readString();
		mMealpartGroupJeid = in.readLong();
		mHasAccessories = (in.readInt() > 0);
		mHasRequiredAccessories = (in.readInt() > 0);
		
		boolean[] dirtyFlags = new boolean[6];
		in.readBooleanArray(dirtyFlags);
		mBasketItemIdDirty = dirtyFlags[0];
		mMealpartJeidDirty = dirtyFlags[1];
		mMealpartNameDirty = dirtyFlags[2];
		mMealpartGroupJeidDirty = dirtyFlags[3];
		mHasAccessoriesDirty = dirtyFlags[4];
		mHasRequiredAccessoriesDirty = dirtyFlags[5];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mBasketItemId);
		dest.writeLong(mMealpartJeid);
		dest.writeString(mMealpartName);
		dest.writeLong(mMealpartGroupJeid);
		dest.writeInt(mHasAccessories ? 1 : 0);
		dest.writeInt(mHasRequiredAccessories ? 1 : 0);
		dest.writeBooleanArray(new boolean[] {
			mBasketItemIdDirty,
			mMealpartJeidDirty,
			mMealpartNameDirty,
			mMealpartGroupJeidDirty,
			mHasAccessoriesDirty,
			mHasRequiredAccessoriesDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = BasketItemMealparts.newBuilder();

		if(mBasketItemIdDirty) {
			builder.setBasketItemId(mBasketItemId);
		}
		if(mMealpartJeidDirty) {
			builder.setMealpartJeid(mMealpartJeid);
		}
		if(mMealpartNameDirty) {
			builder.setMealpartName(mMealpartName);
		}
		if(mMealpartGroupJeidDirty) {
			builder.setMealpartGroupJeid(mMealpartGroupJeid);
		}
		if(mHasAccessoriesDirty) {
			builder.setHasAccessories(mHasAccessories);
		}
		if(mHasRequiredAccessoriesDirty) {
			builder.setHasRequiredAccessories(mHasRequiredAccessories);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mBasketItemIdDirty = dirty;
		mMealpartJeidDirty = dirty;
		mMealpartNameDirty = dirty;
		mMealpartGroupJeidDirty = dirty;
		mHasAccessoriesDirty = dirty;
		mHasRequiredAccessoriesDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setBasketItemId(c.getLong(Indices.BASKET_ITEM_ID));
		setMealpartJeid(c.getLong(Indices.MEALPART_JEID));
		setMealpartName(c.getString(Indices.MEALPART_NAME));
		setMealpartGroupJeid(c.getLong(Indices.MEALPART_GROUP_JEID));
		setHasAccessories(c.getInt(Indices.HAS_ACCESSORIES) > 0);
		setHasRequiredAccessories(c.getInt(Indices.HAS_REQUIRED_ACCESSORIES) > 0);
	}
	
	public static BasketItemMealpartsRecord fromCursor(Cursor c) {
	    BasketItemMealpartsRecord item = new BasketItemMealpartsRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static BasketItemMealpartsRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(BasketItemMealpartsRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static BasketItemMealpartsRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(BasketItemMealparts.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
