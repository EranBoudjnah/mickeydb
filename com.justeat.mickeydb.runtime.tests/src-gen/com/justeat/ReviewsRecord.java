/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.Reviews;
import com.justeat.TakeawaysDBContract.Reviews.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class ReviewsRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<ReviewsRecord> sFactory = new ActiveRecordFactory<ReviewsRecord>() {
		@Override
		public ReviewsRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return Reviews.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<ReviewsRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<ReviewsRecord> CREATOR 
    	= new Parcelable.Creator<ReviewsRecord>() {
        public ReviewsRecord createFromParcel(Parcel in) {
            return new ReviewsRecord(in);
        }

        public ReviewsRecord[] newArray(int size) {
            return new ReviewsRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	Reviews._ID,
    	Reviews.RESTAURANT_ID,
    	Reviews.USER_ID,
    	Reviews.CUSTOMER_CITY,
    	Reviews.CUSTOMER_COMMENTS,
    	Reviews.CUSTOMER_NAME,
    	Reviews.RATE_DATE,
    	Reviews.RATING_AVERAGE,
    	Reviews.RATING_AVERAGE_STARS,
    	Reviews.RESTAURANT_COMMENTS
    };
    
    public interface Indices {
    	int _ID = 0;
    	int RESTAURANT_ID = 1;
    	int USER_ID = 2;
    	int CUSTOMER_CITY = 3;
    	int CUSTOMER_COMMENTS = 4;
    	int CUSTOMER_NAME = 5;
    	int RATE_DATE = 6;
    	int RATING_AVERAGE = 7;
    	int RATING_AVERAGE_STARS = 8;
    	int RESTAURANT_COMMENTS = 9;
    }
    
    private long mRestaurantId;
    private boolean mRestaurantIdDirty;
    private long mUserId;
    private boolean mUserIdDirty;
    private String mCustomerCity;
    private boolean mCustomerCityDirty;
    private String mCustomerComments;
    private boolean mCustomerCommentsDirty;
    private String mCustomerName;
    private boolean mCustomerNameDirty;
    private long mRateDate;
    private boolean mRateDateDirty;
    private double mRatingAverage;
    private boolean mRatingAverageDirty;
    private double mRatingAverageStars;
    private boolean mRatingAverageStarsDirty;
    private String mRestaurantComments;
    private boolean mRestaurantCommentsDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setRestaurantId(long restaurantId) {
    	mRestaurantId = restaurantId;
    	mRestaurantIdDirty = true;
    }
    
    public long getRestaurantId() {
    	return mRestaurantId;
    }
    
    public void setUserId(long userId) {
    	mUserId = userId;
    	mUserIdDirty = true;
    }
    
    public long getUserId() {
    	return mUserId;
    }
    
    public void setCustomerCity(String customerCity) {
    	mCustomerCity = customerCity;
    	mCustomerCityDirty = true;
    }
    
    public String getCustomerCity() {
    	return mCustomerCity;
    }
    
    public void setCustomerComments(String customerComments) {
    	mCustomerComments = customerComments;
    	mCustomerCommentsDirty = true;
    }
    
    public String getCustomerComments() {
    	return mCustomerComments;
    }
    
    public void setCustomerName(String customerName) {
    	mCustomerName = customerName;
    	mCustomerNameDirty = true;
    }
    
    public String getCustomerName() {
    	return mCustomerName;
    }
    
    public void setRateDate(long rateDate) {
    	mRateDate = rateDate;
    	mRateDateDirty = true;
    }
    
    public long getRateDate() {
    	return mRateDate;
    }
    
    public void setRatingAverage(double ratingAverage) {
    	mRatingAverage = ratingAverage;
    	mRatingAverageDirty = true;
    }
    
    public double getRatingAverage() {
    	return mRatingAverage;
    }
    
    public void setRatingAverageStars(double ratingAverageStars) {
    	mRatingAverageStars = ratingAverageStars;
    	mRatingAverageStarsDirty = true;
    }
    
    public double getRatingAverageStars() {
    	return mRatingAverageStars;
    }
    
    public void setRestaurantComments(String restaurantComments) {
    	mRestaurantComments = restaurantComments;
    	mRestaurantCommentsDirty = true;
    }
    
    public String getRestaurantComments() {
    	return mRestaurantComments;
    }
    
    
    public ReviewsRecord() {
    	super(Reviews.CONTENT_URI);
	}
	
	private ReviewsRecord(Parcel in) {
    	super(Reviews.CONTENT_URI);
    	
		setId(in.readLong());
		
		mRestaurantId = in.readLong();
		mUserId = in.readLong();
		mCustomerCity = in.readString();
		mCustomerComments = in.readString();
		mCustomerName = in.readString();
		mRateDate = in.readLong();
		mRatingAverage = in.readDouble();
		mRatingAverageStars = in.readDouble();
		mRestaurantComments = in.readString();
		
		boolean[] dirtyFlags = new boolean[9];
		in.readBooleanArray(dirtyFlags);
		mRestaurantIdDirty = dirtyFlags[0];
		mUserIdDirty = dirtyFlags[1];
		mCustomerCityDirty = dirtyFlags[2];
		mCustomerCommentsDirty = dirtyFlags[3];
		mCustomerNameDirty = dirtyFlags[4];
		mRateDateDirty = dirtyFlags[5];
		mRatingAverageDirty = dirtyFlags[6];
		mRatingAverageStarsDirty = dirtyFlags[7];
		mRestaurantCommentsDirty = dirtyFlags[8];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mRestaurantId);
		dest.writeLong(mUserId);
		dest.writeString(mCustomerCity);
		dest.writeString(mCustomerComments);
		dest.writeString(mCustomerName);
		dest.writeLong(mRateDate);
		dest.writeDouble(mRatingAverage);
		dest.writeDouble(mRatingAverageStars);
		dest.writeString(mRestaurantComments);
		dest.writeBooleanArray(new boolean[] {
			mRestaurantIdDirty,
			mUserIdDirty,
			mCustomerCityDirty,
			mCustomerCommentsDirty,
			mCustomerNameDirty,
			mRateDateDirty,
			mRatingAverageDirty,
			mRatingAverageStarsDirty,
			mRestaurantCommentsDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = Reviews.newBuilder();

		if(mRestaurantIdDirty) {
			builder.setRestaurantId(mRestaurantId);
		}
		if(mUserIdDirty) {
			builder.setUserId(mUserId);
		}
		if(mCustomerCityDirty) {
			builder.setCustomerCity(mCustomerCity);
		}
		if(mCustomerCommentsDirty) {
			builder.setCustomerComments(mCustomerComments);
		}
		if(mCustomerNameDirty) {
			builder.setCustomerName(mCustomerName);
		}
		if(mRateDateDirty) {
			builder.setRateDate(mRateDate);
		}
		if(mRatingAverageDirty) {
			builder.setRatingAverage(mRatingAverage);
		}
		if(mRatingAverageStarsDirty) {
			builder.setRatingAverageStars(mRatingAverageStars);
		}
		if(mRestaurantCommentsDirty) {
			builder.setRestaurantComments(mRestaurantComments);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mRestaurantIdDirty = dirty;
		mUserIdDirty = dirty;
		mCustomerCityDirty = dirty;
		mCustomerCommentsDirty = dirty;
		mCustomerNameDirty = dirty;
		mRateDateDirty = dirty;
		mRatingAverageDirty = dirty;
		mRatingAverageStarsDirty = dirty;
		mRestaurantCommentsDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setRestaurantId(c.getLong(Indices.RESTAURANT_ID));
		setUserId(c.getLong(Indices.USER_ID));
		setCustomerCity(c.getString(Indices.CUSTOMER_CITY));
		setCustomerComments(c.getString(Indices.CUSTOMER_COMMENTS));
		setCustomerName(c.getString(Indices.CUSTOMER_NAME));
		setRateDate(c.getLong(Indices.RATE_DATE));
		setRatingAverage(c.getDouble(Indices.RATING_AVERAGE));
		setRatingAverageStars(c.getDouble(Indices.RATING_AVERAGE_STARS));
		setRestaurantComments(c.getString(Indices.RESTAURANT_COMMENTS));
	}
	
	public static ReviewsRecord fromCursor(Cursor c) {
	    ReviewsRecord item = new ReviewsRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static ReviewsRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(ReviewsRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static ReviewsRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(Reviews.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
