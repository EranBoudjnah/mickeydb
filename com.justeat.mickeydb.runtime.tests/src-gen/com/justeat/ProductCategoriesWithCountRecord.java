/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.ProductCategoriesWithCount;
import com.justeat.TakeawaysDBContract.ProductCategoriesWithCount.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class ProductCategoriesWithCountRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<ProductCategoriesWithCountRecord> sFactory = new ActiveRecordFactory<ProductCategoriesWithCountRecord>() {
		@Override
		public ProductCategoriesWithCountRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return ProductCategoriesWithCount.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<ProductCategoriesWithCountRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<ProductCategoriesWithCountRecord> CREATOR 
    	= new Parcelable.Creator<ProductCategoriesWithCountRecord>() {
        public ProductCategoriesWithCountRecord createFromParcel(Parcel in) {
            return new ProductCategoriesWithCountRecord(in);
        }

        public ProductCategoriesWithCountRecord[] newArray(int size) {
            return new ProductCategoriesWithCountRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	ProductCategoriesWithCount._ID,
    	ProductCategoriesWithCount.JEID,
    	ProductCategoriesWithCount.RESTAURANT_JEID,
    	ProductCategoriesWithCount.MENU_JEID,
    	ProductCategoriesWithCount.NAME,
    	ProductCategoriesWithCount.SPECIAL_OFFER,
    	ProductCategoriesWithCount.DESCRIPTION,
    	ProductCategoriesWithCount.QUANTITY_IN_BASKET,
    	ProductCategoriesWithCount.SORT_KEY
    };
    
    public interface Indices {
    	int _ID = 0;
    	int JEID = 1;
    	int RESTAURANT_JEID = 2;
    	int MENU_JEID = 3;
    	int NAME = 4;
    	int SPECIAL_OFFER = 5;
    	int DESCRIPTION = 6;
    	int QUANTITY_IN_BASKET = 7;
    	int SORT_KEY = 8;
    }
    
    private long mJeid;
    private boolean mJeidDirty;
    private long mRestaurantJeid;
    private boolean mRestaurantJeidDirty;
    private long mMenuJeid;
    private boolean mMenuJeidDirty;
    private String mName;
    private boolean mNameDirty;
    private String mSpecialOffer;
    private boolean mSpecialOfferDirty;
    private String mDescription;
    private boolean mDescriptionDirty;
    private String mQuantityInBasket;
    private boolean mQuantityInBasketDirty;
    private String mSortKey;
    private boolean mSortKeyDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setJeid(long jeid) {
    	mJeid = jeid;
    	mJeidDirty = true;
    }
    
    public long getJeid() {
    	return mJeid;
    }
    public void setRestaurantJeid(long restaurantJeid) {
    	mRestaurantJeid = restaurantJeid;
    	mRestaurantJeidDirty = true;
    }
    
    public long getRestaurantJeid() {
    	return mRestaurantJeid;
    }
    public void setMenuJeid(long menuJeid) {
    	mMenuJeid = menuJeid;
    	mMenuJeidDirty = true;
    }
    
    public long getMenuJeid() {
    	return mMenuJeid;
    }
    public void setName(String name) {
    	mName = name;
    	mNameDirty = true;
    }
    
    public String getName() {
    	return mName;
    }
    public void setSpecialOffer(String specialOffer) {
    	mSpecialOffer = specialOffer;
    	mSpecialOfferDirty = true;
    }
    
    public String getSpecialOffer() {
    	return mSpecialOffer;
    }
    public void setDescription(String description) {
    	mDescription = description;
    	mDescriptionDirty = true;
    }
    
    public String getDescription() {
    	return mDescription;
    }
    public void setQuantityInBasket(String quantityInBasket) {
    	mQuantityInBasket = quantityInBasket;
    	mQuantityInBasketDirty = true;
    }
    
    public String getQuantityInBasket() {
    	return mQuantityInBasket;
    }
    public void setSortKey(String sortKey) {
    	mSortKey = sortKey;
    	mSortKeyDirty = true;
    }
    
    public String getSortKey() {
    	return mSortKey;
    }
    
    public ProductCategoriesWithCountRecord() {
    	super(ProductCategoriesWithCount.CONTENT_URI);
	}
	
	private ProductCategoriesWithCountRecord(Parcel in) {
    	super(ProductCategoriesWithCount.CONTENT_URI);
    	
		setId(in.readLong());
		
		mJeid = in.readLong();
		mRestaurantJeid = in.readLong();
		mMenuJeid = in.readLong();
		mName = in.readString();
		mSpecialOffer = in.readString();
		mDescription = in.readString();
		mQuantityInBasket = in.readString();
		mSortKey = in.readString();
		
		boolean[] dirtyFlags = new boolean[8];
		in.readBooleanArray(dirtyFlags);
		mJeidDirty = dirtyFlags[0];
		mRestaurantJeidDirty = dirtyFlags[1];
		mMenuJeidDirty = dirtyFlags[2];
		mNameDirty = dirtyFlags[3];
		mSpecialOfferDirty = dirtyFlags[4];
		mDescriptionDirty = dirtyFlags[5];
		mQuantityInBasketDirty = dirtyFlags[6];
		mSortKeyDirty = dirtyFlags[7];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mJeid);
		dest.writeLong(mRestaurantJeid);
		dest.writeLong(mMenuJeid);
		dest.writeString(mName);
		dest.writeString(mSpecialOffer);
		dest.writeString(mDescription);
		dest.writeString(mQuantityInBasket);
		dest.writeString(mSortKey);
		dest.writeBooleanArray(new boolean[] {
			mJeidDirty,
			mRestaurantJeidDirty,
			mMenuJeidDirty,
			mNameDirty,
			mSpecialOfferDirty,
			mDescriptionDirty,
			mQuantityInBasketDirty,
			mSortKeyDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = ProductCategoriesWithCount.newBuilder();

		if(mJeidDirty) {
			builder.setJeid(mJeid);
		}
		if(mRestaurantJeidDirty) {
			builder.setRestaurantJeid(mRestaurantJeid);
		}
		if(mMenuJeidDirty) {
			builder.setMenuJeid(mMenuJeid);
		}
		if(mNameDirty) {
			builder.setName(mName);
		}
		if(mSpecialOfferDirty) {
			builder.setSpecialOffer(mSpecialOffer);
		}
		if(mDescriptionDirty) {
			builder.setDescription(mDescription);
		}
		if(mQuantityInBasketDirty) {
			builder.setQuantityInBasket(mQuantityInBasket);
		}
		if(mSortKeyDirty) {
			builder.setSortKey(mSortKey);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mJeidDirty = dirty;
		mRestaurantJeidDirty = dirty;
		mMenuJeidDirty = dirty;
		mNameDirty = dirty;
		mSpecialOfferDirty = dirty;
		mDescriptionDirty = dirty;
		mQuantityInBasketDirty = dirty;
		mSortKeyDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setJeid(c.getLong(Indices.JEID));
		setRestaurantJeid(c.getLong(Indices.RESTAURANT_JEID));
		setMenuJeid(c.getLong(Indices.MENU_JEID));
		setName(c.getString(Indices.NAME));
		setSpecialOffer(c.getString(Indices.SPECIAL_OFFER));
		setDescription(c.getString(Indices.DESCRIPTION));
		setQuantityInBasket(c.getString(Indices.QUANTITY_IN_BASKET));
		setSortKey(c.getString(Indices.SORT_KEY));
	}
	
	public static ProductCategoriesWithCountRecord fromCursor(Cursor c) {
	    ProductCategoriesWithCountRecord item = new ProductCategoriesWithCountRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static ProductCategoriesWithCountRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(ProductCategoriesWithCountRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static ProductCategoriesWithCountRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(ProductCategoriesWithCount.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
