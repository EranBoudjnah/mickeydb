/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.Products;
import com.justeat.TakeawaysDBContract.Products.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class ProductsRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<ProductsRecord> sFactory = new ActiveRecordFactory<ProductsRecord>() {
		@Override
		public ProductsRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return Products.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<ProductsRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<ProductsRecord> CREATOR 
    	= new Parcelable.Creator<ProductsRecord>() {
        public ProductsRecord createFromParcel(Parcel in) {
            return new ProductsRecord(in);
        }

        public ProductsRecord[] newArray(int size) {
            return new ProductsRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	Products._ID,
    	Products.JEID,
    	Products.RESTAURANT_JEID,
    	Products.MENU_JEID,
    	Products.CATEGORY_JEID,
    	Products.NAME,
    	Products.SYNONYM,
    	Products.DESCRIPTION,
    	Products.PRICE,
    	Products.QUANTITY_IN_BASKET,
    	Products.HAS_ACCESSORIES,
    	Products.HAS_COMBO_OPTIONS,
    	Products.HAS_REQUIRED_ACCESSORIES,
    	Products.CONTAINS_NUTS,
    	Products.IS_SPICY,
    	Products.IS_VEGETARIAN,
    	Products.IS_COMPLEX,
    	Products.IS_SYNONYM,
    	Products.MENU_NUMBER,
    	Products.MENU_NUMBER_CODE,
    	Products.GROUP_KEY,
    	Products.MENU_SORT_KEY,
    	Products.CREATED,
    	Products.IS_TIPS
    };
    
    public interface Indices {
    	int _ID = 0;
    	int JEID = 1;
    	int RESTAURANT_JEID = 2;
    	int MENU_JEID = 3;
    	int CATEGORY_JEID = 4;
    	int NAME = 5;
    	int SYNONYM = 6;
    	int DESCRIPTION = 7;
    	int PRICE = 8;
    	int QUANTITY_IN_BASKET = 9;
    	int HAS_ACCESSORIES = 10;
    	int HAS_COMBO_OPTIONS = 11;
    	int HAS_REQUIRED_ACCESSORIES = 12;
    	int CONTAINS_NUTS = 13;
    	int IS_SPICY = 14;
    	int IS_VEGETARIAN = 15;
    	int IS_COMPLEX = 16;
    	int IS_SYNONYM = 17;
    	int MENU_NUMBER = 18;
    	int MENU_NUMBER_CODE = 19;
    	int GROUP_KEY = 20;
    	int MENU_SORT_KEY = 21;
    	int CREATED = 22;
    	int IS_TIPS = 23;
    }
    
    private long mJeid;
    private boolean mJeidDirty;
    private long mRestaurantJeid;
    private boolean mRestaurantJeidDirty;
    private long mMenuJeid;
    private boolean mMenuJeidDirty;
    private long mCategoryJeid;
    private boolean mCategoryJeidDirty;
    private String mName;
    private boolean mNameDirty;
    private String mSynonym;
    private boolean mSynonymDirty;
    private String mDescription;
    private boolean mDescriptionDirty;
    private double mPrice;
    private boolean mPriceDirty;
    private long mQuantityInBasket;
    private boolean mQuantityInBasketDirty;
    private boolean mHasAccessories;
    private boolean mHasAccessoriesDirty;
    private boolean mHasComboOptions;
    private boolean mHasComboOptionsDirty;
    private boolean mHasRequiredAccessories;
    private boolean mHasRequiredAccessoriesDirty;
    private boolean mContainsNuts;
    private boolean mContainsNutsDirty;
    private boolean mIsSpicy;
    private boolean mIsSpicyDirty;
    private boolean mIsVegetarian;
    private boolean mIsVegetarianDirty;
    private boolean mIsComplex;
    private boolean mIsComplexDirty;
    private boolean mIsSynonym;
    private boolean mIsSynonymDirty;
    private String mMenuNumber;
    private boolean mMenuNumberDirty;
    private String mMenuNumberCode;
    private boolean mMenuNumberCodeDirty;
    private String mGroupKey;
    private boolean mGroupKeyDirty;
    private String mMenuSortKey;
    private boolean mMenuSortKeyDirty;
    private long mCreated;
    private boolean mCreatedDirty;
    private boolean mIsTips;
    private boolean mIsTipsDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setJeid(long jeid) {
    	mJeid = jeid;
    	mJeidDirty = true;
    }
    
    public long getJeid() {
    	return mJeid;
    }
    
    public void setRestaurantJeid(long restaurantJeid) {
    	mRestaurantJeid = restaurantJeid;
    	mRestaurantJeidDirty = true;
    }
    
    public long getRestaurantJeid() {
    	return mRestaurantJeid;
    }
    
    public void setMenuJeid(long menuJeid) {
    	mMenuJeid = menuJeid;
    	mMenuJeidDirty = true;
    }
    
    public long getMenuJeid() {
    	return mMenuJeid;
    }
    
    public void setCategoryJeid(long categoryJeid) {
    	mCategoryJeid = categoryJeid;
    	mCategoryJeidDirty = true;
    }
    
    public long getCategoryJeid() {
    	return mCategoryJeid;
    }
    
    public void setName(String name) {
    	mName = name;
    	mNameDirty = true;
    }
    
    public String getName() {
    	return mName;
    }
    
    public void setSynonym(String synonym) {
    	mSynonym = synonym;
    	mSynonymDirty = true;
    }
    
    public String getSynonym() {
    	return mSynonym;
    }
    
    public void setDescription(String description) {
    	mDescription = description;
    	mDescriptionDirty = true;
    }
    
    public String getDescription() {
    	return mDescription;
    }
    
    public void setPrice(double price) {
    	mPrice = price;
    	mPriceDirty = true;
    }
    
    public double getPrice() {
    	return mPrice;
    }
    
    public void setQuantityInBasket(long quantityInBasket) {
    	mQuantityInBasket = quantityInBasket;
    	mQuantityInBasketDirty = true;
    }
    
    public long getQuantityInBasket() {
    	return mQuantityInBasket;
    }
    
    public void setHasAccessories(boolean hasAccessories) {
    	mHasAccessories = hasAccessories;
    	mHasAccessoriesDirty = true;
    }
    
    public boolean getHasAccessories() {
    	return mHasAccessories;
    }
    
    public void setHasComboOptions(boolean hasComboOptions) {
    	mHasComboOptions = hasComboOptions;
    	mHasComboOptionsDirty = true;
    }
    
    public boolean getHasComboOptions() {
    	return mHasComboOptions;
    }
    
    public void setHasRequiredAccessories(boolean hasRequiredAccessories) {
    	mHasRequiredAccessories = hasRequiredAccessories;
    	mHasRequiredAccessoriesDirty = true;
    }
    
    public boolean getHasRequiredAccessories() {
    	return mHasRequiredAccessories;
    }
    
    public void setContainsNuts(boolean containsNuts) {
    	mContainsNuts = containsNuts;
    	mContainsNutsDirty = true;
    }
    
    public boolean getContainsNuts() {
    	return mContainsNuts;
    }
    
    public void setIsSpicy(boolean isSpicy) {
    	mIsSpicy = isSpicy;
    	mIsSpicyDirty = true;
    }
    
    public boolean getIsSpicy() {
    	return mIsSpicy;
    }
    
    public void setIsVegetarian(boolean isVegetarian) {
    	mIsVegetarian = isVegetarian;
    	mIsVegetarianDirty = true;
    }
    
    public boolean getIsVegetarian() {
    	return mIsVegetarian;
    }
    
    public void setIsComplex(boolean isComplex) {
    	mIsComplex = isComplex;
    	mIsComplexDirty = true;
    }
    
    public boolean getIsComplex() {
    	return mIsComplex;
    }
    
    public void setIsSynonym(boolean isSynonym) {
    	mIsSynonym = isSynonym;
    	mIsSynonymDirty = true;
    }
    
    public boolean getIsSynonym() {
    	return mIsSynonym;
    }
    
    public void setMenuNumber(String menuNumber) {
    	mMenuNumber = menuNumber;
    	mMenuNumberDirty = true;
    }
    
    public String getMenuNumber() {
    	return mMenuNumber;
    }
    
    public void setMenuNumberCode(String menuNumberCode) {
    	mMenuNumberCode = menuNumberCode;
    	mMenuNumberCodeDirty = true;
    }
    
    public String getMenuNumberCode() {
    	return mMenuNumberCode;
    }
    
    public void setGroupKey(String groupKey) {
    	mGroupKey = groupKey;
    	mGroupKeyDirty = true;
    }
    
    public String getGroupKey() {
    	return mGroupKey;
    }
    
    public void setMenuSortKey(String menuSortKey) {
    	mMenuSortKey = menuSortKey;
    	mMenuSortKeyDirty = true;
    }
    
    public String getMenuSortKey() {
    	return mMenuSortKey;
    }
    
    public void setCreated(long created) {
    	mCreated = created;
    	mCreatedDirty = true;
    }
    
    public long getCreated() {
    	return mCreated;
    }
    
    public void setIsTips(boolean isTips) {
    	mIsTips = isTips;
    	mIsTipsDirty = true;
    }
    
    public boolean getIsTips() {
    	return mIsTips;
    }
    
    
    public ProductsRecord() {
    	super(Products.CONTENT_URI);
	}
	
	private ProductsRecord(Parcel in) {
    	super(Products.CONTENT_URI);
    	
		setId(in.readLong());
		
		mJeid = in.readLong();
		mRestaurantJeid = in.readLong();
		mMenuJeid = in.readLong();
		mCategoryJeid = in.readLong();
		mName = in.readString();
		mSynonym = in.readString();
		mDescription = in.readString();
		mPrice = in.readDouble();
		mQuantityInBasket = in.readLong();
		mHasAccessories = (in.readInt() > 0);
		mHasComboOptions = (in.readInt() > 0);
		mHasRequiredAccessories = (in.readInt() > 0);
		mContainsNuts = (in.readInt() > 0);
		mIsSpicy = (in.readInt() > 0);
		mIsVegetarian = (in.readInt() > 0);
		mIsComplex = (in.readInt() > 0);
		mIsSynonym = (in.readInt() > 0);
		mMenuNumber = in.readString();
		mMenuNumberCode = in.readString();
		mGroupKey = in.readString();
		mMenuSortKey = in.readString();
		mCreated = in.readLong();
		mIsTips = (in.readInt() > 0);
		
		boolean[] dirtyFlags = new boolean[23];
		in.readBooleanArray(dirtyFlags);
		mJeidDirty = dirtyFlags[0];
		mRestaurantJeidDirty = dirtyFlags[1];
		mMenuJeidDirty = dirtyFlags[2];
		mCategoryJeidDirty = dirtyFlags[3];
		mNameDirty = dirtyFlags[4];
		mSynonymDirty = dirtyFlags[5];
		mDescriptionDirty = dirtyFlags[6];
		mPriceDirty = dirtyFlags[7];
		mQuantityInBasketDirty = dirtyFlags[8];
		mHasAccessoriesDirty = dirtyFlags[9];
		mHasComboOptionsDirty = dirtyFlags[10];
		mHasRequiredAccessoriesDirty = dirtyFlags[11];
		mContainsNutsDirty = dirtyFlags[12];
		mIsSpicyDirty = dirtyFlags[13];
		mIsVegetarianDirty = dirtyFlags[14];
		mIsComplexDirty = dirtyFlags[15];
		mIsSynonymDirty = dirtyFlags[16];
		mMenuNumberDirty = dirtyFlags[17];
		mMenuNumberCodeDirty = dirtyFlags[18];
		mGroupKeyDirty = dirtyFlags[19];
		mMenuSortKeyDirty = dirtyFlags[20];
		mCreatedDirty = dirtyFlags[21];
		mIsTipsDirty = dirtyFlags[22];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mJeid);
		dest.writeLong(mRestaurantJeid);
		dest.writeLong(mMenuJeid);
		dest.writeLong(mCategoryJeid);
		dest.writeString(mName);
		dest.writeString(mSynonym);
		dest.writeString(mDescription);
		dest.writeDouble(mPrice);
		dest.writeLong(mQuantityInBasket);
		dest.writeInt(mHasAccessories ? 1 : 0);
		dest.writeInt(mHasComboOptions ? 1 : 0);
		dest.writeInt(mHasRequiredAccessories ? 1 : 0);
		dest.writeInt(mContainsNuts ? 1 : 0);
		dest.writeInt(mIsSpicy ? 1 : 0);
		dest.writeInt(mIsVegetarian ? 1 : 0);
		dest.writeInt(mIsComplex ? 1 : 0);
		dest.writeInt(mIsSynonym ? 1 : 0);
		dest.writeString(mMenuNumber);
		dest.writeString(mMenuNumberCode);
		dest.writeString(mGroupKey);
		dest.writeString(mMenuSortKey);
		dest.writeLong(mCreated);
		dest.writeInt(mIsTips ? 1 : 0);
		dest.writeBooleanArray(new boolean[] {
			mJeidDirty,
			mRestaurantJeidDirty,
			mMenuJeidDirty,
			mCategoryJeidDirty,
			mNameDirty,
			mSynonymDirty,
			mDescriptionDirty,
			mPriceDirty,
			mQuantityInBasketDirty,
			mHasAccessoriesDirty,
			mHasComboOptionsDirty,
			mHasRequiredAccessoriesDirty,
			mContainsNutsDirty,
			mIsSpicyDirty,
			mIsVegetarianDirty,
			mIsComplexDirty,
			mIsSynonymDirty,
			mMenuNumberDirty,
			mMenuNumberCodeDirty,
			mGroupKeyDirty,
			mMenuSortKeyDirty,
			mCreatedDirty,
			mIsTipsDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = Products.newBuilder();

		if(mJeidDirty) {
			builder.setJeid(mJeid);
		}
		if(mRestaurantJeidDirty) {
			builder.setRestaurantJeid(mRestaurantJeid);
		}
		if(mMenuJeidDirty) {
			builder.setMenuJeid(mMenuJeid);
		}
		if(mCategoryJeidDirty) {
			builder.setCategoryJeid(mCategoryJeid);
		}
		if(mNameDirty) {
			builder.setName(mName);
		}
		if(mSynonymDirty) {
			builder.setSynonym(mSynonym);
		}
		if(mDescriptionDirty) {
			builder.setDescription(mDescription);
		}
		if(mPriceDirty) {
			builder.setPrice(mPrice);
		}
		if(mQuantityInBasketDirty) {
			builder.setQuantityInBasket(mQuantityInBasket);
		}
		if(mHasAccessoriesDirty) {
			builder.setHasAccessories(mHasAccessories);
		}
		if(mHasComboOptionsDirty) {
			builder.setHasComboOptions(mHasComboOptions);
		}
		if(mHasRequiredAccessoriesDirty) {
			builder.setHasRequiredAccessories(mHasRequiredAccessories);
		}
		if(mContainsNutsDirty) {
			builder.setContainsNuts(mContainsNuts);
		}
		if(mIsSpicyDirty) {
			builder.setIsSpicy(mIsSpicy);
		}
		if(mIsVegetarianDirty) {
			builder.setIsVegetarian(mIsVegetarian);
		}
		if(mIsComplexDirty) {
			builder.setIsComplex(mIsComplex);
		}
		if(mIsSynonymDirty) {
			builder.setIsSynonym(mIsSynonym);
		}
		if(mMenuNumberDirty) {
			builder.setMenuNumber(mMenuNumber);
		}
		if(mMenuNumberCodeDirty) {
			builder.setMenuNumberCode(mMenuNumberCode);
		}
		if(mGroupKeyDirty) {
			builder.setGroupKey(mGroupKey);
		}
		if(mMenuSortKeyDirty) {
			builder.setMenuSortKey(mMenuSortKey);
		}
		if(mCreatedDirty) {
			builder.setCreated(mCreated);
		}
		if(mIsTipsDirty) {
			builder.setIsTips(mIsTips);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mJeidDirty = dirty;
		mRestaurantJeidDirty = dirty;
		mMenuJeidDirty = dirty;
		mCategoryJeidDirty = dirty;
		mNameDirty = dirty;
		mSynonymDirty = dirty;
		mDescriptionDirty = dirty;
		mPriceDirty = dirty;
		mQuantityInBasketDirty = dirty;
		mHasAccessoriesDirty = dirty;
		mHasComboOptionsDirty = dirty;
		mHasRequiredAccessoriesDirty = dirty;
		mContainsNutsDirty = dirty;
		mIsSpicyDirty = dirty;
		mIsVegetarianDirty = dirty;
		mIsComplexDirty = dirty;
		mIsSynonymDirty = dirty;
		mMenuNumberDirty = dirty;
		mMenuNumberCodeDirty = dirty;
		mGroupKeyDirty = dirty;
		mMenuSortKeyDirty = dirty;
		mCreatedDirty = dirty;
		mIsTipsDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setJeid(c.getLong(Indices.JEID));
		setRestaurantJeid(c.getLong(Indices.RESTAURANT_JEID));
		setMenuJeid(c.getLong(Indices.MENU_JEID));
		setCategoryJeid(c.getLong(Indices.CATEGORY_JEID));
		setName(c.getString(Indices.NAME));
		setSynonym(c.getString(Indices.SYNONYM));
		setDescription(c.getString(Indices.DESCRIPTION));
		setPrice(c.getDouble(Indices.PRICE));
		setQuantityInBasket(c.getLong(Indices.QUANTITY_IN_BASKET));
		setHasAccessories(c.getInt(Indices.HAS_ACCESSORIES) > 0);
		setHasComboOptions(c.getInt(Indices.HAS_COMBO_OPTIONS) > 0);
		setHasRequiredAccessories(c.getInt(Indices.HAS_REQUIRED_ACCESSORIES) > 0);
		setContainsNuts(c.getInt(Indices.CONTAINS_NUTS) > 0);
		setIsSpicy(c.getInt(Indices.IS_SPICY) > 0);
		setIsVegetarian(c.getInt(Indices.IS_VEGETARIAN) > 0);
		setIsComplex(c.getInt(Indices.IS_COMPLEX) > 0);
		setIsSynonym(c.getInt(Indices.IS_SYNONYM) > 0);
		setMenuNumber(c.getString(Indices.MENU_NUMBER));
		setMenuNumberCode(c.getString(Indices.MENU_NUMBER_CODE));
		setGroupKey(c.getString(Indices.GROUP_KEY));
		setMenuSortKey(c.getString(Indices.MENU_SORT_KEY));
		setCreated(c.getLong(Indices.CREATED));
		setIsTips(c.getInt(Indices.IS_TIPS) > 0);
	}
	
	public static ProductsRecord fromCursor(Cursor c) {
	    ProductsRecord item = new ProductsRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static ProductsRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(ProductsRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static ProductsRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(Products.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
