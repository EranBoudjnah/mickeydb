/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import com.robotoworks.mechanoid.db.MechanoidSQLiteOpenHelper;
import com.robotoworks.mechanoid.db.SQLiteMigration;

import com.justeat.migrations.DefaultTakeawaysDBMigrationV1;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV2;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV3;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV4;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV5;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV6;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV7;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV8;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV9;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV10;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV11;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV12;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV13;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV14;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV15;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV16;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV17;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV18;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV19;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV20;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV21;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV22;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV23;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV24;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV25;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV26;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV27;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV28;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV29;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV30;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV31;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV32;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV33;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV34;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV35;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV36;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV37;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV38;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV39;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV40;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV41;
import com.justeat.migrations.DefaultTakeawaysDBMigrationV42;

public abstract class AbstractTakeawaysDBOpenHelper extends MechanoidSQLiteOpenHelper {
	private static final String DATABASE_NAME = "TakeawaysDB.db";

	public static final int VERSION = 42;

	public interface Sources {
		String ADDRESS_SEARCH_RESULT = "address_search_result";
		String BASKET_ITEM_ACCESSORIES = "basket_item_accessories";
		String BASKET_ITEM_MEALPARTS = "basket_item_mealparts";
		String BASKET_ITEMS = "basket_items";
		String BASKET_TAXES = "basket_taxes";
		String BASKETS = "baskets";
		String CUISINE_TYPES = "cuisine_types";
		String MENUS = "menus";
		String ORDER_HISTORY_ITEM_ACCESSORIES = "order_history_item_accessories";
		String ORDER_HISTORY_ITEM_MEALPARTS = "order_history_item_mealparts";
		String ORDER_HISTORY_ITEMS = "order_history_items";
		String ORDERS = "orders";
		String PAYMENT_LINES = "payment_lines";
		String PRODUCT_ACCESSORIES = "product_accessories";
		String PRODUCT_CATEGORIES = "product_categories";
		String PRODUCT_COMBO_OPTION_CHOICES = "product_combo_option_choices";
		String PRODUCT_COMBO_OPTIONS = "product_combo_options";
		String PRODUCTS = "products";
		String RECENTLY_VIEWED_RESTAURANTS = "recently_viewed_restaurants";
		String RESTAURANT_DEALS = "restaurant_deals";
		String RESTAURANT_OPENING_TIMES = "restaurant_opening_times";
		String RESTAURANTS = "restaurants";
		String REVIEWS = "reviews";
		String SYS_EVENTS = "sys_events";
		String USER_DETAILS = "user_details";
		String ORDER_HISTORY_SUMMARY = "order_history_summary";
		String ORDER_SUMMARY = "order_summary";
		String PRODUCT_ACCESSORY_TYPES = "product_accessory_types";
		String PRODUCT_CATEGORIES_WITH_COUNT = "product_categories_with_count";
		String PRODUCTS_IN_BASKET = "products_in_basket";
		String PRODUCTS_IN_CATEGORIES = "products_in_categories";
		String RESTAURANTS_AND_BASKET = "restaurants_and_basket";
	}

	public AbstractTakeawaysDBOpenHelper(Context context) {
		super(context, DATABASE_NAME, null, VERSION);
	}

	public AbstractTakeawaysDBOpenHelper(Context context, String name) {
		super(context, name, null, VERSION);
	}

	@Override
	public void onCreate(SQLiteDatabase db) {
		applyMigrations(db, 0, VERSION);
	}
	
	@Override
	public void onOpen(SQLiteDatabase db) {
		super.onOpen(db);
		
		db.execSQL(
			"create temp view order_history_summary as " +
			"select " +
			"bi._id as _id, " +
			"bi.basket_jeid as basket_jeid, " +
			"bi.product_jeid as product_jeid, " +
			"bi.product_name as item_name, " +
			"bi.product_price as unit_price, " +
			"count(bi._id) as quantity, " +
			"bi.menu_sort_key || '-' || bi.basket_item_jeid as sort_key, " +
			"1 as descriptor " +
			"from order_history_items as bi " +
			"where " +
			"bi.is_complex=0 " +
			"group by basket_jeid, product_jeid " +
			"union " +
			"select " +
			"bi._id as _id, " +
			"bi.basket_jeid as basket_jeid, " +
			"bi.product_jeid as product_jeid, " +
			"bi.product_name || ' ' || bi.product_synonym as item_name, " +
			"bi.product_price as unit_price, " +
			"count(bi._id) as quantity, " +
			"bi.menu_sort_key || '-' || bi.basket_item_jeid || '-1' as sort_key, " +
			"1 as descriptor " +
			"from order_history_items as bi " +
			"where " +
			"bi.is_complex=1 " +
			"group by basket_jeid, product_jeid " +
			"having bi.product_has_accessories=0 and bi.product_has_combo_options=0 " +
			"union " +
			"select " +
			"bi._id as _id, " +
			"bi.basket_jeid as basket_jeid, " +
			"bi.product_jeid as product_jeid, " +
			"bi.product_name || ' ' ||  bi.product_synonym as item_name, " +
			"bi.product_price as unit_price, " +
			"1 as quantity, " +
			"bi.menu_sort_key || '-' || bi.basket_item_jeid || '-1' as sort_key, " +
			"1 as descriptor " +
			"from order_history_items as bi " +
			"where " +
			"bi.is_complex=1 and bi.product_has_accessories > 0 or bi.product_has_combo_options > 0 " +
			"union " +
			"select " +
			"null as _id, " +
			"a.basket_jeid as basket_jeid, " +
			"null as product_jeid, " +
			"a.accessory_name as item_name, " +
			"a.unit_price as unit_price, " +
			"a.quantity as quantity, " +
			"bi.menu_sort_key || '-' || bi.basket_item_jeid || '-2-' || a.accessory_required as sort_key, " +
			"2 as descriptor " +
			"from order_history_item_accessories as a " +
			"left join order_history_items as bi " +
			"on bi.basket_item_jeid = a.basket_item_jeid " +
			"where " +
			"a.mealpart_jeid = 0 and a.quantity > 0 " +
			"union " +
			"select " +
			"null as _id, " +
			"a.basket_jeid as basket_jeid, " +
			"null as product_jeid, " +
			"a.mealpart_name as item_name, " +
			"null as unit_price, " +
			"null as quantity, " +
			"bi.menu_sort_key || '-' || bi.basket_item_jeid || '-3-' || a.mealpart_jeid || '-' || a.mealpart_group_jeid as sort_key, " +
			"3 as descriptor " +
			"from order_history_item_mealparts as a " +
			"left join order_history_items as bi " +
			"on bi.basket_item_jeid = a.basket_item_jeid " +
			"union " +
			"select " +
			"null as _id, " +
			"a.basket_jeid as basket_jeid, " +
			"null as product_jeid, " +
			"a.accessory_name as item_name, " +
			"a.unit_price as unit_price, " +
			"a.quantity as quantity, " +
			"bi.menu_sort_key || '-' || bi.basket_item_jeid || '-3-' || a.mealpart_jeid || '-' || a.mealpart_group_jeid || '-' || (1-a.accessory_required) as sort_key, " +
			"4 as descriptor " +
			"from order_history_item_accessories as a " +
			"left join order_history_items as bi " +
			"on bi.basket_item_jeid = a.basket_item_jeid " +
			"where " +
			"a.mealpart_jeid > 1 and a.quantity > 0 " +
			"order by sort_key "
		);	
		db.execSQL(
			"create temp view order_summary as " +
			"select " +
			"bi._id as _id, " +
			"bi.product_jeid as product_jeid, " +
			"bi.product_name as item_name, " +
			"bi.product_price as unit_price, " +
			"count(bi._id) as quantity, " +
			"bi.menu_sort_key || '-' || bi._id as sort_key, " +
			"1 as descriptor, " +
			"bi.is_tips as is_tips, " +
			"bi.result as result " +
			"from basket_items as bi " +
			"where " +
			"bi.is_complex=0 and bi.status !=3 " +
			"group by product_jeid " +
			"union " +
			"select " +
			"bi._id as _id, " +
			"bi.product_jeid as product_jeid, " +
			"bi.product_name || ' ' || bi.product_synonym as item_name, " +
			"bi.product_price as unit_price, " +
			"count(bi._id) as quantity, " +
			"bi.menu_sort_key || '-' || bi._id || '-1' as sort_key, " +
			"1 as descriptor, " +
			"bi.is_tips as is_tips, " +
			"bi.result as result " +
			"from basket_items as bi " +
			"where " +
			"bi.is_complex=1 and bi.status !=3 " +
			"group by product_jeid " +
			"having bi.product_has_accessories=0 and bi.product_has_combo_options=0 " +
			"union " +
			"select " +
			"bi._id as _id, " +
			"bi.product_jeid as product_jeid, " +
			"bi.product_name || ' ' ||  bi.product_synonym as item_name, " +
			"bi.product_price as unit_price, " +
			"1 as quantity, " +
			"bi.menu_sort_key || '-' || bi._id || '-1' as sort_key, " +
			"1 as descriptor, " +
			"bi.is_tips as is_tips, " +
			"bi.result as result " +
			"from basket_items as bi " +
			"where " +
			"bi.is_complex=1 and bi.product_has_accessories > 0 or bi.product_has_combo_options > 0 and bi.status !=3 " +
			"union " +
			"select " +
			"null as _id, " +
			"null as product_jeid, " +
			"a.accessory_name as item_name, " +
			"a.unit_price as unit_price, " +
			"a.quantity as quantity, " +
			"bi.menu_sort_key || '-' || bi._id || '-2-' || a.accessory_required as sort_key, " +
			"2 as descriptor, " +
			"bi.is_tips as is_tips, " +
			"bi.result as result " +
			"from basket_item_accessories as a " +
			"left join basket_items as bi " +
			"on bi._id = a.basket_item_id " +
			"where " +
			"a.mealpart_jeid = 0 and bi.status !=3 and a.quantity > 0 " +
			"union " +
			"select " +
			"null as _id, " +
			"null as product_jeid, " +
			"a.mealpart_name as item_name, " +
			"null as unit_price, " +
			"null as quantity, " +
			"bi.menu_sort_key || '-' || bi._id || '-3-' || a.mealpart_jeid || '-' || a.mealpart_group_jeid as sort_key, " +
			"3 as descriptor, " +
			"bi.is_tips as is_tips, " +
			"bi.result as result " +
			"from basket_item_mealparts as a " +
			"left join basket_items as bi " +
			"on bi._id = a.basket_item_id " +
			"where bi.status !=3 " +
			"union " +
			"select " +
			"null as _id, " +
			"null as product_jeid, " +
			"a.accessory_name as item_name, " +
			"a.unit_price as unit_price, " +
			"a.quantity as quantity, " +
			"bi.menu_sort_key || '-' || bi._id || '-3-' || a.mealpart_jeid || '-' || a.mealpart_group_jeid || '-' || (1-a.accessory_required) as sort_key, " +
			"4 as descriptor, " +
			"bi.is_tips as is_tips, " +
			"bi.result as result " +
			"from basket_item_accessories as a " +
			"left join basket_items as bi " +
			"on bi._id = a.basket_item_id " +
			"where " +
			"a.mealpart_jeid > 1 and bi.status !=3 and a.quantity > 0 " +
			"order by sort_key "
		);	
		db.execSQL(
			"create temp view product_accessory_types as " +
			"select " +
			"pa.restaurant_jeid as restaurant_jeid, " +
			"pa.product_jeid as product_jeid, " +
			"pa.required as required, " +
			"pa.selection_id as selection_id " +
			"from product_accessories as pa " +
			"group by restaurant_jeid, product_jeid, required, selection_id " +
			"order by required desc, selection_id asc "
		);	
		db.execSQL(
			"create temp view product_categories_with_count as " +
			"select " +
			"pc._id as _id, " +
			"pc.jeid as jeid, " +
			"pc.restaurant_jeid as restaurant_jeid, " +
			"pc.menu_jeid as menu_jeid, " +
			"pc.name as name, " +
			"pc.special_offer as special_offer, " +
			"pc.description as description, " +
			"( " +
			"select count(*) from basket_items as b " +
			"where " +
			"b.restaurant_jeid = pc.restaurant_jeid and " +
			"b.category_jeid = pc.jeid and " +
			"b.menu_jeid = pc.menu_jeid and " +
			"b.status != 3 " +
			") as quantity_in_basket, " +
			"pc.sort_key as sort_key " +
			"from product_categories as pc " +
			"order by sort_key "
		);	
		db.execSQL(
			"create temp view products_in_basket as " +
			"select " +
			"c._id as _id, " +
			"c.restaurant_jeid as restaurant_jeid, " +
			"c.menu_jeid as menu_jeid, " +
			"c.jeid as category_jeid, " +
			"null as product_jeid, " +
			"null as group_key, " +
			"c.name as name, " +
			"c.description as description, " +
			"null as price, " +
			"null as is_complex, " +
			"null as has_synonyms, " +
			"null as contains_nuts, " +
			"null as is_spicy, " +
			"null as is_vegetarian, " +
			"cast(0 as integer) as quantity, " +
			"c.special_offer as special_offer, " +
			"null as synonyms, " +
			"null as all_descriptions, " +
			"null as result, " +
			"null as status, " +
			"c.sort_key || \"-\" || c.restaurant_jeid || \"--\" || c.jeid as menu_sort_key, " +
			"cast(0 as integer) as descriptor " +
			"from product_categories as c " +
			"union " +
			"select p._id as _id, " +
			"p.restaurant_jeid as restaurant_jeid, " +
			"p.menu_jeid as menu_jeid, " +
			"p.category_jeid as category_jeid, " +
			"p.jeid as product_jeid, " +
			"p.group_key as group_key, " +
			"p.name as name, " +
			"max(p.description) as description, " +
			"min(p.price) as price, " +
			"p.is_complex as is_complex, " +
			"count(p._id) as has_synonyms, " +
			"max(p.contains_nuts) as contains_nuts, " +
			"max(p.is_spicy) as is_spicy, " +
			"max(p.is_vegetarian) as is_vegetarian, " +
			"max(cast(( " +
			"select count(*) from basket_items as b " +
			"where " +
			"b.restaurant_jeid = p.restaurant_jeid and " +
			"b.category_jeid = p.category_jeid and " +
			"b.menu_jeid = p.menu_jeid and " +
			"b.product_jeid = p.jeid and " +
			"b.status != 3 " +
			") as integer)) as quantity, " +
			"null as special_offer, " +
			"group_concat(p.synonym) as synonyms, " +
			"group_concat(p.description) as all_descriptions, " +
			"null as result, " +
			"null as status, " +
			"c.sort_key || \"-\" || p.menu_sort_key as menu_sort_key, " +
			"cast(1 as integer) as descriptor " +
			"from products as p " +
			"left outer join product_categories as c " +
			"on p.category_jeid = c.jeid and p.menu_jeid = c.menu_jeid " +
			"group by p.restaurant_jeid, p.menu_jeid, p.category_jeid, group_key " +
			"union " +
			"select b._id as _id, " +
			"b.restaurant_jeid as restaurant_jeid, " +
			"b.menu_jeid as menu_jeid, " +
			"b.category_jeid as category_jeid, " +
			"b.product_jeid as product_jeid, " +
			"b.group_key as group_key, " +
			"b.product_name as name, " +
			"b.description as description, " +
			"b.total_price as price, " +
			"b.is_complex as is_complex, " +
			"null as has_synonyms, " +
			"null as contains_nuts, " +
			"null as is_spicy, " +
			"null as is_vegetarian, " +
			"cast(1 as integer) as quantity, " +
			"null as special_offer, " +
			"(select group_concat(p.synonym) " +
			"from products as p " +
			"where b.restaurant_jeid = restaurant_jeid and " +
			"b.menu_jeid = menu_jeid and " +
			"b.group_key = group_key " +
			"group by group_key) as synonyms, " +
			"(select group_concat(description) " +
			"from products " +
			"where b.restaurant_jeid = restaurant_jeid and " +
			"b.menu_jeid = menu_jeid and " +
			"b.group_key = group_key " +
			"group by group_key) as all_descriptions, " +
			"b.result as result, " +
			"b.status as status, " +
			"c.sort_key || \"-\" || b.menu_sort_key as menu_sort_key, " +
			"cast(2 as integer) as descriptor " +
			"from basket_items as b " +
			"left outer join product_categories as c " +
			"on b.category_jeid = c.jeid and b.menu_jeid = c.menu_jeid " +
			"where b.is_complex = 1 " +
			"and b.status != 3 " +
			"union " +
			"select b._id as _id, " +
			"b.restaurant_jeid as restaurant_jeid, " +
			"b.menu_jeid as menu_jeid, " +
			"b.category_jeid as category_jeid, " +
			"b.product_jeid as product_jeid, " +
			"b.group_key as group_key, " +
			"b.product_name as name, " +
			"b.description as description, " +
			"sum( b.total_price ) as price, " +
			"b.is_complex as is_complex, " +
			"null as has_synonyms, " +
			"null as contains_nuts, " +
			"null as is_spicy, " +
			"null as is_vegetarian, " +
			"cast(count( b._id ) as integer) as quantity, " +
			"null as special_offer, " +
			"(select group_concat(p.synonym) " +
			"from products as p " +
			"where b.restaurant_jeid = restaurant_jeid and " +
			"b.menu_jeid = menu_jeid and " +
			"b.group_key = group_key " +
			"group by group_key) as synonyms, " +
			"(select group_concat(description) " +
			"from products " +
			"where b.restaurant_jeid = restaurant_jeid and " +
			"b.menu_jeid = menu_jeid and " +
			"b.group_key = group_key " +
			"group by group_key) as all_descriptions, " +
			"b.result as result, " +
			"b.status as status, " +
			"c.sort_key || \"-\" || b.menu_sort_key as menu_sort_key, " +
			"cast(3 as integer) as descriptor " +
			"from basket_items as b " +
			"left outer join product_categories as c " +
			"on b.category_jeid = c.jeid and b.menu_jeid = c.menu_jeid " +
			"where is_complex = 0 " +
			"and b.status != 3 " +
			"group by b.product_jeid " +
			"order by menu_sort_key "
		);	
		db.execSQL(
			"create temp view products_in_categories as " +
			"select " +
			"c._id as _id, " +
			"c.restaurant_jeid as restaurant_jeid, " +
			"c.menu_jeid as menu_jeid, " +
			"c.jeid as category_jeid, " +
			"null as product_jeid, " +
			"null as group_key, " +
			"c.name as name, " +
			"c.description as description, " +
			"null as price, " +
			"null as is_complex, " +
			"null as has_synonyms, " +
			"null as contains_nuts, " +
			"null as is_spicy, " +
			"null as is_vegetarian, " +
			"null as quantity, " +
			"c._id as sort_key, " +
			"0 as descriptor " +
			"from product_categories as c " +
			"union " +
			"select p._id as _id, " +
			"p.restaurant_jeid as restaurant_jeid, " +
			"p.menu_jeid as menu_jeid, " +
			"p.category_jeid as category_jeid, " +
			"p.jeid as product_jeid, " +
			"p.group_key as group_key, " +
			"p.name as name, " +
			"max(p.description) as description, " +
			"min(p.price) as price, " +
			"p.is_complex as is_complex, " +
			"count(p._id) as has_synonyms, " +
			"max(p.contains_nuts) as contains_nuts, " +
			"max(p.is_spicy) as is_spicy, " +
			"max(p.is_vegetarian) as is_vegetarian, " +
			"cast(sum(p.quantity_in_basket) as integer) as quantity, " +
			"pc._id as sort_key, " +
			"1 as descriptor " +
			"from products as p " +
			"left outer join product_categories as pc " +
			"on p.category_jeid = pc.jeid " +
			"group by p.restaurant_jeid, p.menu_jeid, p.category_jeid, group_key " +
			"order by sort_key "
		);	
		db.execSQL(
			"create temp view restaurants_and_basket as " +
			"select " +
			"r._id as _id, " +
			"r.jeid as jeid, " +
			"r.name as name, " +
			"r.unique_name as unique_name, " +
			"r.description as description, " +
			"r.address as address, " +
			"r.city as city, " +
			"r.postcode as postcode, " +
			"r.latitude as latitude, " +
			"r.longitude as longitude, " +
			"r.logo_standard_res_url as logo_standard_res_url, " +
			"r.cuisines as cuisines, " +
			"r.deals as deals, " +
			"r.max_discount_percent as max_discount, " +
			"r.default_display_rank as default_display_rank, " +
			"r.drive_distance as drive_distance, " +
			"r.is_halal as is_halal, " +
			"r.is_new as is_new, " +
			"r.is_open_now as is_open_now, " +
			"r.is_open_now_for_collection as is_open_now_for_collection, " +
			"r.is_open_now_for_delivery as is_open_now_for_delivery, " +
			"r.is_sponsored as is_sponsored, " +
			"r.is_temporarily_offline as is_temporarily_offline, " +
			"r.rating as rating, " +
			"r.num_ratings as num_ratings, " +
			"r.opening_time as opening_time, " +
			"r.reason_why_temporarily_offline as reason_why_temporarily_offline, " +
			"r.search_query as search_query, " +
			"r.has_deals as has_deals, " +
			"r.deal_display_rank as deal_display_rank, " +
			"b._id as basket_id, " +
			"b.basket_jeid as basket_jeid, " +
			"b.total as basket_total, " +
			"b.sub_total as basket_sub_total, " +
			"b.discount as basket_discount, " +
			"b.multibuy_discount as basket_multibuy_discount, " +
			"b.delivery_charge as basket_delivery_charge, " +
			"b.orderable as basket_orderable, " +
			"cast( " +
			"(select " +
			"count(bi._id) " +
			"from basket_items  as bi " +
			"where bi.basket_id=b._id and bi.status !=3 " +
			") " +
			"as integer) as basket_item_count, " +
			"rv._id as recently_viewed_id, " +
			"rv.last_accessed as recently_viewed_last_accessed, " +
			"rv.query as recently_viewed_query " +
			"from restaurants as r " +
			"left join baskets as b " +
			"on b.restaurant_jeid = r.jeid " +
			"left join recently_viewed_restaurants as rv " +
			"on rv.restaurant_jeid = r.jeid "
		);	
	}

	@Override
	protected SQLiteMigration createMigration(int version) {
		switch(version) {
			case 0:
				return createTakeawaysDBMigrationV1();
			case 1:
				return createTakeawaysDBMigrationV2();
			case 2:
				return createTakeawaysDBMigrationV3();
			case 3:
				return createTakeawaysDBMigrationV4();
			case 4:
				return createTakeawaysDBMigrationV5();
			case 5:
				return createTakeawaysDBMigrationV6();
			case 6:
				return createTakeawaysDBMigrationV7();
			case 7:
				return createTakeawaysDBMigrationV8();
			case 8:
				return createTakeawaysDBMigrationV9();
			case 9:
				return createTakeawaysDBMigrationV10();
			case 10:
				return createTakeawaysDBMigrationV11();
			case 11:
				return createTakeawaysDBMigrationV12();
			case 12:
				return createTakeawaysDBMigrationV13();
			case 13:
				return createTakeawaysDBMigrationV14();
			case 14:
				return createTakeawaysDBMigrationV15();
			case 15:
				return createTakeawaysDBMigrationV16();
			case 16:
				return createTakeawaysDBMigrationV17();
			case 17:
				return createTakeawaysDBMigrationV18();
			case 18:
				return createTakeawaysDBMigrationV19();
			case 19:
				return createTakeawaysDBMigrationV20();
			case 20:
				return createTakeawaysDBMigrationV21();
			case 21:
				return createTakeawaysDBMigrationV22();
			case 22:
				return createTakeawaysDBMigrationV23();
			case 23:
				return createTakeawaysDBMigrationV24();
			case 24:
				return createTakeawaysDBMigrationV25();
			case 25:
				return createTakeawaysDBMigrationV26();
			case 26:
				return createTakeawaysDBMigrationV27();
			case 27:
				return createTakeawaysDBMigrationV28();
			case 28:
				return createTakeawaysDBMigrationV29();
			case 29:
				return createTakeawaysDBMigrationV30();
			case 30:
				return createTakeawaysDBMigrationV31();
			case 31:
				return createTakeawaysDBMigrationV32();
			case 32:
				return createTakeawaysDBMigrationV33();
			case 33:
				return createTakeawaysDBMigrationV34();
			case 34:
				return createTakeawaysDBMigrationV35();
			case 35:
				return createTakeawaysDBMigrationV36();
			case 36:
				return createTakeawaysDBMigrationV37();
			case 37:
				return createTakeawaysDBMigrationV38();
			case 38:
				return createTakeawaysDBMigrationV39();
			case 39:
				return createTakeawaysDBMigrationV40();
			case 40:
				return createTakeawaysDBMigrationV41();
			case 41:
				return createTakeawaysDBMigrationV42();
			default:
				throw new IllegalStateException("No migration for version " + version);
		}
	}
	
	protected SQLiteMigration createTakeawaysDBMigrationV1() {
		return new DefaultTakeawaysDBMigrationV1();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV2() {
		return new DefaultTakeawaysDBMigrationV2();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV3() {
		return new DefaultTakeawaysDBMigrationV3();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV4() {
		return new DefaultTakeawaysDBMigrationV4();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV5() {
		return new DefaultTakeawaysDBMigrationV5();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV6() {
		return new DefaultTakeawaysDBMigrationV6();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV7() {
		return new DefaultTakeawaysDBMigrationV7();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV8() {
		return new DefaultTakeawaysDBMigrationV8();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV9() {
		return new DefaultTakeawaysDBMigrationV9();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV10() {
		return new DefaultTakeawaysDBMigrationV10();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV11() {
		return new DefaultTakeawaysDBMigrationV11();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV12() {
		return new DefaultTakeawaysDBMigrationV12();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV13() {
		return new DefaultTakeawaysDBMigrationV13();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV14() {
		return new DefaultTakeawaysDBMigrationV14();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV15() {
		return new DefaultTakeawaysDBMigrationV15();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV16() {
		return new DefaultTakeawaysDBMigrationV16();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV17() {
		return new DefaultTakeawaysDBMigrationV17();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV18() {
		return new DefaultTakeawaysDBMigrationV18();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV19() {
		return new DefaultTakeawaysDBMigrationV19();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV20() {
		return new DefaultTakeawaysDBMigrationV20();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV21() {
		return new DefaultTakeawaysDBMigrationV21();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV22() {
		return new DefaultTakeawaysDBMigrationV22();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV23() {
		return new DefaultTakeawaysDBMigrationV23();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV24() {
		return new DefaultTakeawaysDBMigrationV24();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV25() {
		return new DefaultTakeawaysDBMigrationV25();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV26() {
		return new DefaultTakeawaysDBMigrationV26();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV27() {
		return new DefaultTakeawaysDBMigrationV27();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV28() {
		return new DefaultTakeawaysDBMigrationV28();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV29() {
		return new DefaultTakeawaysDBMigrationV29();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV30() {
		return new DefaultTakeawaysDBMigrationV30();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV31() {
		return new DefaultTakeawaysDBMigrationV31();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV32() {
		return new DefaultTakeawaysDBMigrationV32();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV33() {
		return new DefaultTakeawaysDBMigrationV33();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV34() {
		return new DefaultTakeawaysDBMigrationV34();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV35() {
		return new DefaultTakeawaysDBMigrationV35();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV36() {
		return new DefaultTakeawaysDBMigrationV36();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV37() {
		return new DefaultTakeawaysDBMigrationV37();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV38() {
		return new DefaultTakeawaysDBMigrationV38();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV39() {
		return new DefaultTakeawaysDBMigrationV39();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV40() {
		return new DefaultTakeawaysDBMigrationV40();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV41() {
		return new DefaultTakeawaysDBMigrationV41();
	}
	protected SQLiteMigration createTakeawaysDBMigrationV42() {
		return new DefaultTakeawaysDBMigrationV42();
	}
}
