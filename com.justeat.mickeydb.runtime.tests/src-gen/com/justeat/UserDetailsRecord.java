/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.UserDetails;
import com.justeat.TakeawaysDBContract.UserDetails.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class UserDetailsRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<UserDetailsRecord> sFactory = new ActiveRecordFactory<UserDetailsRecord>() {
		@Override
		public UserDetailsRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return UserDetails.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<UserDetailsRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<UserDetailsRecord> CREATOR 
    	= new Parcelable.Creator<UserDetailsRecord>() {
        public UserDetailsRecord createFromParcel(Parcel in) {
            return new UserDetailsRecord(in);
        }

        public UserDetailsRecord[] newArray(int size) {
            return new UserDetailsRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	UserDetails._ID,
    	UserDetails.TRACKING_ID,
    	UserDetails.CREATED_DATE,
    	UserDetails.EMAIL,
    	UserDetails.FIRST_NAME,
    	UserDetails.LAST_NAME,
    	UserDetails.PHONE_NUMBER,
    	UserDetails.DATE_OF_BIRTH,
    	UserDetails.TERMS_ID,
    	UserDetails.WANTS_NEWSLETTER
    };
    
    public interface Indices {
    	int _ID = 0;
    	int TRACKING_ID = 1;
    	int CREATED_DATE = 2;
    	int EMAIL = 3;
    	int FIRST_NAME = 4;
    	int LAST_NAME = 5;
    	int PHONE_NUMBER = 6;
    	int DATE_OF_BIRTH = 7;
    	int TERMS_ID = 8;
    	int WANTS_NEWSLETTER = 9;
    }
    
    private String mTrackingId;
    private boolean mTrackingIdDirty;
    private String mCreatedDate;
    private boolean mCreatedDateDirty;
    private String mEmail;
    private boolean mEmailDirty;
    private String mFirstName;
    private boolean mFirstNameDirty;
    private String mLastName;
    private boolean mLastNameDirty;
    private String mPhoneNumber;
    private boolean mPhoneNumberDirty;
    private String mDateOfBirth;
    private boolean mDateOfBirthDirty;
    private long mTermsId;
    private boolean mTermsIdDirty;
    private boolean mWantsNewsletter;
    private boolean mWantsNewsletterDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setTrackingId(String trackingId) {
    	mTrackingId = trackingId;
    	mTrackingIdDirty = true;
    }
    
    public String getTrackingId() {
    	return mTrackingId;
    }
    
    public void setCreatedDate(String createdDate) {
    	mCreatedDate = createdDate;
    	mCreatedDateDirty = true;
    }
    
    public String getCreatedDate() {
    	return mCreatedDate;
    }
    
    public void setEmail(String email) {
    	mEmail = email;
    	mEmailDirty = true;
    }
    
    public String getEmail() {
    	return mEmail;
    }
    
    public void setFirstName(String firstName) {
    	mFirstName = firstName;
    	mFirstNameDirty = true;
    }
    
    public String getFirstName() {
    	return mFirstName;
    }
    
    public void setLastName(String lastName) {
    	mLastName = lastName;
    	mLastNameDirty = true;
    }
    
    public String getLastName() {
    	return mLastName;
    }
    
    public void setPhoneNumber(String phoneNumber) {
    	mPhoneNumber = phoneNumber;
    	mPhoneNumberDirty = true;
    }
    
    public String getPhoneNumber() {
    	return mPhoneNumber;
    }
    
    public void setDateOfBirth(String dateOfBirth) {
    	mDateOfBirth = dateOfBirth;
    	mDateOfBirthDirty = true;
    }
    
    public String getDateOfBirth() {
    	return mDateOfBirth;
    }
    
    public void setTermsId(long termsId) {
    	mTermsId = termsId;
    	mTermsIdDirty = true;
    }
    
    public long getTermsId() {
    	return mTermsId;
    }
    
    public void setWantsNewsletter(boolean wantsNewsletter) {
    	mWantsNewsletter = wantsNewsletter;
    	mWantsNewsletterDirty = true;
    }
    
    public boolean getWantsNewsletter() {
    	return mWantsNewsletter;
    }
    
    
    public UserDetailsRecord() {
    	super(UserDetails.CONTENT_URI);
	}
	
	private UserDetailsRecord(Parcel in) {
    	super(UserDetails.CONTENT_URI);
    	
		setId(in.readLong());
		
		mTrackingId = in.readString();
		mCreatedDate = in.readString();
		mEmail = in.readString();
		mFirstName = in.readString();
		mLastName = in.readString();
		mPhoneNumber = in.readString();
		mDateOfBirth = in.readString();
		mTermsId = in.readLong();
		mWantsNewsletter = (in.readInt() > 0);
		
		boolean[] dirtyFlags = new boolean[9];
		in.readBooleanArray(dirtyFlags);
		mTrackingIdDirty = dirtyFlags[0];
		mCreatedDateDirty = dirtyFlags[1];
		mEmailDirty = dirtyFlags[2];
		mFirstNameDirty = dirtyFlags[3];
		mLastNameDirty = dirtyFlags[4];
		mPhoneNumberDirty = dirtyFlags[5];
		mDateOfBirthDirty = dirtyFlags[6];
		mTermsIdDirty = dirtyFlags[7];
		mWantsNewsletterDirty = dirtyFlags[8];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeString(mTrackingId);
		dest.writeString(mCreatedDate);
		dest.writeString(mEmail);
		dest.writeString(mFirstName);
		dest.writeString(mLastName);
		dest.writeString(mPhoneNumber);
		dest.writeString(mDateOfBirth);
		dest.writeLong(mTermsId);
		dest.writeInt(mWantsNewsletter ? 1 : 0);
		dest.writeBooleanArray(new boolean[] {
			mTrackingIdDirty,
			mCreatedDateDirty,
			mEmailDirty,
			mFirstNameDirty,
			mLastNameDirty,
			mPhoneNumberDirty,
			mDateOfBirthDirty,
			mTermsIdDirty,
			mWantsNewsletterDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = UserDetails.newBuilder();

		if(mTrackingIdDirty) {
			builder.setTrackingId(mTrackingId);
		}
		if(mCreatedDateDirty) {
			builder.setCreatedDate(mCreatedDate);
		}
		if(mEmailDirty) {
			builder.setEmail(mEmail);
		}
		if(mFirstNameDirty) {
			builder.setFirstName(mFirstName);
		}
		if(mLastNameDirty) {
			builder.setLastName(mLastName);
		}
		if(mPhoneNumberDirty) {
			builder.setPhoneNumber(mPhoneNumber);
		}
		if(mDateOfBirthDirty) {
			builder.setDateOfBirth(mDateOfBirth);
		}
		if(mTermsIdDirty) {
			builder.setTermsId(mTermsId);
		}
		if(mWantsNewsletterDirty) {
			builder.setWantsNewsletter(mWantsNewsletter);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mTrackingIdDirty = dirty;
		mCreatedDateDirty = dirty;
		mEmailDirty = dirty;
		mFirstNameDirty = dirty;
		mLastNameDirty = dirty;
		mPhoneNumberDirty = dirty;
		mDateOfBirthDirty = dirty;
		mTermsIdDirty = dirty;
		mWantsNewsletterDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setTrackingId(c.getString(Indices.TRACKING_ID));
		setCreatedDate(c.getString(Indices.CREATED_DATE));
		setEmail(c.getString(Indices.EMAIL));
		setFirstName(c.getString(Indices.FIRST_NAME));
		setLastName(c.getString(Indices.LAST_NAME));
		setPhoneNumber(c.getString(Indices.PHONE_NUMBER));
		setDateOfBirth(c.getString(Indices.DATE_OF_BIRTH));
		setTermsId(c.getLong(Indices.TERMS_ID));
		setWantsNewsletter(c.getInt(Indices.WANTS_NEWSLETTER) > 0);
	}
	
	public static UserDetailsRecord fromCursor(Cursor c) {
	    UserDetailsRecord item = new UserDetailsRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static UserDetailsRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(UserDetailsRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static UserDetailsRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(UserDetails.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
