/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.BasketTaxes;
import com.justeat.TakeawaysDBContract.BasketTaxes.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class BasketTaxesRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<BasketTaxesRecord> sFactory = new ActiveRecordFactory<BasketTaxesRecord>() {
		@Override
		public BasketTaxesRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return BasketTaxes.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<BasketTaxesRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<BasketTaxesRecord> CREATOR 
    	= new Parcelable.Creator<BasketTaxesRecord>() {
        public BasketTaxesRecord createFromParcel(Parcel in) {
            return new BasketTaxesRecord(in);
        }

        public BasketTaxesRecord[] newArray(int size) {
            return new BasketTaxesRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	BasketTaxes._ID,
    	BasketTaxes.BASKET_JEID,
    	BasketTaxes.TAX_NAME,
    	BasketTaxes.TAX_RATE,
    	BasketTaxes.TAX_RATE_AMOUNT
    };
    
    public interface Indices {
    	int _ID = 0;
    	int BASKET_JEID = 1;
    	int TAX_NAME = 2;
    	int TAX_RATE = 3;
    	int TAX_RATE_AMOUNT = 4;
    }
    
    private String mBasketJeid;
    private boolean mBasketJeidDirty;
    private String mTaxName;
    private boolean mTaxNameDirty;
    private double mTaxRate;
    private boolean mTaxRateDirty;
    private double mTaxRateAmount;
    private boolean mTaxRateAmountDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setBasketJeid(String basketJeid) {
    	mBasketJeid = basketJeid;
    	mBasketJeidDirty = true;
    }
    
    public String getBasketJeid() {
    	return mBasketJeid;
    }
    
    public void setTaxName(String taxName) {
    	mTaxName = taxName;
    	mTaxNameDirty = true;
    }
    
    public String getTaxName() {
    	return mTaxName;
    }
    
    public void setTaxRate(double taxRate) {
    	mTaxRate = taxRate;
    	mTaxRateDirty = true;
    }
    
    public double getTaxRate() {
    	return mTaxRate;
    }
    
    public void setTaxRateAmount(double taxRateAmount) {
    	mTaxRateAmount = taxRateAmount;
    	mTaxRateAmountDirty = true;
    }
    
    public double getTaxRateAmount() {
    	return mTaxRateAmount;
    }
    
    
    public BasketTaxesRecord() {
    	super(BasketTaxes.CONTENT_URI);
	}
	
	private BasketTaxesRecord(Parcel in) {
    	super(BasketTaxes.CONTENT_URI);
    	
		setId(in.readLong());
		
		mBasketJeid = in.readString();
		mTaxName = in.readString();
		mTaxRate = in.readDouble();
		mTaxRateAmount = in.readDouble();
		
		boolean[] dirtyFlags = new boolean[4];
		in.readBooleanArray(dirtyFlags);
		mBasketJeidDirty = dirtyFlags[0];
		mTaxNameDirty = dirtyFlags[1];
		mTaxRateDirty = dirtyFlags[2];
		mTaxRateAmountDirty = dirtyFlags[3];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeString(mBasketJeid);
		dest.writeString(mTaxName);
		dest.writeDouble(mTaxRate);
		dest.writeDouble(mTaxRateAmount);
		dest.writeBooleanArray(new boolean[] {
			mBasketJeidDirty,
			mTaxNameDirty,
			mTaxRateDirty,
			mTaxRateAmountDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = BasketTaxes.newBuilder();

		if(mBasketJeidDirty) {
			builder.setBasketJeid(mBasketJeid);
		}
		if(mTaxNameDirty) {
			builder.setTaxName(mTaxName);
		}
		if(mTaxRateDirty) {
			builder.setTaxRate(mTaxRate);
		}
		if(mTaxRateAmountDirty) {
			builder.setTaxRateAmount(mTaxRateAmount);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mBasketJeidDirty = dirty;
		mTaxNameDirty = dirty;
		mTaxRateDirty = dirty;
		mTaxRateAmountDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setBasketJeid(c.getString(Indices.BASKET_JEID));
		setTaxName(c.getString(Indices.TAX_NAME));
		setTaxRate(c.getDouble(Indices.TAX_RATE));
		setTaxRateAmount(c.getDouble(Indices.TAX_RATE_AMOUNT));
	}
	
	public static BasketTaxesRecord fromCursor(Cursor c) {
	    BasketTaxesRecord item = new BasketTaxesRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static BasketTaxesRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(BasketTaxesRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static BasketTaxesRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(BasketTaxes.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
