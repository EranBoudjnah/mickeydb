/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.AddressSearchResult;
import com.justeat.TakeawaysDBContract.AddressSearchResult.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class AddressSearchResultRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<AddressSearchResultRecord> sFactory = new ActiveRecordFactory<AddressSearchResultRecord>() {
		@Override
		public AddressSearchResultRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return AddressSearchResult.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<AddressSearchResultRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<AddressSearchResultRecord> CREATOR 
    	= new Parcelable.Creator<AddressSearchResultRecord>() {
        public AddressSearchResultRecord createFromParcel(Parcel in) {
            return new AddressSearchResultRecord(in);
        }

        public AddressSearchResultRecord[] newArray(int size) {
            return new AddressSearchResultRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	AddressSearchResult._ID,
    	AddressSearchResult.ZIPCODE,
    	AddressSearchResult.CITY,
    	AddressSearchResult.ACCESS_COUNT,
    	AddressSearchResult.LAST_TIME_ACCESSED
    };
    
    public interface Indices {
    	int _ID = 0;
    	int ZIPCODE = 1;
    	int CITY = 2;
    	int ACCESS_COUNT = 3;
    	int LAST_TIME_ACCESSED = 4;
    }
    
    private String mZipcode;
    private boolean mZipcodeDirty;
    private String mCity;
    private boolean mCityDirty;
    private long mAccessCount;
    private boolean mAccessCountDirty;
    private long mLastTimeAccessed;
    private boolean mLastTimeAccessedDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setZipcode(String zipcode) {
    	mZipcode = zipcode;
    	mZipcodeDirty = true;
    }
    
    public String getZipcode() {
    	return mZipcode;
    }
    
    public void setCity(String city) {
    	mCity = city;
    	mCityDirty = true;
    }
    
    public String getCity() {
    	return mCity;
    }
    
    public void setAccessCount(long accessCount) {
    	mAccessCount = accessCount;
    	mAccessCountDirty = true;
    }
    
    public long getAccessCount() {
    	return mAccessCount;
    }
    
    public void setLastTimeAccessed(long lastTimeAccessed) {
    	mLastTimeAccessed = lastTimeAccessed;
    	mLastTimeAccessedDirty = true;
    }
    
    public long getLastTimeAccessed() {
    	return mLastTimeAccessed;
    }
    
    
    public AddressSearchResultRecord() {
    	super(AddressSearchResult.CONTENT_URI);
	}
	
	private AddressSearchResultRecord(Parcel in) {
    	super(AddressSearchResult.CONTENT_URI);
    	
		setId(in.readLong());
		
		mZipcode = in.readString();
		mCity = in.readString();
		mAccessCount = in.readLong();
		mLastTimeAccessed = in.readLong();
		
		boolean[] dirtyFlags = new boolean[4];
		in.readBooleanArray(dirtyFlags);
		mZipcodeDirty = dirtyFlags[0];
		mCityDirty = dirtyFlags[1];
		mAccessCountDirty = dirtyFlags[2];
		mLastTimeAccessedDirty = dirtyFlags[3];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeString(mZipcode);
		dest.writeString(mCity);
		dest.writeLong(mAccessCount);
		dest.writeLong(mLastTimeAccessed);
		dest.writeBooleanArray(new boolean[] {
			mZipcodeDirty,
			mCityDirty,
			mAccessCountDirty,
			mLastTimeAccessedDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = AddressSearchResult.newBuilder();

		if(mZipcodeDirty) {
			builder.setZipcode(mZipcode);
		}
		if(mCityDirty) {
			builder.setCity(mCity);
		}
		if(mAccessCountDirty) {
			builder.setAccessCount(mAccessCount);
		}
		if(mLastTimeAccessedDirty) {
			builder.setLastTimeAccessed(mLastTimeAccessed);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mZipcodeDirty = dirty;
		mCityDirty = dirty;
		mAccessCountDirty = dirty;
		mLastTimeAccessedDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setZipcode(c.getString(Indices.ZIPCODE));
		setCity(c.getString(Indices.CITY));
		setAccessCount(c.getLong(Indices.ACCESS_COUNT));
		setLastTimeAccessed(c.getLong(Indices.LAST_TIME_ACCESSED));
	}
	
	public static AddressSearchResultRecord fromCursor(Cursor c) {
	    AddressSearchResultRecord item = new AddressSearchResultRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static AddressSearchResultRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(AddressSearchResultRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static AddressSearchResultRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(AddressSearchResult.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
