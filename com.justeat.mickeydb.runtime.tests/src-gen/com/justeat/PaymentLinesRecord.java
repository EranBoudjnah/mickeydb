/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.PaymentLines;
import com.justeat.TakeawaysDBContract.PaymentLines.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class PaymentLinesRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<PaymentLinesRecord> sFactory = new ActiveRecordFactory<PaymentLinesRecord>() {
		@Override
		public PaymentLinesRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return PaymentLines.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<PaymentLinesRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<PaymentLinesRecord> CREATOR 
    	= new Parcelable.Creator<PaymentLinesRecord>() {
        public PaymentLinesRecord createFromParcel(Parcel in) {
            return new PaymentLinesRecord(in);
        }

        public PaymentLinesRecord[] newArray(int size) {
            return new PaymentLinesRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	PaymentLines._ID,
    	PaymentLines.ORDER_ID,
    	PaymentLines.ITEM_ID,
    	PaymentLines.TYPE,
    	PaymentLines.VALUE,
    	PaymentLines.CARD_TYPE,
    	PaymentLines.CARD_DIGITS
    };
    
    public interface Indices {
    	int _ID = 0;
    	int ORDER_ID = 1;
    	int ITEM_ID = 2;
    	int TYPE = 3;
    	int VALUE = 4;
    	int CARD_TYPE = 5;
    	int CARD_DIGITS = 6;
    }
    
    private String mOrderId;
    private boolean mOrderIdDirty;
    private long mItemId;
    private boolean mItemIdDirty;
    private String mType;
    private boolean mTypeDirty;
    private double mValue;
    private boolean mValueDirty;
    private String mCardType;
    private boolean mCardTypeDirty;
    private String mCardDigits;
    private boolean mCardDigitsDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setOrderId(String orderId) {
    	mOrderId = orderId;
    	mOrderIdDirty = true;
    }
    
    public String getOrderId() {
    	return mOrderId;
    }
    
    public void setItemId(long itemId) {
    	mItemId = itemId;
    	mItemIdDirty = true;
    }
    
    public long getItemId() {
    	return mItemId;
    }
    
    public void setType(String type) {
    	mType = type;
    	mTypeDirty = true;
    }
    
    public String getType() {
    	return mType;
    }
    
    public void setValue(double value) {
    	mValue = value;
    	mValueDirty = true;
    }
    
    public double getValue() {
    	return mValue;
    }
    
    public void setCardType(String cardType) {
    	mCardType = cardType;
    	mCardTypeDirty = true;
    }
    
    public String getCardType() {
    	return mCardType;
    }
    
    public void setCardDigits(String cardDigits) {
    	mCardDigits = cardDigits;
    	mCardDigitsDirty = true;
    }
    
    public String getCardDigits() {
    	return mCardDigits;
    }
    
    
    public PaymentLinesRecord() {
    	super(PaymentLines.CONTENT_URI);
	}
	
	private PaymentLinesRecord(Parcel in) {
    	super(PaymentLines.CONTENT_URI);
    	
		setId(in.readLong());
		
		mOrderId = in.readString();
		mItemId = in.readLong();
		mType = in.readString();
		mValue = in.readDouble();
		mCardType = in.readString();
		mCardDigits = in.readString();
		
		boolean[] dirtyFlags = new boolean[6];
		in.readBooleanArray(dirtyFlags);
		mOrderIdDirty = dirtyFlags[0];
		mItemIdDirty = dirtyFlags[1];
		mTypeDirty = dirtyFlags[2];
		mValueDirty = dirtyFlags[3];
		mCardTypeDirty = dirtyFlags[4];
		mCardDigitsDirty = dirtyFlags[5];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeString(mOrderId);
		dest.writeLong(mItemId);
		dest.writeString(mType);
		dest.writeDouble(mValue);
		dest.writeString(mCardType);
		dest.writeString(mCardDigits);
		dest.writeBooleanArray(new boolean[] {
			mOrderIdDirty,
			mItemIdDirty,
			mTypeDirty,
			mValueDirty,
			mCardTypeDirty,
			mCardDigitsDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = PaymentLines.newBuilder();

		if(mOrderIdDirty) {
			builder.setOrderId(mOrderId);
		}
		if(mItemIdDirty) {
			builder.setItemId(mItemId);
		}
		if(mTypeDirty) {
			builder.setType(mType);
		}
		if(mValueDirty) {
			builder.setValue(mValue);
		}
		if(mCardTypeDirty) {
			builder.setCardType(mCardType);
		}
		if(mCardDigitsDirty) {
			builder.setCardDigits(mCardDigits);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mOrderIdDirty = dirty;
		mItemIdDirty = dirty;
		mTypeDirty = dirty;
		mValueDirty = dirty;
		mCardTypeDirty = dirty;
		mCardDigitsDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setOrderId(c.getString(Indices.ORDER_ID));
		setItemId(c.getLong(Indices.ITEM_ID));
		setType(c.getString(Indices.TYPE));
		setValue(c.getDouble(Indices.VALUE));
		setCardType(c.getString(Indices.CARD_TYPE));
		setCardDigits(c.getString(Indices.CARD_DIGITS));
	}
	
	public static PaymentLinesRecord fromCursor(Cursor c) {
	    PaymentLinesRecord item = new PaymentLinesRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static PaymentLinesRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(PaymentLinesRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static PaymentLinesRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(PaymentLines.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
