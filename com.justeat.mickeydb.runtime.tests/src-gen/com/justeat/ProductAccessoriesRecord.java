/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.ProductAccessories;
import com.justeat.TakeawaysDBContract.ProductAccessories.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class ProductAccessoriesRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<ProductAccessoriesRecord> sFactory = new ActiveRecordFactory<ProductAccessoriesRecord>() {
		@Override
		public ProductAccessoriesRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return ProductAccessories.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<ProductAccessoriesRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<ProductAccessoriesRecord> CREATOR 
    	= new Parcelable.Creator<ProductAccessoriesRecord>() {
        public ProductAccessoriesRecord createFromParcel(Parcel in) {
            return new ProductAccessoriesRecord(in);
        }

        public ProductAccessoriesRecord[] newArray(int size) {
            return new ProductAccessoriesRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	ProductAccessories._ID,
    	ProductAccessories.JEID,
    	ProductAccessories.RESTAURANT_JEID,
    	ProductAccessories.PRODUCT_JEID,
    	ProductAccessories.NAME,
    	ProductAccessories.REQUIRED,
    	ProductAccessories.PRICE,
    	ProductAccessories.SELECTION_ID,
    	ProductAccessories.CREATED
    };
    
    public interface Indices {
    	int _ID = 0;
    	int JEID = 1;
    	int RESTAURANT_JEID = 2;
    	int PRODUCT_JEID = 3;
    	int NAME = 4;
    	int REQUIRED = 5;
    	int PRICE = 6;
    	int SELECTION_ID = 7;
    	int CREATED = 8;
    }
    
    private long mJeid;
    private boolean mJeidDirty;
    private long mRestaurantJeid;
    private boolean mRestaurantJeidDirty;
    private long mProductJeid;
    private boolean mProductJeidDirty;
    private String mName;
    private boolean mNameDirty;
    private boolean mRequired;
    private boolean mRequiredDirty;
    private double mPrice;
    private boolean mPriceDirty;
    private long mSelectionId;
    private boolean mSelectionIdDirty;
    private long mCreated;
    private boolean mCreatedDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setJeid(long jeid) {
    	mJeid = jeid;
    	mJeidDirty = true;
    }
    
    public long getJeid() {
    	return mJeid;
    }
    
    public void setRestaurantJeid(long restaurantJeid) {
    	mRestaurantJeid = restaurantJeid;
    	mRestaurantJeidDirty = true;
    }
    
    public long getRestaurantJeid() {
    	return mRestaurantJeid;
    }
    
    public void setProductJeid(long productJeid) {
    	mProductJeid = productJeid;
    	mProductJeidDirty = true;
    }
    
    public long getProductJeid() {
    	return mProductJeid;
    }
    
    public void setName(String name) {
    	mName = name;
    	mNameDirty = true;
    }
    
    public String getName() {
    	return mName;
    }
    
    public void setRequired(boolean required) {
    	mRequired = required;
    	mRequiredDirty = true;
    }
    
    public boolean getRequired() {
    	return mRequired;
    }
    
    public void setPrice(double price) {
    	mPrice = price;
    	mPriceDirty = true;
    }
    
    public double getPrice() {
    	return mPrice;
    }
    
    public void setSelectionId(long selectionId) {
    	mSelectionId = selectionId;
    	mSelectionIdDirty = true;
    }
    
    public long getSelectionId() {
    	return mSelectionId;
    }
    
    public void setCreated(long created) {
    	mCreated = created;
    	mCreatedDirty = true;
    }
    
    public long getCreated() {
    	return mCreated;
    }
    
    
    public ProductAccessoriesRecord() {
    	super(ProductAccessories.CONTENT_URI);
	}
	
	private ProductAccessoriesRecord(Parcel in) {
    	super(ProductAccessories.CONTENT_URI);
    	
		setId(in.readLong());
		
		mJeid = in.readLong();
		mRestaurantJeid = in.readLong();
		mProductJeid = in.readLong();
		mName = in.readString();
		mRequired = (in.readInt() > 0);
		mPrice = in.readDouble();
		mSelectionId = in.readLong();
		mCreated = in.readLong();
		
		boolean[] dirtyFlags = new boolean[8];
		in.readBooleanArray(dirtyFlags);
		mJeidDirty = dirtyFlags[0];
		mRestaurantJeidDirty = dirtyFlags[1];
		mProductJeidDirty = dirtyFlags[2];
		mNameDirty = dirtyFlags[3];
		mRequiredDirty = dirtyFlags[4];
		mPriceDirty = dirtyFlags[5];
		mSelectionIdDirty = dirtyFlags[6];
		mCreatedDirty = dirtyFlags[7];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mJeid);
		dest.writeLong(mRestaurantJeid);
		dest.writeLong(mProductJeid);
		dest.writeString(mName);
		dest.writeInt(mRequired ? 1 : 0);
		dest.writeDouble(mPrice);
		dest.writeLong(mSelectionId);
		dest.writeLong(mCreated);
		dest.writeBooleanArray(new boolean[] {
			mJeidDirty,
			mRestaurantJeidDirty,
			mProductJeidDirty,
			mNameDirty,
			mRequiredDirty,
			mPriceDirty,
			mSelectionIdDirty,
			mCreatedDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = ProductAccessories.newBuilder();

		if(mJeidDirty) {
			builder.setJeid(mJeid);
		}
		if(mRestaurantJeidDirty) {
			builder.setRestaurantJeid(mRestaurantJeid);
		}
		if(mProductJeidDirty) {
			builder.setProductJeid(mProductJeid);
		}
		if(mNameDirty) {
			builder.setName(mName);
		}
		if(mRequiredDirty) {
			builder.setRequired(mRequired);
		}
		if(mPriceDirty) {
			builder.setPrice(mPrice);
		}
		if(mSelectionIdDirty) {
			builder.setSelectionId(mSelectionId);
		}
		if(mCreatedDirty) {
			builder.setCreated(mCreated);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mJeidDirty = dirty;
		mRestaurantJeidDirty = dirty;
		mProductJeidDirty = dirty;
		mNameDirty = dirty;
		mRequiredDirty = dirty;
		mPriceDirty = dirty;
		mSelectionIdDirty = dirty;
		mCreatedDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setJeid(c.getLong(Indices.JEID));
		setRestaurantJeid(c.getLong(Indices.RESTAURANT_JEID));
		setProductJeid(c.getLong(Indices.PRODUCT_JEID));
		setName(c.getString(Indices.NAME));
		setRequired(c.getInt(Indices.REQUIRED) > 0);
		setPrice(c.getDouble(Indices.PRICE));
		setSelectionId(c.getLong(Indices.SELECTION_ID));
		setCreated(c.getLong(Indices.CREATED));
	}
	
	public static ProductAccessoriesRecord fromCursor(Cursor c) {
	    ProductAccessoriesRecord item = new ProductAccessoriesRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static ProductAccessoriesRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(ProductAccessoriesRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static ProductAccessoriesRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(ProductAccessories.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
