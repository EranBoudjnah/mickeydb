/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.Baskets;
import com.justeat.TakeawaysDBContract.Baskets.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class BasketsRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<BasketsRecord> sFactory = new ActiveRecordFactory<BasketsRecord>() {
		@Override
		public BasketsRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return Baskets.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<BasketsRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<BasketsRecord> CREATOR 
    	= new Parcelable.Creator<BasketsRecord>() {
        public BasketsRecord createFromParcel(Parcel in) {
            return new BasketsRecord(in);
        }

        public BasketsRecord[] newArray(int size) {
            return new BasketsRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	Baskets._ID,
    	Baskets.RESTAURANT_JEID,
    	Baskets.MENU_JEID,
    	Baskets.BASKET_JEID,
    	Baskets.DELIVERY_CHARGE,
    	Baskets.SUB_TOTAL,
    	Baskets.TO_SPEND,
    	Baskets.DISCOUNT,
    	Baskets.MULTIBUY_DISCOUNT,
    	Baskets.TOTAL,
    	Baskets.ORDERABLE,
    	Baskets.USER_PROMPT,
    	Baskets.STATUS,
    	Baskets.RESULT,
    	Baskets.USER_PROMPT_STATUS,
    	Baskets.TOTAL_TIPS_AMOUNT
    };
    
    public interface Indices {
    	int _ID = 0;
    	int RESTAURANT_JEID = 1;
    	int MENU_JEID = 2;
    	int BASKET_JEID = 3;
    	int DELIVERY_CHARGE = 4;
    	int SUB_TOTAL = 5;
    	int TO_SPEND = 6;
    	int DISCOUNT = 7;
    	int MULTIBUY_DISCOUNT = 8;
    	int TOTAL = 9;
    	int ORDERABLE = 10;
    	int USER_PROMPT = 11;
    	int STATUS = 12;
    	int RESULT = 13;
    	int USER_PROMPT_STATUS = 14;
    	int TOTAL_TIPS_AMOUNT = 15;
    }
    
    private long mRestaurantJeid;
    private boolean mRestaurantJeidDirty;
    private long mMenuJeid;
    private boolean mMenuJeidDirty;
    private String mBasketJeid;
    private boolean mBasketJeidDirty;
    private double mDeliveryCharge;
    private boolean mDeliveryChargeDirty;
    private double mSubTotal;
    private boolean mSubTotalDirty;
    private double mToSpend;
    private boolean mToSpendDirty;
    private double mDiscount;
    private boolean mDiscountDirty;
    private double mMultibuyDiscount;
    private boolean mMultibuyDiscountDirty;
    private double mTotal;
    private boolean mTotalDirty;
    private boolean mOrderable;
    private boolean mOrderableDirty;
    private String mUserPrompt;
    private boolean mUserPromptDirty;
    private long mStatus;
    private boolean mStatusDirty;
    private long mResult;
    private boolean mResultDirty;
    private String mUserPromptStatus;
    private boolean mUserPromptStatusDirty;
    private double mTotalTipsAmount;
    private boolean mTotalTipsAmountDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setRestaurantJeid(long restaurantJeid) {
    	mRestaurantJeid = restaurantJeid;
    	mRestaurantJeidDirty = true;
    }
    
    public long getRestaurantJeid() {
    	return mRestaurantJeid;
    }
    
    public void setMenuJeid(long menuJeid) {
    	mMenuJeid = menuJeid;
    	mMenuJeidDirty = true;
    }
    
    public long getMenuJeid() {
    	return mMenuJeid;
    }
    
    public void setBasketJeid(String basketJeid) {
    	mBasketJeid = basketJeid;
    	mBasketJeidDirty = true;
    }
    
    public String getBasketJeid() {
    	return mBasketJeid;
    }
    
    public void setDeliveryCharge(double deliveryCharge) {
    	mDeliveryCharge = deliveryCharge;
    	mDeliveryChargeDirty = true;
    }
    
    public double getDeliveryCharge() {
    	return mDeliveryCharge;
    }
    
    public void setSubTotal(double subTotal) {
    	mSubTotal = subTotal;
    	mSubTotalDirty = true;
    }
    
    public double getSubTotal() {
    	return mSubTotal;
    }
    
    public void setToSpend(double toSpend) {
    	mToSpend = toSpend;
    	mToSpendDirty = true;
    }
    
    public double getToSpend() {
    	return mToSpend;
    }
    
    public void setDiscount(double discount) {
    	mDiscount = discount;
    	mDiscountDirty = true;
    }
    
    public double getDiscount() {
    	return mDiscount;
    }
    
    public void setMultibuyDiscount(double multibuyDiscount) {
    	mMultibuyDiscount = multibuyDiscount;
    	mMultibuyDiscountDirty = true;
    }
    
    public double getMultibuyDiscount() {
    	return mMultibuyDiscount;
    }
    
    public void setTotal(double total) {
    	mTotal = total;
    	mTotalDirty = true;
    }
    
    public double getTotal() {
    	return mTotal;
    }
    
    public void setOrderable(boolean orderable) {
    	mOrderable = orderable;
    	mOrderableDirty = true;
    }
    
    public boolean getOrderable() {
    	return mOrderable;
    }
    
    public void setUserPrompt(String userPrompt) {
    	mUserPrompt = userPrompt;
    	mUserPromptDirty = true;
    }
    
    public String getUserPrompt() {
    	return mUserPrompt;
    }
    
    public void setStatus(long status) {
    	mStatus = status;
    	mStatusDirty = true;
    }
    
    public long getStatus() {
    	return mStatus;
    }
    
    public void setResult(long result) {
    	mResult = result;
    	mResultDirty = true;
    }
    
    public long getResult() {
    	return mResult;
    }
    
    public void setUserPromptStatus(String userPromptStatus) {
    	mUserPromptStatus = userPromptStatus;
    	mUserPromptStatusDirty = true;
    }
    
    public String getUserPromptStatus() {
    	return mUserPromptStatus;
    }
    
    public void setTotalTipsAmount(double totalTipsAmount) {
    	mTotalTipsAmount = totalTipsAmount;
    	mTotalTipsAmountDirty = true;
    }
    
    public double getTotalTipsAmount() {
    	return mTotalTipsAmount;
    }
    
    
    public BasketsRecord() {
    	super(Baskets.CONTENT_URI);
	}
	
	private BasketsRecord(Parcel in) {
    	super(Baskets.CONTENT_URI);
    	
		setId(in.readLong());
		
		mRestaurantJeid = in.readLong();
		mMenuJeid = in.readLong();
		mBasketJeid = in.readString();
		mDeliveryCharge = in.readDouble();
		mSubTotal = in.readDouble();
		mToSpend = in.readDouble();
		mDiscount = in.readDouble();
		mMultibuyDiscount = in.readDouble();
		mTotal = in.readDouble();
		mOrderable = (in.readInt() > 0);
		mUserPrompt = in.readString();
		mStatus = in.readLong();
		mResult = in.readLong();
		mUserPromptStatus = in.readString();
		mTotalTipsAmount = in.readDouble();
		
		boolean[] dirtyFlags = new boolean[15];
		in.readBooleanArray(dirtyFlags);
		mRestaurantJeidDirty = dirtyFlags[0];
		mMenuJeidDirty = dirtyFlags[1];
		mBasketJeidDirty = dirtyFlags[2];
		mDeliveryChargeDirty = dirtyFlags[3];
		mSubTotalDirty = dirtyFlags[4];
		mToSpendDirty = dirtyFlags[5];
		mDiscountDirty = dirtyFlags[6];
		mMultibuyDiscountDirty = dirtyFlags[7];
		mTotalDirty = dirtyFlags[8];
		mOrderableDirty = dirtyFlags[9];
		mUserPromptDirty = dirtyFlags[10];
		mStatusDirty = dirtyFlags[11];
		mResultDirty = dirtyFlags[12];
		mUserPromptStatusDirty = dirtyFlags[13];
		mTotalTipsAmountDirty = dirtyFlags[14];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mRestaurantJeid);
		dest.writeLong(mMenuJeid);
		dest.writeString(mBasketJeid);
		dest.writeDouble(mDeliveryCharge);
		dest.writeDouble(mSubTotal);
		dest.writeDouble(mToSpend);
		dest.writeDouble(mDiscount);
		dest.writeDouble(mMultibuyDiscount);
		dest.writeDouble(mTotal);
		dest.writeInt(mOrderable ? 1 : 0);
		dest.writeString(mUserPrompt);
		dest.writeLong(mStatus);
		dest.writeLong(mResult);
		dest.writeString(mUserPromptStatus);
		dest.writeDouble(mTotalTipsAmount);
		dest.writeBooleanArray(new boolean[] {
			mRestaurantJeidDirty,
			mMenuJeidDirty,
			mBasketJeidDirty,
			mDeliveryChargeDirty,
			mSubTotalDirty,
			mToSpendDirty,
			mDiscountDirty,
			mMultibuyDiscountDirty,
			mTotalDirty,
			mOrderableDirty,
			mUserPromptDirty,
			mStatusDirty,
			mResultDirty,
			mUserPromptStatusDirty,
			mTotalTipsAmountDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = Baskets.newBuilder();

		if(mRestaurantJeidDirty) {
			builder.setRestaurantJeid(mRestaurantJeid);
		}
		if(mMenuJeidDirty) {
			builder.setMenuJeid(mMenuJeid);
		}
		if(mBasketJeidDirty) {
			builder.setBasketJeid(mBasketJeid);
		}
		if(mDeliveryChargeDirty) {
			builder.setDeliveryCharge(mDeliveryCharge);
		}
		if(mSubTotalDirty) {
			builder.setSubTotal(mSubTotal);
		}
		if(mToSpendDirty) {
			builder.setToSpend(mToSpend);
		}
		if(mDiscountDirty) {
			builder.setDiscount(mDiscount);
		}
		if(mMultibuyDiscountDirty) {
			builder.setMultibuyDiscount(mMultibuyDiscount);
		}
		if(mTotalDirty) {
			builder.setTotal(mTotal);
		}
		if(mOrderableDirty) {
			builder.setOrderable(mOrderable);
		}
		if(mUserPromptDirty) {
			builder.setUserPrompt(mUserPrompt);
		}
		if(mStatusDirty) {
			builder.setStatus(mStatus);
		}
		if(mResultDirty) {
			builder.setResult(mResult);
		}
		if(mUserPromptStatusDirty) {
			builder.setUserPromptStatus(mUserPromptStatus);
		}
		if(mTotalTipsAmountDirty) {
			builder.setTotalTipsAmount(mTotalTipsAmount);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mRestaurantJeidDirty = dirty;
		mMenuJeidDirty = dirty;
		mBasketJeidDirty = dirty;
		mDeliveryChargeDirty = dirty;
		mSubTotalDirty = dirty;
		mToSpendDirty = dirty;
		mDiscountDirty = dirty;
		mMultibuyDiscountDirty = dirty;
		mTotalDirty = dirty;
		mOrderableDirty = dirty;
		mUserPromptDirty = dirty;
		mStatusDirty = dirty;
		mResultDirty = dirty;
		mUserPromptStatusDirty = dirty;
		mTotalTipsAmountDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setRestaurantJeid(c.getLong(Indices.RESTAURANT_JEID));
		setMenuJeid(c.getLong(Indices.MENU_JEID));
		setBasketJeid(c.getString(Indices.BASKET_JEID));
		setDeliveryCharge(c.getDouble(Indices.DELIVERY_CHARGE));
		setSubTotal(c.getDouble(Indices.SUB_TOTAL));
		setToSpend(c.getDouble(Indices.TO_SPEND));
		setDiscount(c.getDouble(Indices.DISCOUNT));
		setMultibuyDiscount(c.getDouble(Indices.MULTIBUY_DISCOUNT));
		setTotal(c.getDouble(Indices.TOTAL));
		setOrderable(c.getInt(Indices.ORDERABLE) > 0);
		setUserPrompt(c.getString(Indices.USER_PROMPT));
		setStatus(c.getLong(Indices.STATUS));
		setResult(c.getLong(Indices.RESULT));
		setUserPromptStatus(c.getString(Indices.USER_PROMPT_STATUS));
		setTotalTipsAmount(c.getDouble(Indices.TOTAL_TIPS_AMOUNT));
	}
	
	public static BasketsRecord fromCursor(Cursor c) {
	    BasketsRecord item = new BasketsRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static BasketsRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(BasketsRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static BasketsRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(Baskets.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
