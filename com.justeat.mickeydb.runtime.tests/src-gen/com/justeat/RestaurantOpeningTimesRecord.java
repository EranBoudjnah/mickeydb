/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.RestaurantOpeningTimes;
import com.justeat.TakeawaysDBContract.RestaurantOpeningTimes.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class RestaurantOpeningTimesRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<RestaurantOpeningTimesRecord> sFactory = new ActiveRecordFactory<RestaurantOpeningTimesRecord>() {
		@Override
		public RestaurantOpeningTimesRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return RestaurantOpeningTimes.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<RestaurantOpeningTimesRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<RestaurantOpeningTimesRecord> CREATOR 
    	= new Parcelable.Creator<RestaurantOpeningTimesRecord>() {
        public RestaurantOpeningTimesRecord createFromParcel(Parcel in) {
            return new RestaurantOpeningTimesRecord(in);
        }

        public RestaurantOpeningTimesRecord[] newArray(int size) {
            return new RestaurantOpeningTimesRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	RestaurantOpeningTimes._ID,
    	RestaurantOpeningTimes.RESTAURANT_JEID,
    	RestaurantOpeningTimes.DAY,
    	RestaurantOpeningTimes.DAY_TEXT,
    	RestaurantOpeningTimes.OPEN,
    	RestaurantOpeningTimes.CLOSED,
    	RestaurantOpeningTimes.RANK
    };
    
    public interface Indices {
    	int _ID = 0;
    	int RESTAURANT_JEID = 1;
    	int DAY = 2;
    	int DAY_TEXT = 3;
    	int OPEN = 4;
    	int CLOSED = 5;
    	int RANK = 6;
    }
    
    private long mRestaurantJeid;
    private boolean mRestaurantJeidDirty;
    private long mDay;
    private boolean mDayDirty;
    private String mDayText;
    private boolean mDayTextDirty;
    private String mOpen;
    private boolean mOpenDirty;
    private String mClosed;
    private boolean mClosedDirty;
    private long mRank;
    private boolean mRankDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setRestaurantJeid(long restaurantJeid) {
    	mRestaurantJeid = restaurantJeid;
    	mRestaurantJeidDirty = true;
    }
    
    public long getRestaurantJeid() {
    	return mRestaurantJeid;
    }
    
    public void setDay(long day) {
    	mDay = day;
    	mDayDirty = true;
    }
    
    public long getDay() {
    	return mDay;
    }
    
    public void setDayText(String dayText) {
    	mDayText = dayText;
    	mDayTextDirty = true;
    }
    
    public String getDayText() {
    	return mDayText;
    }
    
    public void setOpen(String open) {
    	mOpen = open;
    	mOpenDirty = true;
    }
    
    public String getOpen() {
    	return mOpen;
    }
    
    public void setClosed(String closed) {
    	mClosed = closed;
    	mClosedDirty = true;
    }
    
    public String getClosed() {
    	return mClosed;
    }
    
    public void setRank(long rank) {
    	mRank = rank;
    	mRankDirty = true;
    }
    
    public long getRank() {
    	return mRank;
    }
    
    
    public RestaurantOpeningTimesRecord() {
    	super(RestaurantOpeningTimes.CONTENT_URI);
	}
	
	private RestaurantOpeningTimesRecord(Parcel in) {
    	super(RestaurantOpeningTimes.CONTENT_URI);
    	
		setId(in.readLong());
		
		mRestaurantJeid = in.readLong();
		mDay = in.readLong();
		mDayText = in.readString();
		mOpen = in.readString();
		mClosed = in.readString();
		mRank = in.readLong();
		
		boolean[] dirtyFlags = new boolean[6];
		in.readBooleanArray(dirtyFlags);
		mRestaurantJeidDirty = dirtyFlags[0];
		mDayDirty = dirtyFlags[1];
		mDayTextDirty = dirtyFlags[2];
		mOpenDirty = dirtyFlags[3];
		mClosedDirty = dirtyFlags[4];
		mRankDirty = dirtyFlags[5];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeLong(mRestaurantJeid);
		dest.writeLong(mDay);
		dest.writeString(mDayText);
		dest.writeString(mOpen);
		dest.writeString(mClosed);
		dest.writeLong(mRank);
		dest.writeBooleanArray(new boolean[] {
			mRestaurantJeidDirty,
			mDayDirty,
			mDayTextDirty,
			mOpenDirty,
			mClosedDirty,
			mRankDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = RestaurantOpeningTimes.newBuilder();

		if(mRestaurantJeidDirty) {
			builder.setRestaurantJeid(mRestaurantJeid);
		}
		if(mDayDirty) {
			builder.setDay(mDay);
		}
		if(mDayTextDirty) {
			builder.setDayText(mDayText);
		}
		if(mOpenDirty) {
			builder.setOpen(mOpen);
		}
		if(mClosedDirty) {
			builder.setClosed(mClosed);
		}
		if(mRankDirty) {
			builder.setRank(mRank);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mRestaurantJeidDirty = dirty;
		mDayDirty = dirty;
		mDayTextDirty = dirty;
		mOpenDirty = dirty;
		mClosedDirty = dirty;
		mRankDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setRestaurantJeid(c.getLong(Indices.RESTAURANT_JEID));
		setDay(c.getLong(Indices.DAY));
		setDayText(c.getString(Indices.DAY_TEXT));
		setOpen(c.getString(Indices.OPEN));
		setClosed(c.getString(Indices.CLOSED));
		setRank(c.getLong(Indices.RANK));
	}
	
	public static RestaurantOpeningTimesRecord fromCursor(Cursor c) {
	    RestaurantOpeningTimesRecord item = new RestaurantOpeningTimesRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static RestaurantOpeningTimesRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(RestaurantOpeningTimesRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static RestaurantOpeningTimesRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(RestaurantOpeningTimes.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
