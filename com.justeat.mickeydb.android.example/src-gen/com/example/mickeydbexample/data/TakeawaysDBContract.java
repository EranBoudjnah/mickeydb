/*
 * Generated by MickeyDB
 */
package com.example.mickeydbexample.data;

import android.net.Uri;
import android.provider.BaseColumns;
import com.justeat.mickeydb.AbstractValuesBuilder;
import com.justeat.mickeydb.Mickey;
import java.lang.reflect.Field;			
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Set;
import java.util.Map;

public class TakeawaysDBContract  {
    public static final String CONTENT_AUTHORITY = initAuthority();

	private static String initAuthority() {
		String authority = "com.example.mickeydbexample.data.takeawaysdb";

		try {
    		
    		ClassLoader loader = TakeawaysDBContract.class.getClassLoader();
    		
			Class<?> clz = loader.loadClass("com.example.mickeydbexample.data.TakeawaysDBContentProviderAuthority");
			Field declaredField = clz.getDeclaredField("CONTENT_AUTHORITY");
			
			authority = declaredField.get(null).toString();
		} catch (ClassNotFoundException e) {} 
    	catch (NoSuchFieldException e) {} 
    	catch (IllegalArgumentException e) {
		} catch (IllegalAccessException e) {
		}
		
		return authority;
	}
	
    private static final Uri BASE_CONTENT_URI = Uri.parse("content://" + CONTENT_AUTHORITY);

	interface RestaurantsColumns {
		String NAME = "name";
		String CITY = "city";
		String CUISINES = "cuisines";
		String RATING = "rating";
		String DESCRIPTION = "description";
		String HAS_VEGETARIAN = "has_vegetarian";
	}
	
	interface AllRestaurantsColumns {
		String TAKEAWAY_NAME = "takeaway_name";
		String TAKEAWAY_DESCRIPTION = "takeaway_description";
		String TAKEAWAY_CITY = "takeaway_city";
		String TAKEAWAY_CUISINES = "takeaway_cuisines";
		String TAKEAWAY_RATING = "takeaway_rating";
	}
	
			
	/**
	 * <p>Column definitions and helper methods to work with the Restaurants.</p>
	 */
	public static class Restaurants implements RestaurantsColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("restaurants").build();
	
		/**
		 * <p>The content type for a cursor that contains many Restaurants rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.restaurants";
	
		/**
		 * <p>The content type for a cursor that contains a single Restaurants row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.restaurants";
	
		/**
		 * <p>Builds a Uri with appended id for a row in Restaurants, 
		 * eg:- content://com.example.mickeydbexample.data.takeawaysdb/restaurants/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mickey.getContentResolver().delete(Restaurants.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mickey.getContentResolver().delete(Restaurants.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for Restaurants</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for Restaurants.</p>
		 *
		 * <p>Use {@link Restaurants#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mickey.getApplicationContext(), Restaurants.CONTENT_URI);
			}
			
			public Builder setName(String value) {
				mValues.put(Restaurants.NAME, value);
				return this;
			}
			public Builder setCity(String value) {
				mValues.put(Restaurants.CITY, value);
				return this;
			}
			public Builder setCuisines(String value) {
				mValues.put(Restaurants.CUISINES, value);
				return this;
			}
			public Builder setRating(double value) {
				mValues.put(Restaurants.RATING, value);
				return this;
			}
			public Builder setDescription(String value) {
				mValues.put(Restaurants.DESCRIPTION, value);
				return this;
			}
			public Builder setHasVegetarian(boolean value) {
				mValues.put(Restaurants.HAS_VEGETARIAN, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			viewUris.add(AllRestaurants.CONTENT_URI);
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}

	

	/**
	 * <p>Column definitions and helper methods to work with the AllRestaurants.</p>
	 */
	public static class AllRestaurants implements AllRestaurantsColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("all_restaurants").build();
	
		/**
		 * <p>The content type for a cursor that contains many AllRestaurants rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.all_restaurants";
	
		/**
		 * <p>The content type for a cursor that contains a single AllRestaurants row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.all_restaurants";
	
		/**
		 * <p>Builds a Uri with appended id for a row in AllRestaurants, 
		 * eg:- content://com.example.mickeydbexample.data.takeawaysdb/all_restaurants/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mickey.getContentResolver().delete(AllRestaurants.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mickey.getContentResolver().delete(AllRestaurants.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for AllRestaurants</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for AllRestaurants.</p>
		 *
		 * <p>Use {@link AllRestaurants#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mickey.getApplicationContext(), AllRestaurants.CONTENT_URI);
			}
			
			public Builder setTakeawayName(String value) {
				mValues.put(AllRestaurants.TAKEAWAY_NAME, value);
				return this;
			}
			public Builder setTakeawayDescription(String value) {
				mValues.put(AllRestaurants.TAKEAWAY_DESCRIPTION, value);
				return this;
			}
			public Builder setTakeawayCity(String value) {
				mValues.put(AllRestaurants.TAKEAWAY_CITY, value);
				return this;
			}
			public Builder setTakeawayCuisines(String value) {
				mValues.put(AllRestaurants.TAKEAWAY_CUISINES, value);
				return this;
			}
			public Builder setTakeawayRating(double value) {
				mValues.put(AllRestaurants.TAKEAWAY_RATING, value);
				return this;
			}
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}
	
	static Map<Uri, Set<Uri>> REFERENCING_VIEWS;
	
	static {
		Map<Uri, Set<Uri>> map = new HashMap<Uri, Set<Uri>>();
		
		map.put(Restaurants.CONTENT_URI, Restaurants.VIEW_URIS);
		map.put(AllRestaurants.CONTENT_URI, AllRestaurants.VIEW_URIS);
		
		REFERENCING_VIEWS = Collections.unmodifiableMap(map);
		
	}
	
	private TakeawaysDBContract(){}
	
	/**
	 * <p>Delete all rows from all tables</p>
	 */						
	public static void deleteAll() {
		Restaurants.delete();
	}
}
