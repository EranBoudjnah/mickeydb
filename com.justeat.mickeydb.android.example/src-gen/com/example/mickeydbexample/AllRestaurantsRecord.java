/*
 * Generated by Mickey DB
 */
package com.example.mickeydbexample;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.example.mickeydbexample.TakeawaysDBContract.AllRestaurants;
import com.example.mickeydbexample.TakeawaysDBContract.AllRestaurants.Builder;
import com.justeat.mickeydb.util.Closeables;
import com.justeat.mickeydb.ActiveRecord;
import com.justeat.mickeydb.ActiveRecordFactory;
import com.justeat.mickeydb.Mickey;
import com.justeat.mickeydb.AbstractValuesBuilder;

public class AllRestaurantsRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<AllRestaurantsRecord> sFactory = new ActiveRecordFactory<AllRestaurantsRecord>() {
		@Override
		public AllRestaurantsRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
		public Uri getContentUri() {
		    return AllRestaurants.CONTENT_URI;
		}
	};

public static ActiveRecordFactory<AllRestaurantsRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<AllRestaurantsRecord> CREATOR 
    	= new Parcelable.Creator<AllRestaurantsRecord>() {
        public AllRestaurantsRecord createFromParcel(Parcel in) {
            return new AllRestaurantsRecord(in);
        }

        public AllRestaurantsRecord[] newArray(int size) {
            return new AllRestaurantsRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	AllRestaurants._ID,
    	AllRestaurants.TAKEAWAY_NAME,
    	AllRestaurants.TAKEAWAY_DESCRIPTION,
    	AllRestaurants.TAKEAWAY_CITY,
    	AllRestaurants.TAKEAWAY_CUISINES,
    	AllRestaurants.TAKEAWAY_RATING
    };
    
    public interface Indices {
    	int _ID = 0;
    	int TAKEAWAY_NAME = 1;
    	int TAKEAWAY_DESCRIPTION = 2;
    	int TAKEAWAY_CITY = 3;
    	int TAKEAWAY_CUISINES = 4;
    	int TAKEAWAY_RATING = 5;
    }
    
    private String mTakeawayName;
    private boolean mTakeawayNameDirty;
    private String mTakeawayDescription;
    private boolean mTakeawayDescriptionDirty;
    private String mTakeawayCity;
    private boolean mTakeawayCityDirty;
    private String mTakeawayCuisines;
    private boolean mTakeawayCuisinesDirty;
    private double mTakeawayRating;
    private boolean mTakeawayRatingDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setTakeawayName(String takeawayName) {
    	mTakeawayName = takeawayName;
    	mTakeawayNameDirty = true;
    }
    
    public String getTakeawayName() {
    	return mTakeawayName;
    }
    public void setTakeawayDescription(String takeawayDescription) {
    	mTakeawayDescription = takeawayDescription;
    	mTakeawayDescriptionDirty = true;
    }
    
    public String getTakeawayDescription() {
    	return mTakeawayDescription;
    }
    public void setTakeawayCity(String takeawayCity) {
    	mTakeawayCity = takeawayCity;
    	mTakeawayCityDirty = true;
    }
    
    public String getTakeawayCity() {
    	return mTakeawayCity;
    }
    public void setTakeawayCuisines(String takeawayCuisines) {
    	mTakeawayCuisines = takeawayCuisines;
    	mTakeawayCuisinesDirty = true;
    }
    
    public String getTakeawayCuisines() {
    	return mTakeawayCuisines;
    }
    public void setTakeawayRating(double takeawayRating) {
    	mTakeawayRating = takeawayRating;
    	mTakeawayRatingDirty = true;
    }
    
    public double getTakeawayRating() {
    	return mTakeawayRating;
    }
    
    public AllRestaurantsRecord() {
    	super(AllRestaurants.CONTENT_URI);
	}
	
	private AllRestaurantsRecord(Parcel in) {
    	super(AllRestaurants.CONTENT_URI);
    	
		setId(in.readLong());
		
		mTakeawayName = in.readString();
		mTakeawayDescription = in.readString();
		mTakeawayCity = in.readString();
		mTakeawayCuisines = in.readString();
		mTakeawayRating = in.readDouble();
		
		boolean[] dirtyFlags = new boolean[5];
		in.readBooleanArray(dirtyFlags);
		mTakeawayNameDirty = dirtyFlags[0];
		mTakeawayDescriptionDirty = dirtyFlags[1];
		mTakeawayCityDirty = dirtyFlags[2];
		mTakeawayCuisinesDirty = dirtyFlags[3];
		mTakeawayRatingDirty = dirtyFlags[4];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeString(mTakeawayName);
		dest.writeString(mTakeawayDescription);
		dest.writeString(mTakeawayCity);
		dest.writeString(mTakeawayCuisines);
		dest.writeDouble(mTakeawayRating);
		dest.writeBooleanArray(new boolean[] {
			mTakeawayNameDirty,
			mTakeawayDescriptionDirty,
			mTakeawayCityDirty,
			mTakeawayCuisinesDirty,
			mTakeawayRatingDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = AllRestaurants.newBuilder();

		if(mTakeawayNameDirty) {
			builder.setTakeawayName(mTakeawayName);
		}
		if(mTakeawayDescriptionDirty) {
			builder.setTakeawayDescription(mTakeawayDescription);
		}
		if(mTakeawayCityDirty) {
			builder.setTakeawayCity(mTakeawayCity);
		}
		if(mTakeawayCuisinesDirty) {
			builder.setTakeawayCuisines(mTakeawayCuisines);
		}
		if(mTakeawayRatingDirty) {
			builder.setTakeawayRating(mTakeawayRating);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mTakeawayNameDirty = dirty;
		mTakeawayDescriptionDirty = dirty;
		mTakeawayCityDirty = dirty;
		mTakeawayCuisinesDirty = dirty;
		mTakeawayRatingDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setTakeawayName(c.getString(Indices.TAKEAWAY_NAME));
		setTakeawayDescription(c.getString(Indices.TAKEAWAY_DESCRIPTION));
		setTakeawayCity(c.getString(Indices.TAKEAWAY_CITY));
		setTakeawayCuisines(c.getString(Indices.TAKEAWAY_CUISINES));
		setTakeawayRating(c.getDouble(Indices.TAKEAWAY_RATING));
	}
	
	public static AllRestaurantsRecord fromCursor(Cursor c) {
	    AllRestaurantsRecord item = new AllRestaurantsRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static AllRestaurantsRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(AllRestaurantsRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static AllRestaurantsRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mickey.getContentResolver();
	    
	    try {
	        c = resolver.query(AllRestaurants.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
