/*
 * Generated by MickeyDB
 */
package com.justeat.example.db;

import android.net.Uri;
import android.provider.BaseColumns;
import com.justeat.mickeydb.AbstractValuesBuilder;
import com.justeat.mickeydb.Mickey;
import java.lang.reflect.Field;			
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Set;
import java.util.Map;

public class TakeawaysDBContract  {
    public static final String CONTENT_AUTHORITY = initAuthority();

	private static String initAuthority() {
		String authority = "com.justeat.example.db.takeawaysdb";

		try {
    		
    		ClassLoader loader = TakeawaysDBContract.class.getClassLoader();
    		
			Class<?> clz = loader.loadClass("com.justeat.example.db.TakeawaysDBContentProviderAuthority");
			Field declaredField = clz.getDeclaredField("CONTENT_AUTHORITY");
			
			authority = declaredField.get(null).toString();
		} catch (ClassNotFoundException e) {} 
    	catch (NoSuchFieldException e) {} 
    	catch (IllegalArgumentException e) {
		} catch (IllegalAccessException e) {
		}
		
		return authority;
	}
	
    private static final Uri BASE_CONTENT_URI = Uri.parse("content://" + CONTENT_AUTHORITY);

	interface TakeawaysColumns {
	}
	
			
	/**
	 * <p>Column definitions and helper methods to work with the Takeaways.</p>
	 */
	public static class Takeaways implements TakeawaysColumns, BaseColumns {
	    public static final Uri CONTENT_URI = 
				BASE_CONTENT_URI.buildUpon().appendPath("takeaways").build();
	
		/**
		 * <p>The content type for a cursor that contains many Takeaways rows.</p>
		 */
	    public static final String CONTENT_TYPE =
	            "vnd.android.cursor.dir/vnd.takeawaysdb.takeaways";
	
		/**
		 * <p>The content type for a cursor that contains a single Takeaways row.</p>
		 */
		public static final String ITEM_CONTENT_TYPE =
			"vnd.android.cursor.item/vnd.takeawaysdb.takeaways";
	
		/**
		 * <p>Builds a Uri with appended id for a row in Takeaways, 
		 * eg:- content://com.justeat.example.db.takeawaysdb/takeaways/123.</p>
		 */
	    public static Uri buildUriWithId(long id) {
	        return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();
	    }
		public static int delete() {
			return Mickey.getContentResolver().delete(Takeaways.CONTENT_URI, null, null);
		}
		
		public static int delete(String where, String[] selectionArgs) {
			return Mickey.getContentResolver().delete(Takeaways.CONTENT_URI, where, selectionArgs);
		}
		
		/**
		 * <p>Create a new Builder for Takeaways</p>
		 */
		public static Builder newBuilder() {
			return new Builder();
		}
		
		/**
		 * <p>Build and execute insert or update statements for Takeaways.</p>
		 *
		 * <p>Use {@link Takeaways#newBuilder()} to create new builder</p>
		 */
		public static class Builder extends AbstractValuesBuilder {
			private Builder() {
				super(Mickey.getApplicationContext(), Takeaways.CONTENT_URI);
			}
			
		}
		
		static final Set<Uri> VIEW_URIS;
		
		static {
			HashSet<Uri> viewUris =  new HashSet<Uri>();
	
			
			VIEW_URIS = Collections.unmodifiableSet(viewUris);
		}
	}

	

	
	static Map<Uri, Set<Uri>> REFERENCING_VIEWS;
	
	static {
		Map<Uri, Set<Uri>> map = new HashMap<Uri, Set<Uri>>();
		
		map.put(Takeaways.CONTENT_URI, Takeaways.VIEW_URIS);
		
		REFERENCING_VIEWS = Collections.unmodifiableMap(map);
		
	}
	
	private TakeawaysDBContract(){}
	
	/**
	 * <p>Delete all rows from all tables</p>
	 */						
	public static void deleteAll() {
		Takeaways.delete();
	}
}
