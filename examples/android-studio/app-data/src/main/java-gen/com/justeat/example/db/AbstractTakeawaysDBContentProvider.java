/*
 * Generated by Mickey DB
 */
package com.justeat.example.db;

import android.content.Context;
import android.content.UriMatcher;
import android.net.Uri;
import java.util.Set;
import com.justeat.mickeydb.MickeyContentProvider;
import com.justeat.mickeydb.MickeyOpenHelper;
import com.justeat.mickeydb.DefaultContentProviderActions;
import com.justeat.mickeydb.ContentProviderActions;
import com.justeat.example.db.AbstractTakeawaysDBOpenHelper.Sources;
import com.justeat.example.db.TakeawaysRecord;

public abstract class AbstractTakeawaysDBContentProvider extends MickeyContentProvider {

	public static final int TAKEAWAYS = 0;
	public static final int TAKEAWAYS_ID = 1;

	
	public static final int NUM_URI_MATCHERS = 2;

	@Override
    protected UriMatcher createUriMatcher() {
        final UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH);
        final String authority = TakeawaysDBContract.CONTENT_AUTHORITY;

		matcher.addURI(authority, "takeaways", TAKEAWAYS);
		matcher.addURI(authority, "takeaways/#", TAKEAWAYS_ID);

		// User Actions
        return matcher;
    }
    
    @Override
    protected String[] createContentTypes() {
		String[] contentTypes = new String[NUM_URI_MATCHERS];

		contentTypes[TAKEAWAYS] = TakeawaysDBContract.Takeaways.CONTENT_TYPE;
		contentTypes[TAKEAWAYS_ID] = TakeawaysDBContract.Takeaways.ITEM_CONTENT_TYPE;
		
		return contentTypes;
    }

	@Override
	protected MickeyOpenHelper createOpenHelper(Context context) {
        return new TakeawaysDBOpenHelper(context);
	}
	
	@Override
	protected Set<Uri> getRelatedUris(Uri uri) {
		return TakeawaysDBContract.REFERENCING_VIEWS.get(uri);
	}
    
    @Override
    protected ContentProviderActions createActions(int id) {
    	switch(id) {
			case TAKEAWAYS: 
				return createTakeawaysActions();
			case TAKEAWAYS_ID:
				return createTakeawaysByIdActions();
			default:
				throw new UnsupportedOperationException("Unknown id: " + id);
    	}
    }
    
    protected ContentProviderActions createTakeawaysByIdActions() {
    	return new DefaultContentProviderActions(Sources.TAKEAWAYS, true, TakeawaysRecord.getFactory());
    }
    
    protected ContentProviderActions createTakeawaysActions() {
    	return new DefaultContentProviderActions(Sources.TAKEAWAYS, false, TakeawaysRecord.getFactory());
    }
    
}
