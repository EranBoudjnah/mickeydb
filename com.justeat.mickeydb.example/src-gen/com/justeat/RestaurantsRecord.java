/*
 * Generated by Robotoworks Mechanoid
 */
package com.justeat;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.net.Uri;
import com.justeat.TakeawaysDBContract.Restaurants;
import com.justeat.TakeawaysDBContract.Restaurants.Builder;
import com.robotoworks.mechanoid.util.Closeables;
import com.robotoworks.mechanoid.db.ActiveRecord;
import com.robotoworks.mechanoid.db.ActiveRecordFactory;
import com.robotoworks.mechanoid.Mechanoid;
import com.robotoworks.mechanoid.db.AbstractValuesBuilder;

public class RestaurantsRecord extends ActiveRecord implements Parcelable {

	private static ActiveRecordFactory<RestaurantsRecord> sFactory = new ActiveRecordFactory<RestaurantsRecord>() {
		@Override
		public RestaurantsRecord create(Cursor c) {
			return fromCursor(c);
		}
		
		@Override
		public String[] getProjection() {
			return PROJECTION;
		}

        @Override
                    public Uri getContentUri() {
                        return Restaurants.CONTENT_URI;
                    }
                };

    			public static ActiveRecordFactory<RestaurantsRecord> getFactory() {
		return sFactory;
	}

    public static final Parcelable.Creator<RestaurantsRecord> CREATOR 
    	= new Parcelable.Creator<RestaurantsRecord>() {
        public RestaurantsRecord createFromParcel(Parcel in) {
            return new RestaurantsRecord(in);
        }

        public RestaurantsRecord[] newArray(int size) {
            return new RestaurantsRecord[size];
        }
    };
    
    public static String[] PROJECTION = {
    	Restaurants._ID,
    	Restaurants.NAME,
    	Restaurants.CITY,
    	Restaurants.CUISINES,
    	Restaurants.RATING,
    	Restaurants.DESCRIPTION,
    	Restaurants.HAS_VEGETARIAN
    };
    
    public interface Indices {
    	int _ID = 0;
    	int NAME = 1;
    	int CITY = 2;
    	int CUISINES = 3;
    	int RATING = 4;
    	int DESCRIPTION = 5;
    	int HAS_VEGETARIAN = 6;
    }
    
    private String mName;
    private boolean mNameDirty;
    private String mCity;
    private boolean mCityDirty;
    private String mCuisines;
    private boolean mCuisinesDirty;
    private double mRating;
    private boolean mRatingDirty;
    private String mDescription;
    private boolean mDescriptionDirty;
    private boolean mHasVegetarian;
    private boolean mHasVegetarianDirty;
    
    @Override
    protected String[] _getProjection() {
    	return PROJECTION;
    }
    
    public void setName(String name) {
    	mName = name;
    	mNameDirty = true;
    }
    
    public String getName() {
    	return mName;
    }
    
    public void setCity(String city) {
    	mCity = city;
    	mCityDirty = true;
    }
    
    public String getCity() {
    	return mCity;
    }
    
    public void setCuisines(String cuisines) {
    	mCuisines = cuisines;
    	mCuisinesDirty = true;
    }
    
    public String getCuisines() {
    	return mCuisines;
    }
    
    public void setRating(double rating) {
    	mRating = rating;
    	mRatingDirty = true;
    }
    
    public double getRating() {
    	return mRating;
    }
    
    public void setDescription(String description) {
    	mDescription = description;
    	mDescriptionDirty = true;
    }
    
    public String getDescription() {
    	return mDescription;
    }
    
    public void setHasVegetarian(boolean hasVegetarian) {
    	mHasVegetarian = hasVegetarian;
    	mHasVegetarianDirty = true;
    }
    
    public boolean getHasVegetarian() {
    	return mHasVegetarian;
    }
    
    
    public RestaurantsRecord() {
    	super(Restaurants.CONTENT_URI);
	}
	
	private RestaurantsRecord(Parcel in) {
    	super(Restaurants.CONTENT_URI);
    	
		setId(in.readLong());
		
		mName = in.readString();
		mCity = in.readString();
		mCuisines = in.readString();
		mRating = in.readDouble();
		mDescription = in.readString();
		mHasVegetarian = (in.readInt() > 0);
		
		boolean[] dirtyFlags = new boolean[6];
		in.readBooleanArray(dirtyFlags);
		mNameDirty = dirtyFlags[0];
		mCityDirty = dirtyFlags[1];
		mCuisinesDirty = dirtyFlags[2];
		mRatingDirty = dirtyFlags[3];
		mDescriptionDirty = dirtyFlags[4];
		mHasVegetarianDirty = dirtyFlags[5];
	}
	
	@Override
	public int describeContents() {
	    return 0;
	}
	
	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(getId());
		dest.writeString(mName);
		dest.writeString(mCity);
		dest.writeString(mCuisines);
		dest.writeDouble(mRating);
		dest.writeString(mDescription);
		dest.writeInt(mHasVegetarian ? 1 : 0);
		dest.writeBooleanArray(new boolean[] {
			mNameDirty,
			mCityDirty,
			mCuisinesDirty,
			mRatingDirty,
			mDescriptionDirty,
			mHasVegetarianDirty
		});
	}
	
	@Override
	protected AbstractValuesBuilder createBuilder() {
		Builder builder = Restaurants.newBuilder();

		if(mNameDirty) {
			builder.setName(mName);
		}
		if(mCityDirty) {
			builder.setCity(mCity);
		}
		if(mCuisinesDirty) {
			builder.setCuisines(mCuisines);
		}
		if(mRatingDirty) {
			builder.setRating(mRating);
		}
		if(mDescriptionDirty) {
			builder.setDescription(mDescription);
		}
		if(mHasVegetarianDirty) {
			builder.setHasVegetarian(mHasVegetarian);
		}
		
		return builder;
	}
	
    @Override
	public void makeDirty(boolean dirty){
		mNameDirty = dirty;
		mCityDirty = dirty;
		mCuisinesDirty = dirty;
		mRatingDirty = dirty;
		mDescriptionDirty = dirty;
		mHasVegetarianDirty = dirty;
	}

	@Override
	protected void setPropertiesFromCursor(Cursor c) {
		setId(c.getLong(Indices._ID));
		setName(c.getString(Indices.NAME));
		setCity(c.getString(Indices.CITY));
		setCuisines(c.getString(Indices.CUISINES));
		setRating(c.getDouble(Indices.RATING));
		setDescription(c.getString(Indices.DESCRIPTION));
		setHasVegetarian(c.getInt(Indices.HAS_VEGETARIAN) > 0);
	}
	
	public static RestaurantsRecord fromCursor(Cursor c) {
	    RestaurantsRecord item = new RestaurantsRecord();
	    
		item.setPropertiesFromCursor(c);
		
		item.makeDirty(false);
		
	    return item;
	}
	
	public static RestaurantsRecord fromBundle(Bundle bundle, String key) {
		bundle.setClassLoader(RestaurantsRecord.class.getClassLoader());
		return bundle.getParcelable(key);
	}
	
	public static RestaurantsRecord get(long id) {
	    Cursor c = null;
	    
	    ContentResolver resolver = Mechanoid.getContentResolver();
	    
	    try {
	        c = resolver.query(Restaurants.CONTENT_URI.buildUpon()
			.appendPath(String.valueOf(id)).build(), PROJECTION, null, null, null);
	        
	        if(!c.moveToFirst()) {
	            return null;
	        }
	        
	        return fromCursor(c);
	    } finally {
	        Closeables.closeSilently(c);
	    }
	}
}
